<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Illusion Engine 07 - First Window</title>
    <link href="/FirstWindow/"/>
    <url>/FirstWindow/</url>
    
    <content type="html"><![CDATA[<h2 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h2><hr><h2 id="Implementation"><a href="#Implementation" class="headerlink" title="Implementation"></a>Implementation</h2><hr><h2 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h2>]]></content>
    
    
    <categories>
      
      <category>Game Engine</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Original</tag>
      
      <tag>C++</tag>
      
      <tag>Game Development</tag>
      
      <tag>Computer Graphics</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Illusion Engine 06 - ImGui</title>
    <link href="/ImGui/"/>
    <url>/ImGui/</url>
    
    <content type="html"><![CDATA[<h2 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h2><hr><h2 id="Implementation"><a href="#Implementation" class="headerlink" title="Implementation"></a>Implementation</h2><hr><h2 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h2>]]></content>
    
    
    <categories>
      
      <category>Game Engine</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Original</tag>
      
      <tag>C++</tag>
      
      <tag>Game Development</tag>
      
      <tag>Computer Graphics</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Illusion Engine 05 - Layer System</title>
    <link href="/LayerSystem/"/>
    <url>/LayerSystem/</url>
    
    <content type="html"><![CDATA[<h2 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h2><hr><h2 id="Implementation"><a href="#Implementation" class="headerlink" title="Implementation"></a>Implementation</h2><hr><h2 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h2>]]></content>
    
    
    <categories>
      
      <category>Game Engine</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Original</tag>
      
      <tag>C++</tag>
      
      <tag>Game Development</tag>
      
      <tag>Computer Graphics</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Illusion Engine 04 - Event System</title>
    <link href="/EventSystem/"/>
    <url>/EventSystem/</url>
    
    <content type="html"><![CDATA[<h2 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h2><hr><h2 id="Implementation"><a href="#Implementation" class="headerlink" title="Implementation"></a>Implementation</h2><hr><h2 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h2>]]></content>
    
    
    <categories>
      
      <category>Game Engine</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Original</tag>
      
      <tag>C++</tag>
      
      <tag>Game Development</tag>
      
      <tag>Computer Graphics</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Illusion Engine 03 - Log System</title>
    <link href="/LogSystem/"/>
    <url>/LogSystem/</url>
    
    <content type="html"><![CDATA[<h2 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h2><p>To have better support for the debugging of our game engine, it is necessary to have helper modules such as a logging system built before we start to code.</p><p>A log system has many functions. It can record everything that happened to the program, which help us get rid of so many breakpoints and <strong>easily locate the problem</strong> just by analyzing the log.</p><p>In addition, when we just want to confirm whether a certain function is called, the log system allows us to know the result <strong>without interrupting the program</strong>.</p><p>Most importantly, the log system helps us <strong>distinguish the severity of the information</strong>. For example, warning information is displayed in yellow, error information is displayed in red, etc.</p><hr><h2 id="Implementation"><a href="#Implementation" class="headerlink" title="Implementation"></a>Implementation</h2><p>Although writing a customized log library is not that hard, I decided to use SpdLog library which is a fast C++ log library to build our log system. The library is in <em><strong>Illusion&#x2F;Lib&#x2F;…</strong></em> folder.</p><h3 id="Log-h"><a href="#Log-h" class="headerlink" title="Log.h"></a>Log.h</h3><p>To build the log system, create a <strong>.h</strong> file called Log.h in <em><strong>Illusion&#x2F;src&#x2F;Engine&#x2F;Core&#x2F;Log&#x2F;…</strong></em> folder and enter code:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">pragma</span> once</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;Engine/Core/Core.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;spdlog/spdlog.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;spdlog/fmt/ostr.h&quot;</span></span><br><br> <span class="hljs-comment">//--------------------namespace: Illusion starts--------------------</span><br><span class="hljs-keyword">namespace</span> Illusion<br>&#123;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Log</span><br>&#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-comment">//Initialize the logging system</span><br><span class="hljs-comment">//Set up loggers for both engine and application</span><br><span class="hljs-function"><span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title">Init</span><span class="hljs-params">()</span></span>;<br><br><span class="hljs-keyword">inline</span> <span class="hljs-type">static</span> std::shared_ptr &lt;spdlog::logger&gt;&amp; <span class="hljs-built_in">GetCoreLogger</span>() &#123; <span class="hljs-keyword">return</span> s_CoreLogger; &#125;;<br><span class="hljs-keyword">inline</span> <span class="hljs-type">static</span> std::shared_ptr &lt;spdlog::logger&gt;&amp; <span class="hljs-built_in">GetClientLogger</span>() &#123; <span class="hljs-keyword">return</span> s_ClientLogger; &#125;;<br><br><span class="hljs-keyword">private</span>:<br><span class="hljs-comment">//Two loggers: Logger for engine and logger for application</span><br><span class="hljs-type">static</span> std::shared_ptr &lt;spdlog::logger&gt; s_CoreLogger;<br><span class="hljs-type">static</span> std::shared_ptr &lt;spdlog::logger&gt; s_ClientLogger;<br><br><br>&#125;;<br><span class="hljs-comment">//--------------------namespace: Illusion ends--------------------</span><br>&#125;<br><br><span class="hljs-comment">//Core Log Macros</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> ENGINE_CORE_TRACE(...)::Illusion::Log::GetCoreLogger()-&gt;trace(__VA_ARGS__)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> ENGINE_CORE_INFO(...)::Illusion::Log::GetCoreLogger()-&gt;info(__VA_ARGS__)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> ENGINE_CORE_WARN(...)::Illusion::Log::GetCoreLogger()-&gt;warn(__VA_ARGS__)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> ENGINE_CORE_ERROR(...)::Illusion::Log::GetCoreLogger()-&gt;<span class="hljs-keyword">error</span>(__VA_ARGS__)</span><br><br><span class="hljs-comment">//Client Log Macros  </span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> ENGINE_CLIENT_TRACE(...)::Illusion::Log::GetClientLogger()-&gt;trace(__VA_ARGS__)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> ENGINE_CLIENT_INFO(...)::Illusion::Log::GetClientLogger()-&gt;info(__VA_ARGS__)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> ENGINE_CLIENT_WARN(...)::Illusion::Log::GetClientLogger()-&gt;warn(__VA_ARGS__)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> ENGINE_CLIENT_ERROR(...)::Illusion::Log::GetClientLogger()-&gt;<span class="hljs-keyword">error</span>(__VA_ARGS__)</span><br></code></pre></td></tr></table></figure><ul><li>For Illuison Engine, I chose to use a <em><strong>singleton static log system</strong></em> that is (due to its static nature) always available throughout the project.<ul><li>Using a singleton class with static functionality has several advantages and disadvantages, with its disadvantages mostly being the loss of several OOP properties and less control over construction&#x2F;destruction. However, for relatively small projects like this it is easy to work with.</li></ul></li><li>The difference between CoreLogger and ClientLogger is <strong>where the Log occurs</strong>. Generally, all logs from the engine should be CoreLog, and all logs from the Application should be ClientLog.</li><li>Then we only need to encapsulate some corresponding Macros:</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">define</span> ENGINE_CORE_TRACE(...)::Illusion::Log::GetCoreLogger()-&gt;trace(__VA_ARGS__)</span><br></code></pre></td></tr></table></figure><ul><li>Here, <strong>(…)</strong> represents <strong>the Omit parameter</strong> inside, and <strong>__ VA_ARGS __</strong> will pass the content inside to the corresponding function.</li><li><strong>::</strong> is the <strong>Scope Resolution Operator</strong>. Adding a double colon before Illusion ensures that no matter where it is called, it will be searched from the Global Scope.</li></ul><h3 id="Log-cpp"><a href="#Log-cpp" class="headerlink" title="Log.cpp"></a>Log.cpp</h3><p>The code inside Log.cpp looks like this:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;pch.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;Log.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;spdlog/sinks/stdout_color_sinks.h&quot;</span></span><br><br> <span class="hljs-comment">//--------------------namespace: Illusion starts--------------------</span><br><span class="hljs-keyword">namespace</span> Illusion<br>&#123;<br>std::shared_ptr &lt;spdlog::logger&gt; Log::s_CoreLogger;<br>std::shared_ptr &lt;spdlog::logger&gt; Log::s_ClientLogger;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Log::Init</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-comment">//Set up all the logging pattern</span><br>spdlog::<span class="hljs-built_in">set_pattern</span>(<span class="hljs-string">&quot;%^[%T] %n: %v%$&quot;</span>);<br><br><span class="hljs-comment">//Set up the Logger for game engine</span><br>s_CoreLogger = spdlog::<span class="hljs-built_in">stdout_color_mt</span>(<span class="hljs-string">&quot;ENGINE&quot;</span>);<br>s_CoreLogger-&gt;<span class="hljs-built_in">set_level</span>(spdlog::level::trace);<br><br><span class="hljs-comment">//Set up Logger for game application</span><br>s_ClientLogger = spdlog::<span class="hljs-built_in">stdout_color_mt</span>(<span class="hljs-string">&quot;APP&quot;</span>);<br>s_ClientLogger-&gt;<span class="hljs-built_in">set_level</span>(spdlog::level::trace);<br>&#125;<br><span class="hljs-comment">//--------------------namespace: Illusion ends--------------------</span><br>&#125;<br></code></pre></td></tr></table></figure><ul><li>At the start of Log.cpp, s_CoreLogger and s_ClientLogger are initialized. Since they are <strong>static members</strong> in Log class, if they are not initialized, an <strong>unresolved external link problem (LNK2001)</strong> will be caused when calling GetCoreLogger() or GetClientLogger().</li><li>The <strong>format of the Log</strong> is set by following code. %^ to %$ is the <strong>Color Range</strong>, the text color in this range will be different, [%T] gives us the <strong>current time</strong> in HH:MM:SS format, %n is the <strong>name of the current logger</strong>, %v is the actual <strong>text content</strong>.</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">//Set up all the logging pattern</span><br>spdlog::<span class="hljs-built_in">set_pattern</span>(<span class="hljs-string">&quot;%^[%T] %n: %v%$&quot;</span>);<br></code></pre></td></tr></table></figure><img src="/LogSystem/Log.png" class="" title="Log Format"><hr><h2 id="Use-in-Project"><a href="#Use-in-Project" class="headerlink" title="Use in Project"></a>Use in Project</h2><h3 id="EntryPoint-h"><a href="#EntryPoint-h" class="headerlink" title="EntryPoint.h"></a>EntryPoint.h</h3><p>To use the log system in our project, we could just initialize it at the start of our program:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">pragma</span> once</span><br><br><span class="hljs-function"><span class="hljs-keyword">extern</span> Illusion::Application* <span class="hljs-title">Illusion::CreateApplication</span><span class="hljs-params">()</span></span>;<br><br><span class="hljs-comment">//The main function for the whole application</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">char</span>** argv)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-comment">//Initialization of the Logging system</span><br>Illusion::Log::<span class="hljs-built_in">Init</span>();<br><span class="hljs-built_in">ENGINE_CORE_WARN</span>(<span class="hljs-string">&quot;--------------------Logging System Initialized--------------------&quot;</span>);<br><br><span class="hljs-comment">//Create  the Game app</span><br><span class="hljs-keyword">auto</span> app = Illusion::<span class="hljs-built_in">CreateApplication</span>();<br><br><span class="hljs-comment">//Start the Game app</span><br>app-&gt;<span class="hljs-built_in">Run</span>();<br><br><span class="hljs-comment">//Delete the Game app</span><br><span class="hljs-keyword">delete</span> app;<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>As the result, a log informatin would be printed in the console:</p><img src="/LogSystem/Result.png" class="" title="Initialization Result"><h3 id="Engine-h"><a href="#Engine-h" class="headerlink" title="Engine.h"></a>Engine.h</h3><p>Our last step is to include the Log system in Engine.h. So that our application could use it wherever we want.</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">pragma</span> once</span><br><br><span class="hljs-comment">// For use in applications</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;Engine/Core/Application/Application.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;Engine/Core/Log/Log.h&quot;</span></span><br></code></pre></td></tr></table></figure><hr><h2 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h2><p>So far, we have completed the Log System. Where needed in the future, we could simply use code like this:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-built_in">ENGINE_CORE_INFO</span>(<span class="hljs-string">&quot;Window Created: &#123;0&#125; (&#123;1&#125;,&#123;2&#125;)&quot;</span>, m_Data.Title, m_Data.Width, m_Data.Height);<br></code></pre></td></tr></table></figure><p>to get whatever information we want.</p>]]></content>
    
    
    <categories>
      
      <category>Game Engine</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Original</tag>
      
      <tag>C++</tag>
      
      <tag>Game Development</tag>
      
      <tag>Computer Graphics</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Illusion Engine 02 - EntryPoint</title>
    <link href="/EntryPoint/"/>
    <url>/EntryPoint/</url>
    
    <content type="html"><![CDATA[<h2 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h2><p>As we all know, every C++ program starts with a main function. However, for a game engine, the position of the main function, the structure of the program, and the logical connection between the engine and the game application need to be carefully designed.</p><p>To make life easier for game developers, we want to <strong>hide the details of how the engine works</strong> from them. In this way, all they need to consider is what <strong>objects</strong> are in the game world, what <strong>properties</strong> these objects have, and how the objects <strong>interact</strong> with each other.</p><p>It can be seen that the main function <em><strong>should be put into the game engine</strong></em>. Developers only need to <strong>create a game instance</strong>, describe the game world, and hand over the update, rendering, resource recovery, and all underlying operations to the engine.</p><p>Also to better integrate the engine and the game, we need to provide developers with <strong>a template of the game instance</strong> (the template here does not refer to the template in C++, but the framework in the popular sense), telling them how to describe the game world.</p><p>As a result, the including structure of the project should look like this:</p><img src="/EntryPoint/Structure.png" class="" title="The Structure of the Project"><ul><li>Application.h&#x2F;.cpp contains a class named Application, which is the template of the game instance. It handles how the game updates.</li><li>Game.cpp contains a customized class inherited from class Application. This is the file where developers describe the game world.</li><li>EntryPoint.h contains the main function. It is the entry of the whole program.</li><li>Engine.h and Core.h are both helper files. Engine.h contains all the header files that the engine has and Core.h defines some helper macros to help us to develop the engine.</li></ul><hr><h2 id="Implementation"><a href="#Implementation" class="headerlink" title="Implementation"></a>Implementation</h2><h3 id="Application-h-x2F-cpp"><a href="#Application-h-x2F-cpp" class="headerlink" title="Application.h&#x2F;.cpp"></a>Application.h&#x2F;.cpp</h3><p>Firstly, we have to create two files (<strong>.cpp&#x2F;.h</strong>) in <em><strong>Illusion&#x2F;src&#x2F;Engine&#x2F;Core&#x2F;Application&#x2F;…</strong></em> folder. These files would contain our Application class.</p><p>Since Application is the template for the game instance, it should have the following members:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;Engine/Core/Core.h&quot;</span></span><br><br><span class="hljs-keyword">namespace</span> Illusion <br>&#123;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Application</span> <br>    &#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-built_in">Application</span>();<br><span class="hljs-keyword">virtual</span> ~<span class="hljs-built_in">Application</span>();<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Run</span><span class="hljs-params">()</span></span>;<br>&#125;;<br><br><span class="hljs-function">Application* <span class="hljs-title">CreateApplication</span><span class="hljs-params">()</span></span>;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>Besides basic constructer and destructer, there’s also a function called Run(), in which we want our Game starts.</li><li>CreateApplication() is the Creation function of the application. This function should be <em><strong>implement by the user themselves</strong></em> inside Game.cpp since we don’t know what they will call their game application and what they will do with it. There cannot be a uniform implementation of the creation function.</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;Application.h&quot;</span></span><br><br><span class="hljs-keyword">namespace</span> Illusion <br>&#123;<br>Application::<span class="hljs-built_in">Application</span>() <br>    &#123;<br>&#125;<br><br>Application::~<span class="hljs-built_in">Application</span>() <br>    &#123;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Application::Run</span><span class="hljs-params">()</span> </span><br><span class="hljs-function">    </span>&#123;<br><span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>Run() contains the <strong>game loop</strong> which is a while-loop.</li></ul><h3 id="Game-cpp"><a href="#Game-cpp" class="headerlink" title="Game.cpp"></a>Game.cpp</h3><p>Inside <em><strong>Game&#x2F;src&#x2F;…</strong></em> folder, create a <strong>.cpp</strong> file and name it “Game”.</p><ul><li>Game.cpp contains a class called Game which is inherited from Application class. It describe what the game world looks like.</li><li><strong>extern</strong> works like <strong>#include</strong>, but the range it includes is <em>smaller</em> than #include.</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;Engine.h&gt;</span></span><br> <span class="hljs-comment">//--------------------Entry point for the application--------------------</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;Engine/Core/EntryPoint.h&gt;</span></span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Game</span> : <span class="hljs-keyword">public</span> Illusion::Application<br>&#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-built_in">Game</span>()<br>&#123;<br>&#125;<br>~<span class="hljs-built_in">Game</span>() &#123;&#125;<br>&#125;;<br><br><span class="hljs-comment">//The Creation function for the Game Application</span><br><span class="hljs-function">Illusion::Application* <span class="hljs-title">Illusion::CreateApplication</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Game</span>();<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="EntryPoint-h"><a href="#EntryPoint-h" class="headerlink" title="EntryPoint.h"></a>EntryPoint.h</h3><p>For the entry point of the program, we have to create a <strong>.h</strong> file called “EntryPoint” in <em><strong>Illusion&#x2F;src&#x2F;Engine&#x2F;Core…</strong></em> folder.</p><ul><li>EntryPoint.h contains the main function of the whole program. It is the entry of the game.</li><li>CreateApplication() is declared and called here.</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-function"><span class="hljs-keyword">extern</span> Illusion::Application* <span class="hljs-title">Illusion::CreateApplication</span><span class="hljs-params">()</span></span>;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">char</span>** argv)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-comment">//Creation of the Game app</span><br><span class="hljs-keyword">auto</span> app = Illusion::<span class="hljs-built_in">CreateApplication</span>();<br><br><span class="hljs-comment">//Start the Game app</span><br>app-&gt;<span class="hljs-built_in">Run</span>();<br><br><span class="hljs-comment">//Delete the Game app</span><br><span class="hljs-keyword">delete</span> app;<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="Core-h"><a href="#Core-h" class="headerlink" title="Core.h"></a>Core.h</h3><p>Core.h is a helper file, and it belongs to the core of the engine. So create Core.h file in <em><strong>Illusion&#x2F;src&#x2F;Engine&#x2F;Core&#x2F;…</strong></em> folder.</p><p>Core.h contains some <strong>helper macros and definitions</strong>, such as ILLUSION_CORE_ASSERTS, ENGINE_BIND_EVENT_FN(fn), and so on. We would talk about them later.</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;memory&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> ILLUSION_ENABLE_ASSERTS</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> ILLUSION_CLIENT_ASSERT(x, ...) &#123; <span class="hljs-keyword">if</span>(!(x)) &#123; ENGINE_CLIENT_ERROR(<span class="hljs-string">&quot;Assertion Failed: &#123;0&#125;&quot;</span>, __VA_ARGS__); __debugbreak(); &#125; &#125;</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> ILLUSION_CORE_ASSERT(x, ...) &#123; <span class="hljs-keyword">if</span> (!(x)) &#123; ENGINE_CORE_ERROR(<span class="hljs-string">&quot;Assertion Failed: &#123;0&#125;&quot;</span>, __VA_ARGS__); __debugbreak(); &#125; &#125;</span><br><span class="hljs-meta">#<span class="hljs-keyword">else</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> ILLUSION_CLIENT_ASSERT(x, ...)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> ILLUSION_CORE_ASSERT(x, ...)</span><br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><br><span class="hljs-comment">//move 1 to the left by x bit, used in creating a bitfield</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> BIT(x) (1 &lt;&lt; x)</span><br><br><span class="hljs-comment">// Macro that generate a callable function which is like a pointer to the funtion fn</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> ENGINE_BIND_EVENT_FN(fn) std::bind(&amp;fn, this, std::placeholders::_1)</span><br><br><span class="hljs-keyword">namespace</span> Illusion<br>&#123;<br><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> T&gt;<br><span class="hljs-keyword">using</span> Scope = std::unique_ptr&lt;T&gt;;<br><br><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> T&gt;<br><span class="hljs-keyword">using</span> Ref = std::shared_ptr&lt;T&gt;;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="Engine-h"><a href="#Engine-h" class="headerlink" title="Engine.h"></a>Engine.h</h3><p>Create the Engine.h file in <em><strong>Illusion&#x2F;src…</strong></em> folder. Finally, the connection work is done here. The structure mentioned in the Introduction is completed.</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">// FOR USE BY OTHER APPLICATIONS</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;Engine/Core/Application/Application.h&quot;</span></span><br></code></pre></td></tr></table></figure><hr><h2 id="Pre-compile-Header"><a href="#Pre-compile-Header" class="headerlink" title="Pre-compile Header"></a>Pre-compile Header</h2><p>Pre-compile header is know as <strong>PCH</strong> file. PCH can compile header files into <strong>intermediate objects</strong> and store them in the disk. Therefore, as long as these header files are not changed, they <em><strong>do not need to be recompiled</strong></em> in the next compilation, which can save us a lot of time. Therefore, for #include that is used in almost every .cpp file (usually C++ standard library), we can put them in the PCH for compilation.</p><p>Inside <em><strong>Illusion&#x2F;src&#x2F;Engine&#x2F;…</strong></em> folder, create two files (.cpp&#x2F;.h) and name them pch. For <strong>pch.h</strong>, enter code:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">pragma</span> once</span><br><span class="hljs-comment">//--------------------C++ Standard Library--------------------</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;memory&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;utility&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;functional&gt;</span></span><br><br><span class="hljs-comment">//--------------------C++ Standard Templates--------------------</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sstream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;vector&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;array&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;unordered_map&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;unordered_set&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;Windows.h&gt;</span></span><br></code></pre></td></tr></table></figure><p>For <strong>pch.cpp</strong>, enter code:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;pch.h&quot;</span></span><br></code></pre></td></tr></table></figure><p>Although the code in pch.cpp seems useless, Visual Studio needs a source file that included pch.h in order to compile the pre-compile header.</p><p>We have already enabled the pre-compile header feature for <strong>Illusion Project</strong> in the premake.lua in the <a href="https://rigellm.github.io/Preparation/">Preparation</a>.</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs lua"><span class="hljs-comment">-- Define the precompile header</span><br>    pchheader <span class="hljs-string">&quot;pch.h&quot;</span><br>    pchsource <span class="hljs-string">&quot;Illusion/src/pch.cpp&quot;</span><br></code></pre></td></tr></table></figure><p>So, to use the pre-compile header, we only have to include pch.h at the start of every cpp file in <strong>Illusion Project</strong>:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;pch.h&quot;</span></span><br></code></pre></td></tr></table></figure><p>For the code we have now, we only need to change the <strong>Application.cpp</strong> file.</p><h2 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h2><p>So far, we have completed the creation of the structure between the game and the engine, separated the tedious include work to Engine.h, and handed over the creation, update, and destruction of the game instance to EntryPoint.h in Engine.h, and abstracted the internal behavior by the Application class. After such a design, the details of engine operation are well hidden, and the work of game developers is greatly simplified.</p>]]></content>
    
    
    <categories>
      
      <category>Game Engine</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Original</tag>
      
      <tag>C++</tag>
      
      <tag>Game Development</tag>
      
      <tag>Computer Graphics</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Bash Learning 01</title>
    <link href="/BashLearning01/"/>
    <url>/BashLearning01/</url>
    
    <content type="html"><![CDATA[<h2 id="Popd-x2F-Pushd"><a href="#Popd-x2F-Pushd" class="headerlink" title="Popd&#x2F;Pushd"></a>Popd&#x2F;Pushd</h2><p>These two commands are usually used to <strong>change the directoy</strong>.</p><ul><li><p>Pushd</p><ul><li>Move to a certain directory, and store the current directory at the <strong>top</strong> of a stack.</li></ul></li><li><p>Popd</p><ul><li>Read the directory from the stack, move to it, and then delete the directory from the stack.</li></ul></li></ul><p>The <strong>first time</strong> using Pushd, the current directory would be stored at the bottom of the stack since the stack is empty. If the command is used again, another directory would be stored on top of the first directory.</p><p>Example:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs bash">@<span class="hljs-built_in">echo</span> off<br>Echo current directory：%<span class="hljs-built_in">cd</span>% <br><span class="hljs-built_in">pushd</span> C:\Intel\Logs <br>Echo current directory：%<span class="hljs-built_in">cd</span>% <br><span class="hljs-built_in">pushd</span> C:\Download <br>Echo current directory：%<span class="hljs-built_in">cd</span>% <br><span class="hljs-built_in">pushd</span> C:\WINDOWS <br>Echo current directory：%<span class="hljs-built_in">cd</span>% <br><span class="hljs-built_in">popd</span> <br>Echo current directory：%<span class="hljs-built_in">cd</span>% <br><span class="hljs-built_in">popd</span> <br>Echo current directory：%<span class="hljs-built_in">cd</span>% <br><span class="hljs-built_in">popd</span> <br>Echo current directory：%<span class="hljs-built_in">cd</span>%<br></code></pre></td></tr></table></figure><p>Result:</p><img src="/BashLearning01/dirResult.png" class="" title="Running Result"><hr><h2 id="Return-Value"><a href="#Return-Value" class="headerlink" title="Return Value"></a>Return Value</h2><p>If we want to get the return value of a command and store it in a variable, usually we use the following command:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-keyword">for</span> /f <span class="hljs-string">&quot;delims=&quot;</span> %%returnvalue <span class="hljs-keyword">in</span> (<span class="hljs-string">&#x27;command&#x27;</span>) <span class="hljs-keyword">do</span> <span class="hljs-built_in">set</span> variable=%%returnvalue<br></code></pre></td></tr></table></figure><p><em><strong>command</strong></em> represents the command which we want to get the return value from. <em><strong>variable</strong></em> is where we store the return value. <em><strong>returnvalue</strong></em> would be ultimately set to the return value of this command.</p><p>To retrieve the value, we could use the following command:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">%variable%<br></code></pre></td></tr></table></figure><p>Example:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">pushd</span> C:<br><span class="hljs-built_in">cd</span> Program Files (x86)\Microsoft Visual Studio\Installer<br><span class="hljs-keyword">for</span> /f <span class="hljs-string">&quot;delims=&quot;</span> %%t <span class="hljs-keyword">in</span> (<span class="hljs-string">&#x27;vswhere.exe -property catalog_productLineVersion&#x27;</span>) <span class="hljs-keyword">do</span> <span class="hljs-built_in">set</span> version=%%t<br><span class="hljs-built_in">popd</span><br><span class="hljs-built_in">cd</span> ..\<br>call Lib\premake5\Premake5.exe vs%version%<br>PAUSE<br></code></pre></td></tr></table></figure><p>Result:</p><img src="/BashLearning01/ReturnResult.png" class="" title="Running Result">]]></content>
    
    
    <categories>
      
      <category>Bash Notes</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Original</tag>
      
      <tag>Bash</tag>
      
      <tag>Windows</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Illusion Engine 01 - Preparation</title>
    <link href="/Preparation/"/>
    <url>/Preparation/</url>
    
    <content type="html"><![CDATA[<p>This article is aimed at doing all the preparation work before coding. It includes the construction of the project structure, the configuration of the project, and the introduction to third-party libraries.</p><h2 id="Creating-the-project"><a href="#Creating-the-project" class="headerlink" title="Creating the project"></a>Creating the project</h2><p>The recommended IDE is visual studio 2022. This project also works for Visual Studio 2017 and 2019. The test on other IDE hasn’t been done.</p><p>Create a static library as our engine project, so that it could be statically linked to our game application.</p><img src="/Preparation/IDE.png" class="" title="Visual Studio 2022"><p>This project would become our engine project. Other than that, we have to create an empty project in this solution which will become our game application.</p><p>Here I’ll name the engine project “Illusion”.</p><img src="/Preparation/Solution.png" class="" title="Illusion &amp; Game"><hr><h2 id="Project-Structure"><a href="#Project-Structure" class="headerlink" title="Project Structure"></a>Project Structure</h2><p>Game and Illusion could be included in a single folder, such as Root. In my project, I included them in a folder called Collection. So the structure looks like this:</p><img src="/Preparation/CollectionFolder.png" class="" title="The structure of Collection folder"><ul><li>Game<ul><li>The Game project, includes: src&#x2F;… folder, assets&#x2F;shaders&#x2F;… folder, and assets&#x2F;textures&#x2F;… folder.</li><li>The src folder contains all the source code for the game application</li><li>The shaders folder contains customized shaders and the textures folder contains all kinds of texture resources.</li></ul></li></ul><img src="/Preparation/GameFolder.png" class="" title="The Game Folder"><ul><li>Illusion<ul><li>The Illusion project, includes: Lib&#x2F;… folder, and src&#x2F;Engine&#x2F;… folder</li><li>In the src folder, the source code is separated into different folders based on their function, such as Core, Event, Renderer, etc.</li><li>The content in the Lib folder would be explained in the third parties part below.</li></ul></li></ul><img src="/Preparation/IllusionFolder.png" class="" title="The Illusion Folder"><ul><li>Lib<ul><li>The third-party library or tools that are not necessary for the Illusion Engine and Game Application, but is helpful when we build the whole project, such as premake, cmake, etc.</li><li>Either Illusion or Game could be executed without the existence of premake, but premake could help us get rid of configuring the project over and over again.</li></ul></li></ul><img src="/Preparation/LibFolder.png" class="" title="The Lib Folder"><ul><li>Scripts<ul><li>The bat files that calls premake or clean up the project.</li></ul></li></ul><img src="/Preparation/ScriptsFolder.png" class="" title="The Scripts Folder"><p>As a result, the final structure of the project looks like this:</p><figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs gauss">Collection<br>├─Game<br>│  ├─assets<br>│  │  ├─shaders<br>│  │  └─textures<br>│  └─src<br>├─Illusion<br>│  ├─<span class="hljs-keyword">Lib</span><br>│  │  ├─Glad<br>│  │  ├─GLFW<br>│  │  ├─<span class="hljs-built_in">glm</span><br>│  │  ├─imgui<br>│  │  ├─spdlog<br>│  │  └─stb_image<br>│  └─src<br>│      └─Engine<br>│          ├─Core<br>│          │  ├─Application<br>│          │  ├─Input<br>│          │  ├─Layer<br>│          │  ├─<span class="hljs-built_in">Log</span><br>│          │  ├─Resource<br>│          │  ├─Utils<br>│          │  └─<span class="hljs-built_in">Window</span><br>│          ├─Event<br>│          ├─ImGui<br>│          └─Renderer<br>├─<span class="hljs-keyword">Lib</span><br>└─Scripts<br></code></pre></td></tr></table></figure><hr><h2 id="Third-party-Libraries"><a href="#Third-party-Libraries" class="headerlink" title="Third-party Libraries"></a>Third-party Libraries</h2><p>As of the time this article is published, the third-party library used in this project includes:</p><ul><li><a href="https://github.com/gabime/spdlog">SpdLog</a><ul><li>A fast C++ logging library.</li></ul></li><li><a href="https://github.com/glfw/glfw">GLFW</a><ul><li>GL Frame Work, a multi-platform library for OpenGL, OpenGL ES, Vulkan. Mainly used to handle input and window events.</li></ul></li><li><a href="https://github.com/Dav1dde/glad">Glad</a><ul><li>The dependency library for OpenGL, including API for OpenGL.</li></ul></li><li><a href="https://github.com/ocornut/imgui">ImGui</a><ul><li>A Bloat-free Graphical User interface for C++ with minimal dependencies. Used to build viewer and editor</li></ul></li><li><a href="https://github.com/g-truc/glm">glm</a><ul><li>A basic math library, including vector, matrix, and some other common math components.</li></ul></li><li><a href="https://github.com/premake/premake-core">Premake</a><ul><li>A command line utility that reads a scripted definition of a software project, then uses it to perform build configuration tasks or generate project files.</li></ul></li></ul><p>All of these libraries could be found on GitHub. You could click on the name of the library to jump to its page on Github.</p><p>SpdLog, GLFW, Glad, ImGui, and glm are included in Collection&#x2F;Illusion&#x2F;Lib… folder.</p><img src="/Preparation/IllusionLib.png" class="" title="Thirdparty Libraries"><p>Premake is included in Collection&#x2F;Lib&#x2F;… folder.</p><hr><h2 id="Configurations"><a href="#Configurations" class="headerlink" title="Configurations"></a>Configurations</h2><p>Since we have premake, we could add a configuration file for our projects.</p><p>Inside Collection&#x2F;… folder, create a file called “premake” and revise its extension to “.lua”.</p><p>In premake.lua, enter code:</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br></pre></td><td class="code"><pre><code class="hljs lua"><span class="hljs-comment">-- Set up a workspace, this would work for every project</span><br>workspace <span class="hljs-string">&quot;Project&quot;</span><br>    architecture <span class="hljs-string">&quot;x64&quot;</span><br><span class="hljs-comment">-- Set the starting project to be Game</span><br>    startproject <span class="hljs-string">&quot;Game&quot;</span><br><span class="hljs-comment">-- Define Build Configuration</span><br>    configurations<br>    &#123;<br>        <span class="hljs-string">&quot;Debug&quot;</span>,<br>        <span class="hljs-string">&quot;Release&quot;</span>,<br>        <span class="hljs-string">&quot;Dist&quot;</span><br>    &#125;<br><span class="hljs-comment">-- Set the output file format to be like &quot;Debug-Windows-x86_64&quot;</span><br>outputdir = <span class="hljs-string">&quot;%&#123;cfg.buildcfg&#125;-%&#123;cfg.system&#125;-%&#123;cfg.architecture&#125;&quot;</span><br><span class="hljs-comment">-- Include directories relative to the root folder (solution directory)</span><br>IncludeDir = &#123;&#125;<br>IncludeDir[<span class="hljs-string">&quot;GLFW&quot;</span>] = <span class="hljs-string">&quot;Illusion/Lib/GLFW/include&quot;</span><br>IncludeDir[<span class="hljs-string">&quot;Glad&quot;</span>] = <span class="hljs-string">&quot;Illusion/Lib/Glad/include&quot;</span><br>IncludeDir[<span class="hljs-string">&quot;ImGui&quot;</span>] = <span class="hljs-string">&quot;Illusion/Lib/imgui&quot;</span><br>IncludeDir[<span class="hljs-string">&quot;glm&quot;</span>] = <span class="hljs-string">&quot;Illusion/Lib/glm&quot;</span><br>IncludeDir[<span class="hljs-string">&quot;stb_image&quot;</span>] = <span class="hljs-string">&quot;Illusion/Lib/stb_image&quot;</span><br><span class="hljs-comment">-- Include these folders to load the configuration files at those positions</span><br>include <span class="hljs-string">&quot;Illusion/Lib/GLFW&quot;</span><br>include <span class="hljs-string">&quot;Illusion/Lib/Glad&quot;</span><br>include <span class="hljs-string">&quot;Illusion/Lib/imgui&quot;</span><br><span class="hljs-comment">-- Define Illusion Project, set the relative path, set the kind to be a static library, and set the language</span><br>project <span class="hljs-string">&quot;Illusion&quot;</span><br>    location <span class="hljs-string">&quot;Illusion&quot;</span><br>    kind <span class="hljs-string">&quot;StaticLib&quot;</span><br>    language <span class="hljs-string">&quot;C++&quot;</span><br>    cppdialect <span class="hljs-string">&quot;C++17&quot;</span><br>    staticruntime <span class="hljs-string">&quot;on&quot;</span><br><span class="hljs-comment">-- Set the output path and intermediate path</span><br>    targetdir (<span class="hljs-string">&quot;bin/&quot;</span> .. outputdir .. <span class="hljs-string">&quot;/%&#123;prj.name&#125;&quot;</span>)<br>    objdir (<span class="hljs-string">&quot;bin-int/&quot;</span> .. outputdir .. <span class="hljs-string">&quot;/%&#123;prj.name&#125;&quot;</span>)<br><span class="hljs-comment">-- Define the precompile header</span><br>    pchheader <span class="hljs-string">&quot;pch.h&quot;</span><br>    pchsource <span class="hljs-string">&quot;Illusion/src/pch.cpp&quot;</span><br><span class="hljs-comment">-- Define files that would be compiled</span><br>    files<br>    &#123;<br>        <span class="hljs-string">&quot;%&#123;prj.name&#125;/src/**.h&quot;</span>,<br>        <span class="hljs-string">&quot;%&#123;prj.name&#125;/src/**.cpp&quot;</span>,<br>        <span class="hljs-string">&quot;%&#123;prj.name&#125;/Lib/stb_image/**.h&quot;</span>,<br>        <span class="hljs-string">&quot;%&#123;prj.name&#125;/Lib/stb_image/**.cpp&quot;</span>,<br>        <span class="hljs-string">&quot;%&#123;prj.name&#125;/Lib/glm/glm/**.hpp&quot;</span>,<br>        <span class="hljs-string">&quot;%&#123;prj.name&#125;/Lib/glm/glm/**.inl&quot;</span>,<br>    &#125;<br><span class="hljs-comment">-- Preprocess macros</span><br>    defines<br>    &#123;<br>        <span class="hljs-string">&quot;_CRT_SECURE_NO_WARNINGS&quot;</span><br>    &#125;<br><span class="hljs-comment">-- Define include path</span><br>    includedirs<br>    &#123;<br>        <span class="hljs-string">&quot;%&#123;prj.name&#125;/src&quot;</span>,<br>        <span class="hljs-string">&quot;%&#123;prj.name&#125;/Lib/spdlog/include&quot;</span>,<br>        <span class="hljs-string">&quot;%&#123;IncludeDir.GLFW&#125;&quot;</span>,<br>        <span class="hljs-string">&quot;%&#123;IncludeDir.Glad&#125;&quot;</span>,<br>        <span class="hljs-string">&quot;%&#123;IncludeDir.ImGui&#125;&quot;</span>,<br>        <span class="hljs-string">&quot;%&#123;IncludeDir.glm&#125;&quot;</span>,<br>        <span class="hljs-string">&quot;%&#123;IncludeDir.stb_image&#125;&quot;</span><br>    &#125;<br><span class="hljs-comment">-- Link these libraries to the project</span><br>    links <br>    &#123; <br>        <span class="hljs-string">&quot;GLFW&quot;</span>,<br>        <span class="hljs-string">&quot;Glad&quot;</span>,<br>        <span class="hljs-string">&quot;ImGui&quot;</span>,<br>        <span class="hljs-string">&quot;opengl32.lib&quot;</span><br>    &#125;<br><span class="hljs-comment">-- Define some macros for different build options</span><br>    filter <span class="hljs-string">&quot;system:windows&quot;</span><br>        systemversion <span class="hljs-string">&quot;latest&quot;</span><br><br>        defines<br>        &#123;<br>            <span class="hljs-string">&quot;ILLUSION_PLATFORM_WINDOWS&quot;</span>,<br>            <span class="hljs-string">&quot;GLFW_INCLUDE_NONE&quot;</span><br>        &#125;<br><br>    filter <span class="hljs-string">&quot;configurations:Debug&quot;</span><br>        defines <span class="hljs-string">&quot;ILLUSION_DEBUG&quot;</span><br>        runtime <span class="hljs-string">&quot;Debug&quot;</span><br>        symbols <span class="hljs-string">&quot;on&quot;</span><br><br>    filter <span class="hljs-string">&quot;configurations:Release&quot;</span><br>        defines <span class="hljs-string">&quot;ILLUSION_RELEASE&quot;</span><br>        runtime <span class="hljs-string">&quot;Release&quot;</span><br>        optimize <span class="hljs-string">&quot;on&quot;</span><br><br>    filter <span class="hljs-string">&quot;configurations:Dist&quot;</span><br>        defines <span class="hljs-string">&quot;ILLUSION_DIST&quot;</span><br>        runtime <span class="hljs-string">&quot;Release&quot;</span><br>        optimize <span class="hljs-string">&quot;on&quot;</span><br><span class="hljs-comment">-- Define Game Project</span><br>project <span class="hljs-string">&quot;Game&quot;</span><br>    location <span class="hljs-string">&quot;Game&quot;</span><br>    kind <span class="hljs-string">&quot;ConsoleApp&quot;</span><br>    language <span class="hljs-string">&quot;C++&quot;</span><br>    cppdialect <span class="hljs-string">&quot;C++17&quot;</span><br>    staticruntime <span class="hljs-string">&quot;on&quot;</span><br><span class="hljs-comment">-- Set the output path and intermediate path</span><br>    targetdir (<span class="hljs-string">&quot;bin/&quot;</span> .. outputdir .. <span class="hljs-string">&quot;/%&#123;prj.name&#125;&quot;</span>)<br>    objdir (<span class="hljs-string">&quot;bin-int/&quot;</span> .. outputdir .. <span class="hljs-string">&quot;/%&#123;prj.name&#125;&quot;</span>)<br><span class="hljs-comment">-- Define files that would be compiled</span><br>    files<br>    &#123;<br>        <span class="hljs-string">&quot;%&#123;prj.name&#125;/src/**.h&quot;</span>,<br>        <span class="hljs-string">&quot;%&#123;prj.name&#125;/src/**.cpp&quot;</span><br>    &#125;<br><span class="hljs-comment">-- Define include path</span><br>    includedirs<br>    &#123;<br>        <span class="hljs-string">&quot;Illusion/Lib/spdlog/include&quot;</span>,<br>        <span class="hljs-string">&quot;Illusion/src&quot;</span>,<br>        <span class="hljs-string">&quot;Illusion/Lib&quot;</span>,<br>        <span class="hljs-string">&quot;%&#123;IncludeDir.glm&#125;&quot;</span><br>    &#125;<br><span class="hljs-comment">-- Link the engine to the project</span><br>    links<br>    &#123;<br>        <span class="hljs-string">&quot;Illusion&quot;</span><br>    &#125;<br><span class="hljs-comment">-- Define some macros for different build options</span><br>    filter <span class="hljs-string">&quot;system:windows&quot;</span><br>        systemversion <span class="hljs-string">&quot;latest&quot;</span><br><br>        defines<br>        &#123;<br>            <span class="hljs-string">&quot;ILLUSION_PLATFORM_WINDOWS&quot;</span><br>        &#125;<br><br>    filter <span class="hljs-string">&quot;configurations:Debug&quot;</span><br>        defines <span class="hljs-string">&quot;ILLUSION_DEBUG&quot;</span><br>        runtime <span class="hljs-string">&quot;Debug&quot;</span><br>        symbols <span class="hljs-string">&quot;on&quot;</span><br><br>    filter <span class="hljs-string">&quot;configurations:Release&quot;</span><br>        defines <span class="hljs-string">&quot;ILLUSION_RELEASE&quot;</span><br>        runtime <span class="hljs-string">&quot;Release&quot;</span><br>        optimize <span class="hljs-string">&quot;on&quot;</span><br><br>    filter <span class="hljs-string">&quot;configurations:Dist&quot;</span><br>        defines <span class="hljs-string">&quot;ILLUSION_DIST&quot;</span><br>        runtime <span class="hljs-string">&quot;Release&quot;</span><br>        optimize <span class="hljs-string">&quot;on&quot;</span><br></code></pre></td></tr></table></figure><p>Additionally, since we have to build those third-party libraries, they also need their configuration files.</p><p>Inside Collection&#x2F;Illusion&#x2F;Lib&#x2F;GLFW&#x2F;… folder, create a file called “premake.lua”, and enter code:</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs lua">project <span class="hljs-string">&quot;GLFW&quot;</span><br>    kind <span class="hljs-string">&quot;StaticLib&quot;</span><br>    language <span class="hljs-string">&quot;C&quot;</span><br>    targetdir (<span class="hljs-string">&quot;bin/&quot;</span> .. outputdir .. <span class="hljs-string">&quot;/%&#123;prj.name&#125;&quot;</span>)<br>    objdir (<span class="hljs-string">&quot;bin-int/&quot;</span> .. outputdir .. <span class="hljs-string">&quot;/%&#123;prj.name&#125;&quot;</span>)<br>    files<br>    &#123;<br>        <span class="hljs-string">&quot;include/GLFW/glfw3.h&quot;</span>,<br>        <span class="hljs-string">&quot;include/GLFW/glfw3native.h&quot;</span>,<br>        <span class="hljs-string">&quot;src/glfw_config.h&quot;</span>,<br>        <span class="hljs-string">&quot;src/context.c&quot;</span>,<br>        <span class="hljs-string">&quot;src/init.c&quot;</span>,<br>        <span class="hljs-string">&quot;src/input.c&quot;</span>,<br>        <span class="hljs-string">&quot;src/monitor.c&quot;</span>,<br>        <span class="hljs-string">&quot;src/vulkan.c&quot;</span>,<br>        <span class="hljs-string">&quot;src/window.c&quot;</span><br>    &#125;<br>    filter <span class="hljs-string">&quot;system:windows&quot;</span><br>        systemversion <span class="hljs-string">&quot;latest&quot;</span><br>        staticruntime <span class="hljs-string">&quot;on&quot;</span><br>        files<br>        &#123;<br>            <span class="hljs-string">&quot;src/win32_init.c&quot;</span>,<br>            <span class="hljs-string">&quot;src/win32_joystick.c&quot;</span>,<br>            <span class="hljs-string">&quot;src/win32_monitor.c&quot;</span>,<br>            <span class="hljs-string">&quot;src/win32_time.c&quot;</span>,<br>            <span class="hljs-string">&quot;src/win32_thread.c&quot;</span>,<br>            <span class="hljs-string">&quot;src/win32_window.c&quot;</span>,<br>            <span class="hljs-string">&quot;src/wgl_context.c&quot;</span>,<br>            <span class="hljs-string">&quot;src/egl_context.c&quot;</span>,<br>            <span class="hljs-string">&quot;src/osmesa_context.c&quot;</span><br>        &#125;<br>        defines <br>        &#123; <br>            <span class="hljs-string">&quot;_GLFW_WIN32&quot;</span>,<br>            <span class="hljs-string">&quot;_CRT_SECURE_NO_WARNINGS&quot;</span><br>        &#125;<br>    filter &#123; <span class="hljs-string">&quot;system:windows&quot;</span>, <span class="hljs-string">&quot;configurations:Release&quot;</span> &#125;<br>        buildoptions <span class="hljs-string">&quot;/MT&quot;</span><br></code></pre></td></tr></table></figure><p>Inside Collection&#x2F;Illusion&#x2F;Lib&#x2F;Glad&#x2F;… folder, create a file called “premake.lua”, and enter the code:</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs lua">project <span class="hljs-string">&quot;Glad&quot;</span><br>    kind <span class="hljs-string">&quot;StaticLib&quot;</span><br>    language <span class="hljs-string">&quot;C&quot;</span><br>    staticruntime <span class="hljs-string">&quot;on&quot;</span><br>    targetdir (<span class="hljs-string">&quot;bin/&quot;</span> .. outputdir .. <span class="hljs-string">&quot;/%&#123;prj.name&#125;&quot;</span>)<br>    objdir (<span class="hljs-string">&quot;bin-int/&quot;</span> .. outputdir .. <span class="hljs-string">&quot;/%&#123;prj.name&#125;&quot;</span>)<br>    files<br>    &#123;<br>        <span class="hljs-string">&quot;include/glad/glad.h&quot;</span>,<br>        <span class="hljs-string">&quot;include/KHR/khrplatform.h&quot;</span>,<br>        <span class="hljs-string">&quot;src/glad.c&quot;</span><br>    &#125;<br>    includedirs<br>    &#123;<br>        <span class="hljs-string">&quot;include&quot;</span><br>    &#125;<br>    filter <span class="hljs-string">&quot;system:windows&quot;</span><br>        systemversion <span class="hljs-string">&quot;latest&quot;</span><br>    filter <span class="hljs-string">&quot;configurations:Debug&quot;</span><br>        runtime <span class="hljs-string">&quot;Debug&quot;</span><br>        symbols <span class="hljs-string">&quot;on&quot;</span><br>    filter <span class="hljs-string">&quot;configurations:Release&quot;</span><br>        runtime <span class="hljs-string">&quot;Release&quot;</span><br>        optimize <span class="hljs-string">&quot;on&quot;</span><br></code></pre></td></tr></table></figure><p>Inside Collection&#x2F;Illusion&#x2F;Lib&#x2F;ImGui&#x2F;… folder, create a file called “premake.lua”, and enter code:</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs lua">project <span class="hljs-string">&quot;ImGui&quot;</span><br>    kind <span class="hljs-string">&quot;StaticLib&quot;</span><br>    language <span class="hljs-string">&quot;C++&quot;</span><br>    cppdialect <span class="hljs-string">&quot;C++17&quot;</span><br>    targetdir (<span class="hljs-string">&quot;bin/&quot;</span> .. outputdir .. <span class="hljs-string">&quot;/%&#123;prj.name&#125;&quot;</span>)<br>    objdir (<span class="hljs-string">&quot;bin-int/&quot;</span> .. outputdir .. <span class="hljs-string">&quot;/%&#123;prj.name&#125;&quot;</span>)<br>    files<br>    &#123;<br>        <span class="hljs-string">&quot;imconfig.h&quot;</span>,<br>        <span class="hljs-string">&quot;imgui.h&quot;</span>,<br>        <span class="hljs-string">&quot;imgui.cpp&quot;</span>,<br>        <span class="hljs-string">&quot;imgui_draw.cpp&quot;</span>,<br>        <span class="hljs-string">&quot;imgui_internal.h&quot;</span>,<br>        <span class="hljs-string">&quot;imgui_widgets.cpp&quot;</span>,<br>        <span class="hljs-string">&quot;imstb_rectpack.h&quot;</span>,<br>        <span class="hljs-string">&quot;imstb_textedit.h&quot;</span>,<br>        <span class="hljs-string">&quot;imstb_truetype.h&quot;</span>,<br>        <span class="hljs-string">&quot;imgui_demo.cpp&quot;</span><br>    &#125;<br>    filter <span class="hljs-string">&quot;system:windows&quot;</span><br>        systemversion <span class="hljs-string">&quot;latest&quot;</span><br>        staticruntime <span class="hljs-string">&quot;on&quot;</span><br>    filter &#123; <span class="hljs-string">&quot;system:windows&quot;</span>, <span class="hljs-string">&quot;configurations:Release&quot;</span> &#125;<br>        buildoptions <span class="hljs-string">&quot;/MT&quot;</span><br></code></pre></td></tr></table></figure><p>After this, the configuration information for the whole project is recorded. To build the project, we only have to call premake5 and tell it the toolset that we are using:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">&gt; Lib/Premake5/Premake5.exe vs2022<br></code></pre></td></tr></table></figure><p>To simplify this procedure, we need a bat file inside Collection&#x2F;Scripts&#x2F;… folder.</p><p>Inside Build.bat, enter the code:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash">@<span class="hljs-built_in">echo</span> off<br><span class="hljs-built_in">pushd</span> C:<br><span class="hljs-built_in">cd</span> Program Files (x86)\Microsoft Visual Studio\Installer<br><span class="hljs-keyword">for</span> /f <span class="hljs-string">&quot;delims=&quot;</span> %%t <span class="hljs-keyword">in</span> (<span class="hljs-string">&#x27;vswhere.exe -property catalog_productLineVersion&#x27;</span>) <span class="hljs-keyword">do</span> <span class="hljs-built_in">set</span> version=%%t<br><span class="hljs-built_in">popd</span><br><span class="hljs-built_in">cd</span> ..\<br>call Lib\premake5\Premake5.exe vs%version%<br>PAUSE<br></code></pre></td></tr></table></figure><p>This file would figure out the version of visual studio installed on this device and pass it to premake to generate the correct version of project files such as .vs, .sln, .vcproj, etc.</p><p>Inside Clear.bat, enter the code:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> ..\<br>rd /s /q .vs<br>rd /s /q bin<br>rd /s /q bin-int<br>del /a Project.sln<br>del /a /s *.vcxproj.*<br><span class="hljs-built_in">pushd</span> Illusion\Lib\Glad<br>rd /s /q bin<br>rd /s /q bin-int<br><span class="hljs-built_in">popd</span><br><span class="hljs-built_in">pushd</span> Illusion\Lib\GLFW<br>rd /s /q bin<br>rd /s /q bin-int<br><span class="hljs-built_in">popd</span><br><span class="hljs-built_in">pushd</span> Illusion\Lib\imgui<br>rd /s /q bin<br>rd /s /q bin-int<br><span class="hljs-built_in">popd</span><br>PAUSE<br></code></pre></td></tr></table></figure><p>This file would delete all the project files, including .vs, .sln, .vcproj, etc. Only source code would be left. It is a tool that helps us clean up the project and save space.</p><p>Thus, by running Build.bat and Clear.bat, we could easily generate or clean up the project.</p><img src="/Preparation/Build.png" class="" title="Build.bat Running Result"><img src="/Preparation/Clear.png" class="" title="Clear.bat Running Result"><h2 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h2><p>So far, we have completed the configuration of the entire project. We stored the configuration information in premake.lua, and handed over the creation and cleaning of the project to the batch files to complete. By doing so, we don’t have to configure the project and struggle with the linkclude problem over and over again.</p>]]></content>
    
    
    <categories>
      
      <category>Game Engine</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Original</tag>
      
      <tag>C++</tag>
      
      <tag>Game Development</tag>
      
      <tag>Computer Graphics</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hex Converter</title>
    <link href="/HexConverter/"/>
    <url>/HexConverter/</url>
    
    <content type="html"><![CDATA[<h2 id="Background"><a href="#Background" class="headerlink" title="Background"></a>Background</h2><p>When I use OpenGL to develop a game engine and write a renderer for it, I often encounter the need to write an independent shader file and store the glsl code in a <strong>text file</strong>.</p><p>However, the file in text format is <strong>slow to read</strong>, and the file size is <strong>relatively large</strong> (even after zip compression), and at the same time, to encapsulate the shader and hide it from the engine user, I need to design a binary file format myself, and write an unique IO system for it.</p><p>In this context, the conversion between binary and decimal is particularly important. To understand the conversion between bases, I tried to use the least code to write a converter.</p><hr><h2 id="Implementation"><a href="#Implementation" class="headerlink" title="Implementation"></a>Implementation</h2><p>The main idea is to <em>first convert the input number to a <strong>decimal number</strong></em>. And then, convert the decimal number into the desired number.</p><p>The implementation looks like this:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-type">void</span> <span class="hljs-title function_">HexConverter</span><span class="hljs-params">(<span class="hljs-type">char</span>* in, <span class="hljs-type">int</span> s_in, <span class="hljs-type">char</span>* out, <span class="hljs-type">int</span> s_out)</span><br>&#123;<br>    <span class="hljs-type">int</span> v = <span class="hljs-number">0</span>, n;<br>    <span class="hljs-comment">// Convert the input into a decimal number</span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">char</span>* p = in; *p; p++)<br>        v = v * s_in + (*p - (( *p &gt;= <span class="hljs-string">&#x27;a&#x27;</span> ) ? (<span class="hljs-string">&#x27;a&#x27;</span> - <span class="hljs-number">10</span>) : <span class="hljs-string">&#x27;0&#x27;</span>));<br>    <span class="hljs-comment">// Convert the decimal number to s_out based number</span><br>    <span class="hljs-keyword">for</span>(n = <span class="hljs-number">31</span>; v &amp;&amp; n; v = v / s_out)<br>        out[n--] = (((v % s_out) &lt; <span class="hljs-number">10</span>) ? <span class="hljs-string">&#x27;0&#x27;</span> : (<span class="hljs-string">&#x27;a&#x27;</span> - <span class="hljs-number">10</span>)) + (v % s_out);<br>    <span class="hljs-comment">// Copy the answer to the output array</span><br>    memmove(out, out + n + <span class="hljs-number">1</span>, <span class="hljs-number">32</span> - n - <span class="hljs-number">1</span>);<br>    <span class="hljs-comment">// Cut the output array</span><br>    out[<span class="hljs-number">32</span> - n - <span class="hljs-number">1</span>] = <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>The converter falls into two parts:</p><ol><li>First part</li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-comment">// Convert the input into a decimal number</span><br><span class="hljs-keyword">for</span>(<span class="hljs-type">char</span>* p = in; *p; p++)<br>    v = v * s_in + (*p - (( *p &gt;= <span class="hljs-string">&#x27;a&#x27;</span> ) ? (<span class="hljs-string">&#x27;a&#x27;</span> - <span class="hljs-number">10</span>) : <span class="hljs-string">&#x27;0&#x27;</span>));<br></code></pre></td></tr></table></figure><ul><li>The first for-loop is used to convert the input into a decimal number.<ul><li>*p represents the number on each digit of the input number.</li><li>Use *p as the condition statement, so that the loop won’t stop until p points to ‘\0’ which equals false and also represents the end of the array.</li></ul></li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs C">v = v * s_in + (*p - (( *p &gt;= <span class="hljs-string">&#x27;a&#x27;</span> ) ? (<span class="hljs-string">&#x27;a&#x27;</span> - <span class="hljs-number">10</span>) : <span class="hljs-string">&#x27;0&#x27;</span>));<br></code></pre></td></tr></table></figure><ul><li>This line is where the math gets in.<ul><li>(( *p &gt;&#x3D; ‘a’ ) ? (‘a’ - 10) : ‘0’) figures out whether the digit is a character.<ul><li>If it is, this part would return <strong>‘a’ - 10</strong>. Then the right part of this code would turn into *p - ‘a’ + 10.</li><li>If it isn’t, this part would return <strong>‘0’</strong>. Then the right part of this code would turn into *p - ‘0’.</li><li>By doing so, the digit is converted to a decimal number. (0123456789abcdef is the sequence of the digits)</li></ul></li><li>This line could be simplified as: <em><strong>v &#x3D; v * s_in + decimal format of current digit</strong></em>.<ul><li>After the iteration, this line endd up like: <em><strong>v &#x3D; (…((v * s + d) * s + d) * s + d) * s … + d</strong></em>.</li><li>s_ins in each layer are cumulative, they would add up and become <em><strong>$\sum_{i&#x3D;1}^{n} v_is^{n+1-i}$</strong></em>. And this is exactly the representation of an s-based number in decimal.</li></ul></li></ul></li></ul><ol start="2"><li>Second Part</li></ol><ul><li>The algorithm follows the steps listed below:<ol><li>Divide the decimal number by s_out.</li><li>Write down the remainder (<strong>in the desired base</strong>).</li><li>Divide the result again by s_out.</li><li>Repeat steps 2 and 3 until the result is 0.</li><li>The result is the digit sequence of the remainder <strong>from the last to the first</strong>.</li></ol></li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-comment">// Convert the decimal number to s_out based number</span><br><span class="hljs-keyword">for</span>(n = <span class="hljs-number">31</span>; v &amp;&amp; n; v = v / s_out)<br>    out[n--] = (((v % s_out) &lt; <span class="hljs-number">10</span>) ? <span class="hljs-string">&#x27;0&#x27;</span> : (<span class="hljs-string">&#x27;a&#x27;</span> - <span class="hljs-number">10</span>)) + (v % s_out);<br></code></pre></td></tr></table></figure><ul><li>The second for-loop is used to convert the decimal number into the desired base.<ul><li>n is the iteration index. Since the <strong>upper bound of int is $2^{32}$</strong>, the output array cannot be longer than 32. (index range: 0-31)</li><li>v &amp;&amp; n make sure the converter won’t convert numbers bigger than $2^{32}$. n would be out of range if the input is bigger than $2^{32}$.</li><li>v &#x3D; v &#x2F; s_out represents step 1</li></ul></li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs C">out[n--] = (((v % s_out) &lt; <span class="hljs-number">10</span>) ? <span class="hljs-string">&#x27;0&#x27;</span> : (<span class="hljs-string">&#x27;a&#x27;</span> - <span class="hljs-number">10</span>)) + (v % s_out);<br></code></pre></td></tr></table></figure><ul><li>n– represents “digit sequence from the last to first”.</li><li>v % s_out is the remainder, &lt; 10 checks whether it would be a character.<ul><li>If it would, returns ‘a’ - 10 and add it with the reminder to convert it.</li><li>If it won’t, returns ‘0’ and add it with the reminder so the number will not change, only <em><strong>the type would become char</strong></em>.</li></ul></li></ul><hr><h2 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h2><p>This converter works for all base-conversion between binary, octal decimal, and hexadecimal numbers.</p><p>Test Code:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-type">char</span> out[<span class="hljs-number">33</span>];<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> s = <span class="hljs-number">2</span>; s &lt; <span class="hljs-number">36</span>; s++)<br>    &#123;<br>        HexConverter(<span class="hljs-string">&quot;abc123&quot;</span>, <span class="hljs-number">16</span>, out, s);<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;16:abc123 =&gt; %2d:%s\n&quot;</span>, s, out);<br>    &#125;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> s = <span class="hljs-number">2</span>; s &lt; <span class="hljs-number">36</span>; s++)<br>    &#123;<br>        HexConverter(<span class="hljs-string">&quot;114514&quot;</span>, <span class="hljs-number">10</span>, out, s);<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;10:114514 =&gt; %2d:%s\n&quot;</span>, s, out);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>Test Result:</p><img src="/HexConverter/Result1.png" class="" title="Test Results"><img src="/HexConverter/Result2.png" class="" title="Test Results">]]></content>
    
    
    <categories>
      
      <category>C/C++ Notes</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C</tag>
      
      <tag>Skill</tag>
      
      <tag>Algorithm</tag>
      
      <tag>Math</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
