<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Houdini Note 01 - Introduction</title>
    <link href="/HoudiniNote-1/"/>
    <url>/HoudiniNote-1/</url>
    
    <content type="html"><![CDATA[<h2 id="Hotkeys"><a href="#Hotkeys" class="headerlink" title="Hotkeys"></a>Hotkeys</h2><ol><li>Camera Movement: Alt + Mouse<ol><li>Alt + LeftMouseButton &#x3D; Rotation of Camera</li><li>Alt + RightMouseButton &#x3D; Zoom In and Out</li><li>Alt + MiddleMouseButton &#x3D; Translation of Camera</li></ol></li><li>Move Object to an appropriate view position: Space + G</li><li>Disconnect Lines in the Network Editor:<ol><li>Y + LeftMouseButton</li><li>RightMouseButton and select “Disconnect”</li><li>LeftMouseButton + Del</li></ol></li></ol>]]></content>
    
    
    <categories>
      
      <category>Houdini Notes</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Original</tag>
      
      <tag>Houdini</tag>
      
      <tag>VFX</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>The Quest for Tranquility and Satisfaction - Reflecting on Thoreau</title>
    <link href="/WaldenReflect/"/>
    <url>/WaldenReflect/</url>
    
    <content type="html"><![CDATA[<h2 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h2><p>Today I’ve been reflecting on the pursuit of happiness and what truly brings contentment in life. So often, we are led to believe that material success and financial wealth are the keys to a well-lived life, but I’ve come to realize that this simply isn’t the case. But, as I was sitting by the desk today, reflecting on the meaning of life and what truly brings happiness, I was reminded of the wisdom I’ve gleaned from my reading of Thoreau’s “Walden.” I believe that there is much that can be learned from the philosopher’s simple, yet powerful ideas, so I thought I would take a moment to share my thoughts.</p><h2 id="The-Power-of-Minimalism"><a href="#The-Power-of-Minimalism" class="headerlink" title="The Power of Minimalism"></a>The Power of Minimalism</h2><p>As Thoreau once wrote, “Simplify, simplify, simplify.” This idea has much to teach us about the power of minimalism in our lives. By reducing our material possessions and focusing on what truly brings joy, we can break free from the chains of consumerism and the societal pressure to accumulate wealth. Instead, we can embrace the idea of having “enough,” and concentrate on what truly brings happiness and fulfillment.</p><h2 id="The-Tranquility-of-Nature"><a href="#The-Tranquility-of-Nature" class="headerlink" title="The Tranquility of Nature"></a>The Tranquility of Nature</h2><p>In our modern world, life has become increasingly fast-paced and hectic. The idea of retreating to a remote location, such as Walden Pond, and living in harmony with nature becomes more appealing by the day. Thoreau discovered the tranquility and majesty of the natural world and how it has the power to soothe the soul and bring us closer to our true selves.</p><h2 id="Solitude-and-Personal-Growth"><a href="#Solitude-and-Personal-Growth" class="headerlink" title="Solitude and Personal Growth"></a>Solitude and Personal Growth</h2><p>But, there is a risk of feeling lonely or isolated when retreating to a simpler life. However, Thoreau and other thinkers have discovered that solitude can also provide the space necessary for self-reflection and personal growth. By embracing the idea of being comfortable in our own company, we can strengthen our sense of self and cultivate a deeper understanding of our place in the world.</p><h2 id="The-Importance-of-Purpose-and-Meaning"><a href="#The-Importance-of-Purpose-and-Meaning" class="headerlink" title="The Importance of Purpose and Meaning"></a>The Importance of Purpose and Meaning</h2><p>Ultimately, the most critical aspect of life is to lead a life of purpose and meaning. Whether we choose to simplify our lives and retreat to a remote location or find fulfillment in other ways, it is crucial to concentrate on what is most important and to pursue our passions and aspirations. Thoreau’s experiences at Walden serve as a testament to the idea that having a sense of purpose gives our lives direction and helps us to lead a meaningful existence.</p><h2 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h2><p>In conclusion, the wisdom found in Thoreau’s “Walden” serves as a reminder that happiness and contentment are not to be found in material wealth or societal success, but in simplifying our lives and focusing on what truly matters. By embracing the power of minimalism, the beauty of nature, and the importance of purpose, we can lead lives that are rich in meaning and fulfillment.</p>]]></content>
    
    
    <categories>
      
      <category>Reflections</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Original</tag>
      
      <tag>Idea</tag>
      
      <tag>Reading</tag>
      
      <tag>Thoreau</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Illusion Engine 07 - ImGui</title>
    <link href="/ImGui/"/>
    <url>/ImGui/</url>
    
    <content type="html"><![CDATA[<h2 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h2><p>Game engine editors play a crucial role in the development of video games. They provide a graphical user interface for game developers to <strong>create and manipulate game assets</strong>, such as characters, levels, and environments, <strong>without having to write code</strong>. The editor acts as a central hub for all of the game’s content and assets, making it easier for developers to collaborate and experiment with different ideas. Additionally, the use of an editor can significantly <strong>speed up the game development process</strong>.</p><p>In order to create an editor in our engine, we choose to use ImGui library to write various windows of the editor. ImGui library has already been included in <em><strong>Illusion&#x2F;Lib&#x2F;imgui…</strong></em> folder and configured in <strong>premake.lua</strong> file. (The configuration of third-party library is in article <a href="https://rigellm.github.io/Preparation/">Preparation</a>)</p><hr><h2 id="Implementation"><a href="#Implementation" class="headerlink" title="Implementation"></a>Implementation</h2><p>Essentially, we want to create an editor interface that <strong>does not logically belong to the content of the gameplay level</strong>, instead it belongs to the debug level, so we want it to be rendered at the end. The <strong>Overlay Layer</strong> mentioned above can just meet this requirement. Therefore, we can first write an ImguiLayer, which is specially used to put Imgui-related rendering logic.</p><p>Before we actually code the ImGuiLayer class, we have to define a macro to enable ImGui. To make the header file clearly, we put the defination of this macro in a single cpp file. Thus, Inside <em><strong>Illusion&#x2F;src&#x2F;Engine&#x2F;ImGui&#x2F;…</strong></em> folder, create a file called <em><strong>ImGuiBuild.cpp</strong></em> and enter:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;pch.h&quot;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> IMGUI_IMPL_OPENGL_LOADER_GLAD</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;examples/imgui_impl_opengl3.cpp&quot;</span></span><br></code></pre></td></tr></table></figure><p>After that, we are supposed to use ImGui library as usual. Inside the same folder, create two files <em><strong>ImGuiLayer.h&#x2F;.cpp</strong></em>, and enter:</p><p>ImGuiLayer.h:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">pragma</span> once</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;Engine/Core/Layer/Layer.h&quot;</span></span><br> <span class="hljs-comment">//--------------------namespace: Illusion starts--------------------</span><br><span class="hljs-keyword">namespace</span> Illusion<br>&#123;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">ImGuiLayer</span> : <span class="hljs-keyword">public</span> Layer<br>&#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-built_in">ImGuiLayer</span>();<br>~<span class="hljs-built_in">ImGuiLayer</span>();<br><br><span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-type">void</span> <span class="hljs-title">OnAttach</span><span class="hljs-params">()</span> <span class="hljs-keyword">override</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-type">void</span> <span class="hljs-title">OnDetach</span><span class="hljs-params">()</span> <span class="hljs-keyword">override</span></span>;<br><br><span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-type">void</span> <span class="hljs-title">OnImGuiRender</span><span class="hljs-params">()</span> <span class="hljs-keyword">override</span></span>;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Begin</span><span class="hljs-params">()</span></span>;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">End</span><span class="hljs-params">()</span></span>;<br>&#125;;<br><span class="hljs-comment">//--------------------namespace: Illusion ends--------------------</span><br>&#125;<br></code></pre></td></tr></table></figure><ul><li>ImGuiLayer is inherited from <strong>Layer</strong> Class so that it could be pushed into the layerstack and be updated and rendered as overlay layers.</li></ul><p>ImGuiLayer.cpp:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;pch.h&quot;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;ImGuiLayer.h&quot;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;imgui.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;examples/imgui_impl_glfw.cpp&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;examples/imgui_impl_opengl3.h&quot;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;Engine/Core/Application/Application.h&quot;</span></span><br><br><span class="hljs-comment">//--------------------namespace: Illusion starts--------------------</span><br><span class="hljs-keyword">namespace</span> Illusion<br>&#123;<br><br>ImGuiLayer::<span class="hljs-built_in">ImGuiLayer</span>()<br>: <span class="hljs-built_in">Layer</span>(<span class="hljs-string">&quot;ImGuiLayer&quot;</span>)<br>&#123; &#125;<br><br>ImGuiLayer::~<span class="hljs-built_in">ImGuiLayer</span>() &#123; &#125;<br><br><span class="hljs-comment">// Call when it is put into the layerstack</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">ImGuiLayer::OnAttach</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-comment">//Set up the ImGui context</span><br><span class="hljs-built_in">IMGUI_CHECKVERSION</span>();<br>ImGui::<span class="hljs-built_in">CreateContext</span>();<br>ImGuiIO&amp; io = ImGui::<span class="hljs-built_in">GetIO</span>(); (<span class="hljs-type">void</span>)io;<br><span class="hljs-comment">// Enable keyboard controls</span><br>io.ConfigFlags |= ImGuiConfigFlags_NavEnableKeyboard;<br><span class="hljs-comment">// Enable docking</span><br>io.ConfigFlags |= ImGuiConfigFlags_DockingEnable;<br><span class="hljs-comment">// Enable Multi_Viewports</span><br>io.ConfigFlags |= ImGuiConfigFlags_ViewportsEnable;<br><br><span class="hljs-comment">// Set up ImGui Style</span><br>ImGui::<span class="hljs-built_in">StyleColorsLight</span>();<br><span class="hljs-comment">//ImGui::StyleColorsDark();</span><br><br><span class="hljs-comment">// When viewports are enabled, tweak WindowRounding/WindowBg so platform windows can look identical to regular ones.</span><br>ImGuiStyle&amp; style = ImGui::<span class="hljs-built_in">GetStyle</span>();<br><span class="hljs-keyword">if</span> (io.ConfigFlags &amp; ImGuiConfigFlags_ViewportsEnable)<br>&#123;<br>style.WindowRounding = <span class="hljs-number">0.0f</span>;<br>style.Colors[ImGuiCol_WindowBg].w = <span class="hljs-number">1.0f</span>;<br>&#125;<br><br><span class="hljs-comment">// Setup Platform/Renderer bindings</span><br>Application&amp; app = Application::<span class="hljs-built_in">Get</span>();<br>GLFWwindow* window = <span class="hljs-built_in">static_cast</span>&lt;GLFWwindow*&gt;(app.<span class="hljs-built_in">GetWindow</span>().<span class="hljs-built_in">GetNativeWindow</span>());<br><br><span class="hljs-comment">// Initialize the implementation of OpenGL3</span><br><span class="hljs-built_in">ImGui_ImplGlfw_InitForOpenGL</span>(window, <span class="hljs-literal">true</span>);<br><span class="hljs-built_in">ImGui_ImplOpenGL3_Init</span>(<span class="hljs-string">&quot;#version 410&quot;</span>);<br>&#125;<br><br><span class="hljs-comment">// Call when it is taken from the layerstack</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">ImGuiLayer::OnDetach</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-built_in">ImGui_ImplOpenGL3_Shutdown</span>();<br><span class="hljs-built_in">ImGui_ImplGlfw_Shutdown</span>();<br>ImGui::<span class="hljs-built_in">DestroyContext</span>();<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">ImGuiLayer::Begin</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-built_in">ImGui_ImplOpenGL3_NewFrame</span>();<br><span class="hljs-built_in">ImGui_ImplGlfw_NewFrame</span>();<br>ImGui::<span class="hljs-built_in">NewFrame</span>();<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">ImGuiLayer::End</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>ImGuiIO&amp; io = ImGui::<span class="hljs-built_in">GetIO</span>();<br>Application&amp; app = Application::<span class="hljs-built_in">Get</span>();<br>io.DisplaySize = <span class="hljs-built_in">ImVec2</span>((<span class="hljs-type">float</span>)app.<span class="hljs-built_in">GetWindow</span>().<span class="hljs-built_in">GetWidth</span>(), (<span class="hljs-type">float</span>)app.<span class="hljs-built_in">GetWindow</span>().<span class="hljs-built_in">GetHeight</span>());<br><br><span class="hljs-comment">// RENDERING</span><br>ImGui::<span class="hljs-built_in">Render</span>();<br><span class="hljs-built_in">ImGui_ImplOpenGL3_RenderDrawData</span>(ImGui::<span class="hljs-built_in">GetDrawData</span>());<br><br><span class="hljs-keyword">if</span> (io.ConfigFlags &amp; ImGuiConfigFlags_ViewportsEnable)<br>&#123;<br>GLFWwindow* backup_current_context = <span class="hljs-built_in">glfwGetCurrentContext</span>();<br>ImGui::<span class="hljs-built_in">UpdatePlatformWindows</span>();<br>ImGui::<span class="hljs-built_in">RenderPlatformWindowsDefault</span>();<br><span class="hljs-built_in">glfwMakeContextCurrent</span>(backup_current_context);<br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">ImGuiLayer::OnImGuiRender</span><span class="hljs-params">()</span> </span>&#123; &#125;<br><span class="hljs-comment">//--------------------namespace: Illusion ends--------------------</span><br>&#125;<br></code></pre></td></tr></table></figure><ul><li><strong>OnAttach()</strong> function basically just sets up the render environment for ImGui.</li><li><strong>Begin()</strong> and <strong>End()</strong> controls the rendering environment for ImGui. We can <strong>submit data</strong> after Begin() and the ImGui windows would be rendered by calling End();</li><li><strong>OnImGuiRender()</strong> is where we <strong>bind and update everything that is related to the editor or debug windows</strong>. It would be called between Begin() and End().<ul><li>OnImGuiRender() exists in every layer. The purpose of that is to make sure all layers are able to <strong>render their own debug window</strong>.</li></ul></li></ul><hr><h2 id="Utilization"><a href="#Utilization" class="headerlink" title="Utilization"></a>Utilization</h2><p>In order to put ImGuiLayer into use, we have to revise our <em><strong>Application</strong></em> class:</p><p>Application.h:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs C++">...<br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;Engine/ImGui/ImGuiLayer.h&quot;</span></span><br>...<br><span class="hljs-comment">//--------------------namespace: Illusion starts--------------------</span><br><span class="hljs-keyword">namespace</span> Illusion<br>&#123;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Application</span><br>&#123;<br>    ...<br><span class="hljs-keyword">private</span>:<br>        ...<br>ImGuiLayer* m_ImGuiLayer;<br>        ...<br>&#125;;<br>...<br><span class="hljs-comment">//--------------------namespace: Illusion ends--------------------</span><br>&#125;<br></code></pre></td></tr></table></figure><ul><li>Here we include the ImGuiLayer class into our engine and then create a <strong>pointer</strong> that stores our ImGuiLayer.</li></ul><p>Application.cpp:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs C++">...<br> <span class="hljs-comment">//--------------------namespace: Illusion starts--------------------</span><br><span class="hljs-keyword">namespace</span> Illusion<br>&#123;<br>    ...<br>    Application::<span class="hljs-built_in">Application</span>()<br>&#123;<br>        ...<br>m_ImGuiLayer = <span class="hljs-keyword">new</span> <span class="hljs-built_in">ImGuiLayer</span>();<br><span class="hljs-built_in">PushOverlay</span>(m_ImGuiLayer);<br>&#125;<br>    ...<br><span class="hljs-comment">//The function where the app actually starts</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Application::Run</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">while</span> (m_Running)<br>&#123;<br>            ...<br><span class="hljs-comment">// Render all ImGui windows</span><br>m_ImGuiLayer-&gt;<span class="hljs-built_in">Begin</span>();<br><span class="hljs-keyword">for</span> (Layer* layer : m_LayerStack)<br>layer-&gt;<span class="hljs-built_in">OnImGuiRender</span>();<br>m_ImGuiLayer-&gt;<span class="hljs-built_in">End</span>();<br>            ...<br>&#125;<br>&#125;<br><span class="hljs-comment">//--------------------namespace: Illusion ends--------------------</span><br>&#125;<br></code></pre></td></tr></table></figure><ul><li>In the <strong>constructor of Application</strong>, we create an instance of ImGuiLayer and push it into the layerstack;</li><li>In <strong>Run()</strong> function, we render all the ImGui related window at once by going throught the layerstack and call <strong>every layers’ OnImGuiRender()</strong> function.</li></ul><hr><h2 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h2><p>For now, we create a class that enables us to build our own editor in the engine. Temporarily, we can add some code in <strong>ImGuiLayer’s OnImGuiRender()</strong> function to see the effect:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">ImGuiLayer::OnImGuiRender</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-type">static</span> <span class="hljs-type">bool</span> show = <span class="hljs-literal">true</span>;<br>ImGui::<span class="hljs-built_in">ShowDemoWindow</span>(&amp;show);<br>&#125;<br></code></pre></td></tr></table></figure><p>By using such code, a demo window that demonstrates all basic features of ImGui would be rendered</p><p><img src="/ImGui/Demo.png" alt="Demo Window"></p>]]></content>
    
    
    <categories>
      
      <category>Game Engine</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Original</tag>
      
      <tag>C++</tag>
      
      <tag>Game Development</tag>
      
      <tag>Computer Graphics</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Illusion Engine 06 - Window</title>
    <link href="/Window/"/>
    <url>/Window/</url>
    
    <content type="html"><![CDATA[<h2 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h2><p>In the last article, we implemented the layer system. So in this article, we will create an actual window in the engine and talk about the role of layer system and event system.</p><hr><h2 id="Dependency"><a href="#Dependency" class="headerlink" title="Dependency"></a>Dependency</h2><p>In order to implement the a window class, we decided to use a library called <strong>GLFW</strong>, which is usually used to create logic related to windows, events, KeyCode, and the like.</p><p>GLFW library has already been included in <em><strong>Illusion&#x2F;Lib&#x2F;GLFW…</strong></em> folder and configured in <strong>premake.lua</strong> file. (The configuration of third-party library is in article <a href="https://rigellm.github.io/Preparation/">Preparation</a>)</p><hr><h2 id="Principle"><a href="#Principle" class="headerlink" title="Principle"></a>Principle</h2><p>The window itself should have the following properties:</p><ul><li>The length and width of itself and the corresponding get() methods;</li><li>The Init() function that set up all the requirement for the window’s rendering;</li><li>The functions about VSync since we want to control the engine’s performance;</li></ul><hr><h2 id="Implementation"><a href="#Implementation" class="headerlink" title="Implementation"></a>Implementation</h2><p>In <em><strong>Illusion&#x2F;src&#x2F;Engine&#x2F;Core&#x2F;Window&#x2F;…</strong></em> folder, create two files: <em><strong>Window.h&#x2F;cpp</strong></em> and enter:</p><h3 id="Window-h"><a href="#Window-h" class="headerlink" title="Window.h"></a>Window.h</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">pragma</span> once</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;Engine/Core/Core.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;Engine/Event/Events.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;GLFW/glfw3.h&gt;</span></span><br> <span class="hljs-comment">//--------------------namespace: Illusion starts--------------------</span><br><span class="hljs-keyword">namespace</span> Illusion<br>&#123;<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">WindowProps</span><br>&#123;<br>std::string Title;<br><span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> Width;<br><span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> Height;<br><span class="hljs-comment">// Constrctor for the struct WindowProps</span><br><span class="hljs-built_in">WindowProps</span>(<span class="hljs-type">const</span> std::string&amp; title = <span class="hljs-string">&quot;Illusion Engine&quot;</span>,<br><span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> width = <span class="hljs-number">1280</span>,<br><span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> height = <span class="hljs-number">720</span>)<br>: <span class="hljs-built_in">Title</span>(title), <span class="hljs-built_in">Width</span>(width), <span class="hljs-built_in">Height</span>(height) &#123;&#125;<br>&#125;;<br><span class="hljs-comment">// Window Class</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Window</span><br>&#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-comment">// Creating a template funtion</span><br><span class="hljs-comment">// Input: Event&amp;</span><br><span class="hljs-comment">// Output: void</span><br><span class="hljs-keyword">using</span> EventCallbackFn = std::function&lt;<span class="hljs-built_in">void</span>(Event&amp;)&gt;;<br><span class="hljs-built_in">Window</span>(<span class="hljs-type">const</span> WindowProps&amp; props = <span class="hljs-built_in">WindowProps</span>());<br>~<span class="hljs-built_in">Window</span>();<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">OnUpdate</span><span class="hljs-params">()</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> <span class="hljs-title">GetWidth</span><span class="hljs-params">()</span> <span class="hljs-type">const</span> </span>&#123; <span class="hljs-keyword">return</span> m_Data.Width; &#125;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> <span class="hljs-title">GetHeight</span><span class="hljs-params">()</span> <span class="hljs-type">const</span> </span>&#123; <span class="hljs-keyword">return</span> m_Data.Height; &#125;<br><span class="hljs-comment">// Set the overall event callback function</span><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">void</span> <span class="hljs-title">SetEventCallback</span><span class="hljs-params">(<span class="hljs-type">const</span> EventCallbackFn&amp; callback)</span> </span>&#123; m_Data.EventCallback = callback; &#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">SetVSync</span><span class="hljs-params">(<span class="hljs-type">bool</span> enabled)</span></span>;<br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">IsSync</span><span class="hljs-params">()</span> <span class="hljs-type">const</span></span>;<br><span class="hljs-comment">// Expose the m_Window</span><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">virtual</span> <span class="hljs-type">void</span>* <span class="hljs-title">GetNativeWindow</span><span class="hljs-params">()</span> <span class="hljs-type">const</span> </span>&#123; <span class="hljs-keyword">return</span> m_Window; &#125;<br><span class="hljs-keyword">private</span>:<br><span class="hljs-comment">// Initialize the window properties</span><br><span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-type">void</span> <span class="hljs-title">Init</span><span class="hljs-params">(<span class="hljs-type">const</span> WindowProps&amp; props)</span></span>;<br><span class="hljs-comment">// Shut the window down</span><br><span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-type">void</span> <span class="hljs-title">Shutdown</span><span class="hljs-params">()</span></span>;<br><span class="hljs-keyword">private</span>:<br>GLFWwindow* m_Window;<br><span class="hljs-comment">// Store all the data that a window maintains</span><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">WindowData</span><br>&#123;<br>std::string Title;<br><span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> Width, Height;<br><span class="hljs-type">bool</span> VSync;<br>EventCallbackFn EventCallback;<br>&#125;;<br>WindowData m_Data;<br>&#125;;<br><span class="hljs-comment">//--------------------namespace: Illusion ends--------------------</span><br>&#125;<br></code></pre></td></tr></table></figure><ul><li><em><strong>WindowProp</strong></em> is a struct that contains basic information of a window. It <strong>simplifies the initialization</strong> of the window;</li><li>The window would have <em><strong>an EventCallback function</strong></em>. It will be bound to a function that processes all kinds of events in Application class. This functon would be called whenever there’s an event triggered.</li><li><em><strong>GetNativeWindow()</strong></em> is a function that expose the glfwwindow pointer to other classes. It would be used in Input Class.</li></ul><h3 id="Window-cpp"><a href="#Window-cpp" class="headerlink" title="Window.cpp"></a>Window.cpp</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;pch.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;Window.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;Engine/Event/AppEvent.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;Engine/Event/MouseEvent.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;Engine/Event/KeyEvent.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;glad/glad.h&gt;</span></span><br> <span class="hljs-comment">//--------------------namespace: Illusion starts--------------------</span><br><span class="hljs-keyword">namespace</span> Illusion<br>&#123;<br><span class="hljs-comment">// Make sure GLFW has been initialized when it is called</span><br><span class="hljs-type">static</span> <span class="hljs-type">bool</span> s_GLFWInitialized = <span class="hljs-literal">false</span>;<br><span class="hljs-comment">// A simple Error processor</span><br><span class="hljs-function"><span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title">GLFWErrorCallback</span><span class="hljs-params">(<span class="hljs-type">int</span> error, <span class="hljs-type">const</span> <span class="hljs-type">char</span>* description)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-built_in">ENGINE_CORE_ERROR</span>(<span class="hljs-string">&quot;GLFW ERROR (&#123;0&#125;): &#123;1&#125;&quot;</span>, error, description);<br>&#125;<br><span class="hljs-comment">//// Create the Window for the program</span><br><span class="hljs-comment">//Window* Window::CreateIllusionWindow(const WindowProps&amp; props)</span><br><span class="hljs-comment">//&#123;</span><br><span class="hljs-comment">//return new Window(props);</span><br><span class="hljs-comment">//&#125;</span><br><span class="hljs-comment">// The constructor of the Window class</span><br><span class="hljs-comment">// Initialize the properties of the window</span><br>Window::<span class="hljs-built_in">Window</span>(<span class="hljs-type">const</span> WindowProps&amp; props)<br>&#123;<br><span class="hljs-built_in">Init</span>(props);<br>&#125;<br><span class="hljs-comment">// The destructor of the Window class</span><br>Window::~<span class="hljs-built_in">Window</span>()<br>&#123;<br><span class="hljs-built_in">Shutdown</span>();<br>&#125;<br><span class="hljs-comment">// Initialization of the properties of the window</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Window::Init</span><span class="hljs-params">(<span class="hljs-type">const</span> WindowProps&amp; props)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-comment">// Unpack the data input</span><br><span class="hljs-comment">// Store all the data that window maintains</span><br>m_Data.Title = props.Title;<br>m_Data.Width = props.Width;<br>m_Data.Height = props.Height;<br><span class="hljs-comment">// Log the data</span><br><span class="hljs-built_in">ENGINE_CORE_INFO</span>(<span class="hljs-string">&quot;Window Created: &#123;0&#125; (&#123;1&#125;,&#123;2&#125;)&quot;</span>, m_Data.Title, m_Data.Width, m_Data.Height);<br><span class="hljs-comment">// Initialize GLFW</span><br><span class="hljs-keyword">if</span> (!s_GLFWInitialized)<br>&#123;<br><span class="hljs-type">int</span> success = <span class="hljs-built_in">glfwInit</span>();<br><span class="hljs-built_in">ILLUSION_CORE_ASSERT</span>(success, <span class="hljs-string">&quot;Could not intialize GLFW!&quot;</span>);<br><span class="hljs-comment">// Set up the error callback function</span><br><span class="hljs-built_in">glfwSetErrorCallback</span>(GLFWErrorCallback);<br>s_GLFWInitialized = <span class="hljs-literal">true</span>;<br>&#125;<br><span class="hljs-comment">// Create the window with the data that the window maintains</span><br>m_Window = <span class="hljs-built_in">glfwCreateWindow</span>((<span class="hljs-type">int</span>)props.Width, (<span class="hljs-type">int</span>)props.Height, m_Data.Title.<span class="hljs-built_in">c_str</span>(), <span class="hljs-literal">nullptr</span>, <span class="hljs-literal">nullptr</span>);<br><span class="hljs-comment">// Set up the graphic context</span><br><span class="hljs-built_in">glfwMakeContextCurrent</span>(m_Window);<br><span class="hljs-comment">// Check if glad has been initialized</span><br><span class="hljs-type">int</span> status = <span class="hljs-built_in">gladLoadGLLoader</span>((GLADloadproc)glfwGetProcAddress);<br><span class="hljs-built_in">ILLUSION_CORE_ASSERT</span>(status, <span class="hljs-string">&quot;Failed to initialize Glad!&quot;</span>);<br><span class="hljs-comment">// Log the OpenGL information to the console</span><br><span class="hljs-built_in">ENGINE_CORE_INFO</span>(<span class="hljs-string">&quot;OpenGL Info:&quot;</span>);<br><span class="hljs-built_in">ENGINE_CORE_INFO</span>(<span class="hljs-string">&quot;  Vendor\t: &#123;0&#125;&quot;</span>, <span class="hljs-built_in">glGetString</span>(GL_VENDOR));<br><span class="hljs-built_in">ENGINE_CORE_INFO</span>(<span class="hljs-string">&quot;  Renderer\t: &#123;0&#125;&quot;</span>, <span class="hljs-built_in">glGetString</span>(GL_RENDERER));<br><span class="hljs-built_in">ENGINE_CORE_INFO</span>(<span class="hljs-string">&quot;  Version\t: &#123;0&#125;&quot;</span>, <span class="hljs-built_in">glGetString</span>(GL_VERSION));<br><span class="hljs-comment">// The user pointer could be used to store whatever you what</span><br><span class="hljs-built_in">glfwSetWindowUserPointer</span>(m_Window, &amp;m_Data);<br><span class="hljs-built_in">SetVSync</span>(<span class="hljs-literal">true</span>);<br><span class="hljs-comment">// Set GLFW callbacks</span><br><span class="hljs-comment">// Use Lambda expressions that generate a callable funtion and set it to be the callback function</span><br><span class="hljs-built_in">glfwSetWindowSizeCallback</span>(m_Window, [](GLFWwindow* window, <span class="hljs-type">int</span> width, <span class="hljs-type">int</span> height)<br>&#123;<br><span class="hljs-comment">// Retrieve the data that we stored in the user pointer</span><br>WindowData&amp; data = *(WindowData*)<span class="hljs-built_in">glfwGetWindowUserPointer</span>(window);<br><span class="hljs-comment">// Store the change</span><br>data.Width = width;<br>data.Height = height;<br>WindowResizeEvent <span class="hljs-built_in">event</span>(width, height);<br>data.<span class="hljs-built_in">EventCallback</span>(event);<br>&#125;);<br><span class="hljs-built_in">glfwSetWindowCloseCallback</span>(m_Window, [](GLFWwindow* window)<br>&#123;<br>WindowData&amp; data = *(WindowData*)<span class="hljs-built_in">glfwGetWindowUserPointer</span>(window);<br>WindowCloseEvent event;<br>data.<span class="hljs-built_in">EventCallback</span>(event);<br>&#125;);<br><span class="hljs-built_in">glfwSetKeyCallback</span>(m_Window, [](GLFWwindow* window, <span class="hljs-type">int</span> key, <span class="hljs-type">int</span> scancode, <span class="hljs-type">int</span> action, <span class="hljs-type">int</span> mods)<br>&#123;<br>WindowData&amp; data = *(WindowData*)<span class="hljs-built_in">glfwGetWindowUserPointer</span>(window);<br><span class="hljs-keyword">switch</span> (action)<br>&#123;<br><span class="hljs-keyword">case</span> GLFW_PRESS:<br>&#123;<br>KeyPressedEvent <span class="hljs-built_in">event</span>(key, <span class="hljs-number">0</span>);<br>data.<span class="hljs-built_in">EventCallback</span>(event);<br><span class="hljs-keyword">break</span>;<br>&#125;<br><span class="hljs-keyword">case</span>  GLFW_RELEASE:<br>&#123;<br>KeyReleasedEvent <span class="hljs-built_in">event</span>(key);<br>data.<span class="hljs-built_in">EventCallback</span>(event);<br><span class="hljs-keyword">break</span>;<br>&#125;<br><span class="hljs-keyword">case</span> GLFW_REPEAT:<br>&#123;<br>KeyPressedEvent <span class="hljs-built_in">event</span>(key, <span class="hljs-number">1</span>);<br>data.<span class="hljs-built_in">EventCallback</span>(event);<br><span class="hljs-keyword">break</span>;<br>&#125;<br>&#125;<br>&#125;);<br><span class="hljs-built_in">glfwSetCharCallback</span>(m_Window, [](GLFWwindow* window, <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> keycode)<br>&#123;<br>WindowData&amp; data = *(WindowData*)<span class="hljs-built_in">glfwGetWindowUserPointer</span>(window);<br>KeyTypedEvent <span class="hljs-built_in">event</span>(keycode);<br>data.<span class="hljs-built_in">EventCallback</span>(event);<br>&#125;);<br><span class="hljs-built_in">glfwSetMouseButtonCallback</span>(m_Window, [](GLFWwindow* window, <span class="hljs-type">int</span> button, <span class="hljs-type">int</span> action, <span class="hljs-type">int</span> mods)<br>&#123;<br>WindowData&amp; data = *(WindowData*)<span class="hljs-built_in">glfwGetWindowUserPointer</span>(window);<br><span class="hljs-keyword">switch</span> (action)<br>&#123;<br><span class="hljs-keyword">case</span> GLFW_PRESS:<br>&#123;<br>MouseButtonPressedEvent <span class="hljs-built_in">event</span>(button);<br>data.<span class="hljs-built_in">EventCallback</span>(event);<br><span class="hljs-keyword">break</span>;<br>&#125;<br><span class="hljs-keyword">case</span> GLFW_RELEASE:<br>&#123;<br>MouseButtonReleasedEvent <span class="hljs-built_in">event</span>(button);<br>data.<span class="hljs-built_in">EventCallback</span>(event);<br><span class="hljs-keyword">break</span>;<br>&#125;<br>&#125;<br>&#125;);<br><span class="hljs-built_in">glfwSetScrollCallback</span>(m_Window, [](GLFWwindow* window, <span class="hljs-type">double</span> xOffset, <span class="hljs-type">double</span> yOffset)<br>&#123;<br>WindowData&amp; data = *(WindowData*)<span class="hljs-built_in">glfwGetWindowUserPointer</span>(window);<br>MouseScrolledEvent <span class="hljs-built_in">event</span>((<span class="hljs-type">float</span>)xOffset, (<span class="hljs-type">float</span>)yOffset);<br>data.<span class="hljs-built_in">EventCallback</span>(event);<br>&#125;);<br><span class="hljs-built_in">glfwSetCursorPosCallback</span>(m_Window, [](GLFWwindow* window, <span class="hljs-type">double</span> xPos, <span class="hljs-type">double</span> yPos)<br>&#123;<br>WindowData&amp; data = *(WindowData*)<span class="hljs-built_in">glfwGetWindowUserPointer</span>(window);<br>MouseMovedEvent <span class="hljs-built_in">event</span>((<span class="hljs-type">float</span>)xPos, (<span class="hljs-type">float</span>)yPos);<br>data.<span class="hljs-built_in">EventCallback</span>(event);<br>&#125;);<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Window::Shutdown</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-built_in">glfwDestroyWindow</span>(m_Window);<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Window::OnUpdate</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-comment">// Everytime it is updataed, process the event in the queue</span><br><span class="hljs-built_in">glfwPollEvents</span>();<br><span class="hljs-comment">//m_Context-&gt;SwapBuffers();</span><br><span class="hljs-built_in">glfwSwapBuffers</span>(m_Window);<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Window::SetVSync</span><span class="hljs-params">(<span class="hljs-type">bool</span> enabled)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">if</span> (enabled)<br><span class="hljs-built_in">glfwSwapInterval</span>(<span class="hljs-number">1</span>);<br><span class="hljs-keyword">else</span><br><span class="hljs-built_in">glfwSwapInterval</span>(<span class="hljs-number">0</span>);<br>m_Data.VSync = enabled;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">Window::IsSync</span><span class="hljs-params">()</span> <span class="hljs-type">const</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">return</span> m_Data.VSync;<br>&#125;<br><span class="hljs-comment">//--------------------namespace: Illusion ends--------------------</span><br>&#125;<br></code></pre></td></tr></table></figure><ul><li><em><strong>GLFWErrorCallback()</strong></em> is a function that would be called when glfw is having trouble with the window;</li><li>In the <em><strong>Init()</strong></em> function, the data passed in will be unpacked and used to initialize the window. Then, we initialize GLFW, glad, and graphic context;<ul><li>The <em><strong>UserPointer</strong></em> is a void pointer that could be used to <strong>store whatever data we want</strong> and the data stored in it could be read by using <em><strong>glfwGetWindowUserPointer()</strong></em>. In this case, we use this pointer to store the window’s data, <em><strong>precisely the EventCallback function</strong></em>;</li><li>For every <em><strong>glfwSet___Callback()</strong></em>, we pass in the current window and <em><strong>a lambda expression</strong></em>. These lambda expressions work like <strong>anonymous functions</strong>. The function would bind these them to the glfw callback functions. They would unpack the data stored in the UserPointer and take out the <em><strong>EventCallback function</strong></em> and call it;</li><li>Here we bind all types of callback functions to corresponding lambda expressions, so that we can handle all types of events;</li></ul></li><li><em><strong>OnUpdata()</strong></em> function is where we refresh the window and update the frame;</li></ul><hr><h2 id="Utilization"><a href="#Utilization" class="headerlink" title="Utilization"></a>Utilization</h2><p>So far, we have implemented every thing that we need to render a window. Next step we have to revise the exsisting code in order to put these systems into use.</p><h3 id="Engine-End"><a href="#Engine-End" class="headerlink" title="Engine End"></a>Engine End</h3><p>Firstly, we have to revise the code in Engine end:</p><h4 id="Applicaton-h"><a href="#Applicaton-h" class="headerlink" title="Applicaton.h"></a>Applicaton.h</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">pragma</span> once</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;Engine/Core/Core.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;Engine/Core/Layer/LayerStack.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;Engine/Event/Events.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;Engine/Event/AppEvent.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;Engine/Core/Window/Window.h&quot;</span></span><br><span class="hljs-comment">//--------------------namespace: Illusion starts--------------------</span><br><span class="hljs-keyword">namespace</span> Illusion<br>&#123;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Application</span><br>&#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-built_in">Application</span>();<br><span class="hljs-keyword">virtual</span> ~<span class="hljs-built_in">Application</span>();<br><span class="hljs-comment">//The function where application actually starts</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Run</span><span class="hljs-params">()</span></span>;<br><span class="hljs-comment">// Overall callback function</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">OnEvent</span><span class="hljs-params">(Event&amp; event)</span></span>;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">PushLayer</span><span class="hljs-params">(Layer* layer)</span></span>;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">PushOverlay</span><span class="hljs-params">(Layer* overlay)</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> Window&amp; <span class="hljs-title">GetWindow</span><span class="hljs-params">()</span> </span>&#123; <span class="hljs-keyword">return</span> *m_Window; &#125;;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">static</span> Application&amp; <span class="hljs-title">Get</span><span class="hljs-params">()</span> </span>&#123; <span class="hljs-keyword">return</span> *s_Instance; &#125;;<br><span class="hljs-keyword">private</span>:<br><span class="hljs-comment">// Callback function that close the window</span><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">OnWindowClose</span><span class="hljs-params">(WindowCloseEvent&amp; event)</span></span>;<br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">OnWindowResize</span><span class="hljs-params">(WindowResizeEvent&amp; event)</span></span>;<br><span class="hljs-keyword">private</span>:<br>std::unique_ptr&lt;Window&gt; m_Window;<br><span class="hljs-type">bool</span> m_Running = <span class="hljs-literal">true</span>;<br><span class="hljs-type">bool</span> m_Minimized = <span class="hljs-literal">false</span>;<br>LayerStack m_LayerStack;<br><span class="hljs-keyword">private</span>:<br><span class="hljs-type">static</span> Application* s_Instance;<br>&#125;;<br><span class="hljs-comment">//The Creation function of the application</span><br><span class="hljs-comment">//Should be implement by the user themselves</span><br><span class="hljs-comment">//Since we don&#x27;t know what they will call their apps and what they will do with their apps</span><br><span class="hljs-comment">//There cannot be a uniform implementation of the creation function</span><br><span class="hljs-comment">//It is implemented in the Game.cpp</span><br><span class="hljs-function">Application* <span class="hljs-title">CreateApplication</span><span class="hljs-params">()</span></span>;<br><span class="hljs-comment">//--------------------namespace: Illusion ends--------------------</span><br>&#125;<br></code></pre></td></tr></table></figure><ul><li>We use a unique pointer to store our window instance.</li><li>OnEvent() function would be bound to the window’s EventCallback function. The function will be used to dispatch all the event to every layers and window itself;</li><li>PushLayer() and PushOvelayer() are used to push layers into the layerstack;</li><li>GetWindow() and Get() expose the window instance and application instance to other classes such as Input;</li><li>OnWindowClose() and OnWindoResize() are callback functions that work with m_Running and m_Minimized to determine the status of the window and application;</li></ul><h4 id="Application-cpp"><a href="#Application-cpp" class="headerlink" title="Application.cpp"></a>Application.cpp</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;pch.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;Application.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;Engine/Core/Log/Log.h&quot;</span></span><br> <span class="hljs-comment">//--------------------namespace: Illusion starts--------------------</span><br><span class="hljs-keyword">namespace</span> Illusion<br>&#123;<br>Application* Application::s_Instance = <span class="hljs-literal">nullptr</span>;<br>Application::<span class="hljs-built_in">Application</span>()<br>&#123;<br><span class="hljs-built_in">ILLUSION_CORE_ASSERT</span>(!s_Instance, <span class="hljs-string">&quot;Application already exists!&quot;</span>);<br>s_Instance = <span class="hljs-keyword">this</span>;<br><span class="hljs-comment">// Create a window</span><br>m_Window.<span class="hljs-built_in">reset</span>(<span class="hljs-keyword">new</span> <span class="hljs-built_in">Window</span>());<br><span class="hljs-comment">// Bind OnEvent as a overall callback function glfw</span><br><span class="hljs-comment">// The program would call OnEvent whenever there&#x27;s an event</span><br>m_Window-&gt;<span class="hljs-built_in">SetEventCallback</span>(<span class="hljs-built_in">ENGINE_BIND_EVENT_FN</span>(Application::OnEvent));<br>&#125;<br>Application::~<span class="hljs-built_in">Application</span>() &#123;&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Application::PushLayer</span><span class="hljs-params">(Layer* layer)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-comment">// Push the layer into the layerstack and call it to do some prepare work</span><br>m_LayerStack.<span class="hljs-built_in">PushLayer</span>(layer);<br>layer-&gt;<span class="hljs-built_in">OnAttach</span>();<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Application::PushOverlay</span><span class="hljs-params">(Layer* overlay)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-comment">// Push the overlay layer into the layerstack and call it to do some prepare work</span><br>m_LayerStack.<span class="hljs-built_in">PushOverlay</span>(overlay);<br>overlay-&gt;<span class="hljs-built_in">OnAttach</span>();<br>&#125;<br><span class="hljs-comment">// The overall callback function</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Application::OnEvent</span><span class="hljs-params">(Event&amp; event)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-comment">// Create a dispatcher which is bound to event</span><br><span class="hljs-function">EventDispatcher <span class="hljs-title">dispatcher</span><span class="hljs-params">(event)</span></span>;<br><span class="hljs-comment">// If the event is OnWindowClose, the dispatcher would dispatch it and call the OnWindowClose function</span><br>dispatcher.<span class="hljs-built_in">Dispatch</span>&lt;WindowCloseEvent&gt;(<span class="hljs-built_in">ENGINE_BIND_EVENT_FN</span>(Application::OnWindowClose));<br>dispatcher.<span class="hljs-built_in">Dispatch</span>&lt;WindowResizeEvent&gt;(<span class="hljs-built_in">ENGINE_BIND_EVENT_FN</span>(Application::OnWindowResize));<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> it = m_LayerStack.<span class="hljs-built_in">end</span>(); it != m_LayerStack.<span class="hljs-built_in">begin</span>();)<br>&#123;<br>(*(--it))-&gt;<span class="hljs-built_in">OnEvent</span>(event);<br><span class="hljs-keyword">if</span> (event.m_Handled)<br><span class="hljs-keyword">break</span>;<br>&#125;<br>&#125;<br><span class="hljs-comment">// The callback function to close the window</span><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">Application::OnWindowClose</span><span class="hljs-params">(WindowCloseEvent&amp; event)</span></span><br><span class="hljs-function"></span>&#123;<br>m_Running = <span class="hljs-literal">false</span>;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><span class="hljs-comment">// The callback function to resize the window</span><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">Application::OnWindowResize</span><span class="hljs-params">(WindowResizeEvent&amp; event)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">if</span> (event.<span class="hljs-built_in">GetWidth</span>() == <span class="hljs-number">0</span> || event.<span class="hljs-built_in">GetHeight</span>() == <span class="hljs-number">0</span>)<br>&#123;<br>m_Minimized = <span class="hljs-literal">true</span>;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br>m_Minimized = <span class="hljs-literal">false</span>;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br><span class="hljs-comment">//The function where the app actually starts</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Application::Run</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">while</span> (m_Running)<br>&#123;<br><span class="hljs-keyword">if</span> (!m_Minimized)<br>&#123;<br><span class="hljs-comment">// Update Objects in the game base on the Layer order</span><br><span class="hljs-keyword">for</span> (Layer* layer : m_LayerStack)<br>layer-&gt;<span class="hljs-built_in">OnUpdate</span>();<br>&#125;<br><span class="hljs-comment">// Update everything</span><br>m_Window-&gt;<span class="hljs-built_in">OnUpdate</span>();<br>&#125;<br>&#125;<br><span class="hljs-comment">//--------------------namespace: Illusion ends--------------------</span><br>&#125;<br></code></pre></td></tr></table></figure><ul><li><em><strong>PushLayer()</strong></em> and <em><strong>PushOverlay()</strong></em> will push the layers into the layerstack and call their <em><strong>OnAttach()</strong></em> functons;</li><li><em><strong>OnEvent()</strong></em> dispatches the events passed in to <em><strong>OnWindowClose()</strong></em> and <em><strong>OnWindowResize()</strong></em>; Then it would iterate through the layerstack <em><strong>from back to front</strong></em> to call each layer’s OnEvent() function;<ul><li><em><strong>The order of layers</strong></em> in the layerstack determines <em><strong>the rendering order</strong></em>. But <em><strong>the logic order of layers is reversed from their rendering order</strong></em>. When we click a certain position on the screen, if there is a debug button, we definitely don’t want the in-game UI below to be clicked, and we also don’t want the character to make an attack action. Therefore, we need to reverse the rendering order and check whether each Layer can respond to this event. And decide whether to consume this event base on the behavior of the corresponding response (whether to stop here, or continue to the next Layer to respond)</li></ul></li><li>By using the bool <em><strong>m_Minimized</strong></em>, we could stop updating the window when it is minimized.</li></ul><h4 id="Engine-h"><a href="#Engine-h" class="headerlink" title="Engine.h"></a>Engine.h</h4><p>Inside Engine.h, we have to add some include command in order to expose our systems to the game application. The file would be like this:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;Engine/Core/Application/Application.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;Engine/Core/Log/Log.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;Engine/Core/Layer/Layer.h&quot;</span></span><br></code></pre></td></tr></table></figure><hr><h3 id="Application-End"><a href="#Application-End" class="headerlink" title="Application End"></a>Application End</h3><p>Then, we could use these system in our game application:</p><h4 id="TestLayer-h-x2F-cpp"><a href="#TestLayer-h-x2F-cpp" class="headerlink" title="TestLayer.h&#x2F;.cpp"></a>TestLayer.h&#x2F;.cpp</h4><p>To start our game application, we need to create a layer for our game. In <em><strong>Game&#x2F;src&#x2F;…</strong></em> folder, create <em><strong>TestLayer.h&#x2F;.cpp&#x2F;</strong></em> and enter:</p><p>TestLayer.h:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">pragma</span> once</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;Engine.h&gt;</span></span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">TestLayer</span> : <span class="hljs-keyword">public</span> Illusion::Layer<br>&#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-built_in">TestLayer</span>();<br><span class="hljs-keyword">virtual</span> ~<span class="hljs-built_in">TestLayer</span>() = <span class="hljs-keyword">default</span>;<br><br><span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-type">void</span> <span class="hljs-title">OnAttach</span><span class="hljs-params">()</span> <span class="hljs-keyword">override</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-type">void</span> <span class="hljs-title">OnDetach</span><span class="hljs-params">()</span> <span class="hljs-keyword">override</span></span>;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">OnUpdate</span><span class="hljs-params">()</span> <span class="hljs-keyword">override</span></span>;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">OnEvent</span><span class="hljs-params">(Illusion::Event&amp; event)</span> <span class="hljs-keyword">override</span></span>;<br>&#125;;<br><br><br></code></pre></td></tr></table></figure><p>TestLayer.cpp:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;TestLayer.h&quot;</span></span><br>TestLayer::<span class="hljs-built_in">TestLayer</span>()<br>:<span class="hljs-built_in">Layer</span>(<span class="hljs-string">&quot;TestLayer&quot;</span>), <span class="hljs-built_in">m_CameraController</span>(<span class="hljs-number">2560.0f</span> / <span class="hljs-number">1440.0f</span>, <span class="hljs-literal">true</span>)<br>&#123;&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">TestLayer::OnAttach</span><span class="hljs-params">()</span> </span>&#123;&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">TestLayer::OnDetach</span><span class="hljs-params">()</span> </span>&#123;&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">TestLayer::OnUpdate</span><span class="hljs-params">(Illusion::Timestep timestep)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-comment">// Render</span><br><span class="hljs-comment">// Set the clear color</span><br><span class="hljs-comment">// Clear the color buffer with the clear color</span><br>    <span class="hljs-built_in">glClearColor</span>(<span class="hljs-number">0.3f</span>, <span class="hljs-number">0.3f</span>, <span class="hljs-number">0.3f</span>, <span class="hljs-number">1.0f</span>);<br><span class="hljs-built_in">glClear</span>(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">TestLayer::OnEvent</span><span class="hljs-params">(Illusion::Event&amp; event)</span> </span>&#123;&#125;<br></code></pre></td></tr></table></figure><ul><li>The <em><strong>TestLayer</strong></em> class inherites from <em><strong>Layer</strong></em> class;</li><li>Currently we have nothing to do in OnAttach(), OnDetach(), and OnEvent() functons;</li><li><em><strong>OnUpdate()</strong></em> function would set a color that would be used to refresh the background of the window, and <em><strong>glClear()</strong></em> would clear the buffer with that color.</li></ul><h4 id="Game-cpp"><a href="#Game-cpp" class="headerlink" title="Game.cpp"></a>Game.cpp</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;Engine.h&gt;</span></span><br> <span class="hljs-comment">//--------------------Entry point for the application--------------------</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;Engine/Core/EntryPoint.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;TestLayer.h&quot;</span></span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Game</span> : <span class="hljs-keyword">public</span> Illusion::Application<br>&#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-built_in">Game</span>()<br>&#123;<br><span class="hljs-comment">//PushLayer(new GameLayer());</span><br><span class="hljs-built_in">PushLayer</span>(<span class="hljs-keyword">new</span> <span class="hljs-built_in">TestLayer</span>());<br>&#125;<br>~<span class="hljs-built_in">Game</span>() &#123;&#125;<br>&#125;;<br><span class="hljs-comment">//The Creation function for the Game Application</span><br><span class="hljs-function">Illusion::Application* <span class="hljs-title">Illusion::CreateApplication</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Game</span>();<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>Here we create an instance of the TestLayer and push it into the layerstack so the application could update it automatically.</li></ul><hr><h2 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h2><p>So far, we have finished the implementation of our first window and the utilization of the event system and layer system. Next step, we are going to create several helper classes such as a class that would generate a debugging window, a class that could set the update rate fixed, a class that could process the input, etc.</p>]]></content>
    
    
    <categories>
      
      <category>Game Engine</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Original</tag>
      
      <tag>C++</tag>
      
      <tag>Game Development</tag>
      
      <tag>Computer Graphics</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Illusion Engine 05 - Layer System</title>
    <link href="/LayerSystem/"/>
    <url>/LayerSystem/</url>
    
    <content type="html"><![CDATA[<h2 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h2><p>The layer system is a crucial aspect of game engine design that helps <strong>separate and manage the rendering of debugging information and gameplay content</strong>. The system comprises of <em><strong>layers and a layer stack</strong></em>, with each layer containing all the items that need to be rendered. Items that are <strong>logically related</strong> are grouped together in the same layer to promote <strong>better organization and management</strong>.</p><p>The layer stack is created by embedding all the layers in a particular order, with a <em><strong>pointer</strong></em> used to differentiate between the gameplay layers and the overlay layers (debugging layers). </p><p><img src="/LayerSystem/SystemStructure.png" alt="Structure of Layer system"></p><p>It is important to note that the layer system used in this game engine is <strong>not the same as the layers used in other game engines for scene management</strong>. In this case, the layer does not dictate the rendering relationship between objects. However, objects in a scene are <strong>only logically grouped</strong> into layers for easier management and visibility control, such as grouping all lights into a Lighting Layer, grouping all animals into an Animal Layer, or grouping all vehicles into a Vehicle Layer. These scene-level layers do not determine the order in which objects are rendered, but serve more as a logical grouping mechanism.</p><hr><h2 id="Implementation"><a href="#Implementation" class="headerlink" title="Implementation"></a>Implementation</h2><h3 id="Layer-Class"><a href="#Layer-Class" class="headerlink" title="Layer Class"></a>Layer Class</h3><p>The Layer class would be an abstract class since we have no idea how game developers will design their own layers. Inside <em><strong>Illusion&#x2F;src&#x2F;Engine&#x2F;Core&#x2F;Layer&#x2F;…</strong></em> folder, create two files: <strong>Layer.h&#x2F;.cpp</strong> and enter:</p><p><strong>Layer.h</strong>:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">pragma</span> once</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;Engine/Core/Core.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;Engine/Event/Events.h&quot;</span></span><br><br> <span class="hljs-comment">//--------------------namespace: Illusion starts--------------------</span><br><span class="hljs-keyword">namespace</span> Illusion<br>&#123;<br><span class="hljs-comment">// Abstract Layer class</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Layer</span><br>&#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-built_in">Layer</span>(<span class="hljs-type">const</span> std::string&amp; name = <span class="hljs-string">&quot;Layer&quot;</span>);<br><span class="hljs-keyword">virtual</span> ~<span class="hljs-built_in">Layer</span>();<br><br><span class="hljs-comment">// Call when it is put into the stack</span><br><span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-type">void</span> <span class="hljs-title">OnAttach</span><span class="hljs-params">()</span> </span>&#123;&#125;<br><span class="hljs-comment">// Call when it is take out from the stack</span><br><span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-type">void</span> <span class="hljs-title">OnDetach</span><span class="hljs-params">()</span> </span>&#123;&#125;<br><span class="hljs-comment">// Call when it is asked to update</span><br><span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-type">void</span> <span class="hljs-title">OnUpdate</span><span class="hljs-params">()</span> </span>&#123;&#125;<br><span class="hljs-comment">// Call when it receives events</span><br><span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-type">void</span> <span class="hljs-title">OnEvent</span><span class="hljs-params">(Event&amp; event)</span> </span>&#123;&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-type">void</span> <span class="hljs-title">OnImGuiRender</span><span class="hljs-params">()</span> </span>&#123;&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">const</span> std::string&amp; <span class="hljs-title">GetName</span><span class="hljs-params">()</span> <span class="hljs-type">const</span> </span>&#123; <span class="hljs-keyword">return</span> m_DebugName; &#125;<br><br><span class="hljs-keyword">protected</span>:<br>std::string m_DebugName;<br>&#125;;<br><span class="hljs-comment">//--------------------namespace: Illusion ends--------------------</span><br>&#125;<br></code></pre></td></tr></table></figure><p><strong>Layer.cpp</strong>:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;pch.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;Layer.h&quot;</span></span><br><span class="hljs-comment">//--------------------namespace: Illusion starts--------------------</span><br><span class="hljs-keyword">namespace</span> Illusion<br>&#123;<br>Layer::<span class="hljs-built_in">Layer</span>(<span class="hljs-type">const</span> std::string&amp; debugname)<br>: <span class="hljs-built_in">m_DebugName</span>(debugname) &#123;&#125;<br>Layer::~<span class="hljs-built_in">Layer</span>() &#123;&#125;<br><span class="hljs-comment">//--------------------namespace: Illusion ends--------------------</span><br>&#125;<br></code></pre></td></tr></table></figure><ul><li>The Layer class would maintain a string which is its own name.</li><li><strong>OnImGuiRender()</strong> is used to render the ImGui windows when we need to debug with ImGui library.</li></ul><h3 id="LayerStack-Class"><a href="#LayerStack-Class" class="headerlink" title="LayerStack Class"></a>LayerStack Class</h3><p>The LayerStack class contains all layers and manage the update, adding, and removal of them. Inside <em><strong>Illusion&#x2F;src&#x2F;Engine&#x2F;Core&#x2F;Layer&#x2F;…</strong></em> folder, create two files: <strong>LayerStack.h&#x2F;.cpp</strong> and enter:</p><p><strong>LayerStack.h</strong>:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">pragma</span> once</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;Engine/Core/Core.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;Layer.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;vector&gt;</span></span><br> <span class="hljs-comment">//--------------------namespace: Illusion starts--------------------</span><br><span class="hljs-keyword">namespace</span> Illusion<br>&#123;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">LayerStack</span><br>&#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-built_in">LayerStack</span>();<br>~<span class="hljs-built_in">LayerStack</span>();<br><span class="hljs-comment">// Put layer into the layerstack</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">PushLayer</span><span class="hljs-params">(Layer* layer)</span></span>;<br><span class="hljs-comment">// Put overlay layer into the layerstack</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">PushOverlay</span><span class="hljs-params">(Layer* overlay)</span></span>;<br><span class="hljs-comment">// Take the layer out of the layerstack</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">PopLayer</span><span class="hljs-params">(Layer* layer)</span></span>;<br><span class="hljs-comment">// Take the overlay layer out of the layerstack</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">PopOverlay</span><span class="hljs-params">(Layer* overlay)</span></span>;<br><span class="hljs-comment">// The beginning positon of the stack</span><br>std::vector&lt;Layer*&gt;::<span class="hljs-function">iterator <span class="hljs-title">begin</span><span class="hljs-params">()</span> </span>&#123; <span class="hljs-keyword">return</span> m_Layers.<span class="hljs-built_in">begin</span>(); &#125;<br><span class="hljs-comment">// The ending position of the stack</span><br>std::vector&lt;Layer*&gt;::<span class="hljs-function">iterator <span class="hljs-title">end</span><span class="hljs-params">()</span> </span>&#123; <span class="hljs-keyword">return</span> m_Layers.<span class="hljs-built_in">end</span>(); &#125;<br><span class="hljs-keyword">private</span>:<br><span class="hljs-comment">// The layerstack</span><br>std::vector&lt;Layer*&gt; m_Layers;<br><span class="hljs-comment">// The  position of the line between layer and overlay layer</span><br><span class="hljs-comment">// All the layers beneath this are layers</span><br><span class="hljs-comment">// All the layers above this are overlay layers</span><br><span class="hljs-type">unsigned</span> m_LayerInsertIndex = <span class="hljs-number">0</span>;<br>&#125;;<br><span class="hljs-comment">//--------------------namespace: Illusion ends--------------------</span><br>&#125;<br></code></pre></td></tr></table></figure><p><strong>LayerStack.cpp</strong>:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;pch.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;LayerStack.h&quot;</span></span><br> <span class="hljs-comment">//--------------------namespace: Illusion starts--------------------</span><br><span class="hljs-keyword">namespace</span> Illusion<br>&#123;<br><span class="hljs-comment">// Initialize the LayerStack</span><br>LayerStack::<span class="hljs-built_in">LayerStack</span>() &#123;&#125;<br><span class="hljs-comment">// Delete all the layers and layerstack</span><br>LayerStack::~<span class="hljs-built_in">LayerStack</span>()<br>&#123;<br><span class="hljs-keyword">for</span> (Layer* layer : m_Layers)<br>&#123;<br>layer-&gt;<span class="hljs-built_in">OnDetach</span>();<br><span class="hljs-keyword">delete</span> layer;<br>&#125;<br>&#125;<br><span class="hljs-comment">// Put the layer into the layerstack</span><br><span class="hljs-comment">// It is put into the &quot;layer zone&quot;</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">LayerStack::PushLayer</span><span class="hljs-params">(Layer* layer)</span></span><br><span class="hljs-function"></span>&#123;<br>m_Layers.<span class="hljs-built_in">emplace</span>(m_Layers.<span class="hljs-built_in">begin</span>() + m_LayerInsertIndex, layer);<br>m_LayerInsertIndex++;<br>&#125;<br><span class="hljs-comment">// Take the layer out from the layerstack</span><br><span class="hljs-comment">// Update the &quot;layer/overlay layer line&quot;</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">LayerStack::PopLayer</span><span class="hljs-params">(Layer* layer)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">auto</span> it = std::<span class="hljs-built_in">find</span>(m_Layers.<span class="hljs-built_in">begin</span>(), m_Layers.<span class="hljs-built_in">end</span>(), layer);<br><span class="hljs-keyword">if</span> (it != m_Layers.<span class="hljs-built_in">end</span>())<br>&#123;<br>m_Layers.<span class="hljs-built_in">erase</span>(it);<br>m_LayerInsertIndex--;<br>&#125;<br>&#125;<br><span class="hljs-comment">// Put the overlay layer into the layerstacj</span><br><span class="hljs-comment">// It is put into the &quot;overlay layer zone&quot;(above the pointer)</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">LayerStack::PushOverlay</span><span class="hljs-params">(Layer* overlay)</span></span><br><span class="hljs-function"></span>&#123;<br>m_Layers.<span class="hljs-built_in">emplace_back</span>(overlay);<br>&#125;<br><span class="hljs-comment">// Take the overlay layer out from the layerstack</span><br><span class="hljs-comment">// It is above the pointer so it don&#x27;t have to be updated</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">LayerStack::PopOverlay</span><span class="hljs-params">(Layer* overlay)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">auto</span> it = std::<span class="hljs-built_in">find</span>(m_Layers.<span class="hljs-built_in">begin</span>(), m_Layers.<span class="hljs-built_in">end</span>(), overlay);<br><span class="hljs-keyword">if</span> (it != m_Layers.<span class="hljs-built_in">end</span>())<br>m_Layers.<span class="hljs-built_in">erase</span>(it);<br>&#125;<br><span class="hljs-comment">//--------------------namespace: Illusion ends--------------------</span><br>&#125;<br></code></pre></td></tr></table></figure><ul><li>The LayerStack is implemented with <strong>a vector</strong>. The vector stores pointers of every layers.</li><li>The LayerStack also has an index that represents <strong>the position of the last gameplay layers</strong>. The layers before that index are gameplay layers and layers after that index are overlay layers. The index would increase everytime a new layer is pushed in and decreases everytime a layer is poped out.</li></ul><hr><h2 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h2><p>We explored the layer system in game engine design and its role in separating debugging information from gameplay rendering. We discussed the structure of the system, including the layers and layer stack, and highlighted the differences between this system and scene-level layers in other game engines.</p><p>In conclusion, the layer system is a key component of game engine design that helps improve organization and efficiency. In the next article, we will dive into the utilization of this system by rendering the first actual window.</p>]]></content>
    
    
    <categories>
      
      <category>Game Engine</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Original</tag>
      
      <tag>C++</tag>
      
      <tag>Game Development</tag>
      
      <tag>Computer Graphics</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Illusion Engine 04 - Event System</title>
    <link href="/EventSystem/"/>
    <url>/EventSystem/</url>
    
    <content type="html"><![CDATA[<h2 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h2><p>Games are inherently <strong>event-driven</strong>. Events are things that happen during the game and you want to pay attention to, such as explosions, players being seen by enemies, picking up health packs, and so on. Games usually need some way to do two things: notify objects that care about the event when it occurs, and have those objects respond to the event. The design pattern adopted by the event system is <strong>the Observer Pattern</strong>.</p><hr><h2 id="Principle"><a href="#Principle" class="headerlink" title="Principle"></a>Principle</h2><h3 id="Abstract-Events-into-Classes"><a href="#Abstract-Events-into-Classes" class="headerlink" title="Abstract Events into Classes"></a>Abstract Events into Classes</h3><p>Events usually fall into two parts: <strong>type</strong> and <strong>features</strong>. Type defines the overall information about events and features provide details. Some engine would call such structure as <strong>message</strong> or <strong>command</strong>.</p><p>There are several benefits to abstract events into classes:</p><ul><li>We only need <strong>one event processor function</strong>. All kinds of event could be represented by an instance of a class, so we only need a virual function to handle all of them, such as:</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-type">void</span> <span class="hljs-title">OnEvent</span><span class="hljs-params">(Event&amp; event)</span></span>;<br></code></pre></td></tr></table></figure><ul><li><p>Events <strong>could be stored</strong>: Event objects store their types and parameters when they are created, so they are persistent and can be used for later processing, or to copy and broadcast to multiple receives.</p></li><li><p>Events could be <strong>easily forwarded</strong>: An object can forward an event to another object without knowing the details of the event.</p></li></ul><h3 id="Event-Processing"><a href="#Event-Processing" class="headerlink" title="Event Processing"></a>Event Processing</h3><ul><li><p><strong>Event Dispatcher</strong>: Most game objects only care about a small set of events, and it is very inefficient to multicast events every time. To improve the efficiency of event handling, objects can register the events they care about. For example, we can implement an event dispatcher for an object that accepts <strong>an event type to bind to</strong>. When a specific event is triggered, the dispatcher <strong>compares the incoming event type</strong> with the bound event type and <strong>passes the matching event as a parameter</strong> to the event handler of the object.</p></li><li><p><strong>Callback Functions</strong>: Somtimes a game object receives an event and needs to respond in some way. This process is called event handling and is usually implemented as a function called an <strong>callback function</strong>. In some high-level languages, callback functions can be registered by storing function pointers (C&#x2F;C++) or delegates (C#) and called when specific events are received.</p></li><li><p><strong>Event Forwarding</strong>:There are often dependencies between game objects, and events sometimes need to be <strong>passed down</strong> the dependency chain. Usually, the order of event delivery is determined by the developer, and <strong>a Boolean value</strong> is returned by the event handler to indicate whether the object has processed the event and whether to continue forwarding.</p></li></ul><hr><h2 id="Implementation"><a href="#Implementation" class="headerlink" title="Implementation"></a>Implementation</h2><h3 id="Event-Type-x2F-Event-Category"><a href="#Event-Type-x2F-Event-Category" class="headerlink" title="Event Type&#x2F; Event Category"></a>Event Type&#x2F; Event Category</h3><p>Events include key events, mouse events, application events, etc. For key events, there would be states like pressed, released, continous pressed. And for mouse events, there would be pressed, moved, scrolled, and so on. So, we could abstract them into some enums called <strong>EventType</strong> and include them with different categories.</p><p>Thus, we need to create a file called <strong>Events.h</strong> in <em><strong>Illusion&#x2F;src&#x2F;Engine&#x2F;Event&#x2F;…</strong></em> folder and enter:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">pragma</span> once</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;pch.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;Engine/Core/Core.h&quot;</span></span><br><br><span class="hljs-comment">//--------------------namespace: Illusion starts--------------------</span><br><span class="hljs-keyword">namespace</span> Illusion<br>&#123;<br><span class="hljs-keyword">enum class</span> <span class="hljs-title class_">EventType</span> <br>&#123;<br>None = <span class="hljs-number">0</span>,<br>WindowClose, WindowResize, WindowFocus, WindowLostFocus, WindowMoved,<br>AppTick, AppUpdate, AppRender,<br>KeyPressed, KeyReleased, KeyTyped,<br>MouseButtonPressed, MouseButtonReleased, MouseMoved, MouseScrolled<br>&#125;;<br><br><span class="hljs-keyword">enum</span> <span class="hljs-title class_">EventCategory</span> <br>&#123;<br>None = <span class="hljs-number">0</span>,<br>EventCategoryApplication= <span class="hljs-built_in">BIT</span>(<span class="hljs-number">0</span>), <span class="hljs-comment">//1</span><br>EventCategoryInput= <span class="hljs-built_in">BIT</span>(<span class="hljs-number">1</span>), <span class="hljs-comment">//10</span><br>EventCategoryKeyboard= <span class="hljs-built_in">BIT</span>(<span class="hljs-number">2</span>), <span class="hljs-comment">//100</span><br>EventCategoryMouse= <span class="hljs-built_in">BIT</span>(<span class="hljs-number">3</span>), <span class="hljs-comment">//1000</span><br>EventCategoryMouseButton= <span class="hljs-built_in">BIT</span>(<span class="hljs-number">4</span>)  <span class="hljs-comment">//10000</span><br>&#125;;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li><strong>BIT(x)</strong> is a macro defined in <strong>Core.h</strong>, which is used to <em><strong>shift 1 to the left by x bits</strong></em>.</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">define</span> BIT(x) (1 &lt;&lt; x)</span><br></code></pre></td></tr></table></figure><ul><li><p>The reason why we set EventCategory like this is based on the following requirement: A <strong>single event</strong> could be in <strong>multiple categories</strong>. For example, KeyPressed could be in EventCategoryInput, but it could also be in EventCategoryKeyboard. In case like this, how do we figure out whether an event belongs to a certain event category?</p></li><li><p>The more direct but complicated way to do this is to maintian a list of categories in each event type. When we need to figure out whether it is in the catergory, we just need to iterate through the list and return true if the categories matched with the desired one.</p></li><li><p>Here we use the idea of <em><strong>bitfields</strong></em> to implement the solution. Each category is assign a <strong>binary value</strong> instead of decimal numbers like 1,2,3. By doing so, these non-zero bits are like <strong>flags</strong> that represent different categories. We could easily mask out the value we need.</p><ul><li>Here’s an example: For event type belongs to EventCategoryInput, EventCategoryMouse, and EventCategoryMouseButton at the same time, its category could be represented like EventCategoryMouseButton | EventCategoryMouse | EventCategoryInput which equals to 11010. If we want to figure out whether it belongs to EventCategoryMouse, we could simply use <strong>EventCategoryMouse &amp; EventType’s Category</strong> which would turn into 1000 &amp; 11010 &#x3D;&gt; 01000. In the end, 01000 equals to <strong>true</strong> since <strong>only 00000 equals to false</strong>. So this event belongs to EventCategoryMouse.</li></ul></li></ul><h3 id="Event"><a href="#Event" class="headerlink" title="Event"></a>Event</h3><p>The <strong>Event</strong> class is a <em>virtual</em> class. It is used as a template for all events. Create the class in Events.h.</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">//Macros used to implement GetStaticType/GetEventType/GetName/GetCategoryFlags in the inherited class</span><br><span class="hljs-comment">// # is used to transform type into a string</span><br><span class="hljs-comment">// GetStaticType can be used as a static method, could be used without an object</span><br><span class="hljs-comment">// GetEventType can be used as a property method, can only be used with an instance/object</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> EVENT_CLASS_TYPE(type) static EventType GetStaticType() &#123; return EventType::type; &#125;\</span><br><span class="hljs-meta">virtual EventType GetEventType() const override &#123; return GetStaticType(); &#125;\</span><br><span class="hljs-meta">virtual const char* GetName() const override &#123; return #type; &#125;</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> EVENT_CLASS_CATEGORY(category) virtual int GetCategoryFlags() const override &#123; return category; &#125;</span><br><span class="hljs-comment">// Abstract event class</span><br><span class="hljs-comment">// All kinds of events inherates from event</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Event</span><br>&#123;<br><span class="hljs-comment">// Make the Dispatcher to be a friend class</span><br><span class="hljs-comment">// Authorize the Dispatcher to edit m_Handled</span><br><span class="hljs-keyword">friend</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">EventDispatcher</span>;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-comment">// = 0 means pure virtual/ it has to be implemented elsewhere in inherited class</span><br><span class="hljs-comment">// const means the function would not change the property of the class</span><br><span class="hljs-function"><span class="hljs-keyword">virtual</span> EventType <span class="hljs-title">GetEventType</span><span class="hljs-params">()</span> <span class="hljs-type">const</span> </span>= <span class="hljs-number">0</span>;<br><span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-type">const</span> <span class="hljs-type">char</span>* <span class="hljs-title">GetName</span><span class="hljs-params">()</span> <span class="hljs-type">const</span> </span>= <span class="hljs-number">0</span>;<br><span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-type">int</span> <span class="hljs-title">GetCategoryFlags</span><span class="hljs-params">()</span><span class="hljs-type">const</span> </span>= <span class="hljs-number">0</span>;<br><span class="hljs-function"><span class="hljs-keyword">virtual</span> std::string <span class="hljs-title">ToString</span><span class="hljs-params">()</span> <span class="hljs-type">const</span> </span>&#123; <span class="hljs-keyword">return</span> <span class="hljs-built_in">GetName</span>(); &#125;<br><span class="hljs-comment">// Check whether the input is in certain category</span><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">bool</span> <span class="hljs-title">IsInCategory</span><span class="hljs-params">(EventCategory category)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-comment">// GetCategoryFlags returns flags Such as 10000/01000/00001</span><br><span class="hljs-comment">// category usually used as EventCategoryMouseButton | EventCategoryMouse | EventCategoryInput</span><br><span class="hljs-comment">// the code is equivelent to (example):</span><br><span class="hljs-comment">// return 10000 &amp; 11010, which is 10000</span><br><span class="hljs-comment">// For bool, if there&#x27;s at least on bit not 0, the return would be true.</span><br><span class="hljs-keyword">return</span> <span class="hljs-built_in">GetCategoryFlags</span>() &amp; category;<br>&#125;<br><span class="hljs-comment">// Check whether the event still have to be handled</span><br><span class="hljs-type">bool</span> m_Handled = <span class="hljs-literal">false</span>;<br>&#125;;<br></code></pre></td></tr></table></figure><ul><li><p>There are two macros defined here: <strong>EVENT_CLASS_TYPE(type)</strong> and <strong>EVENT_CLASS_CATEGORY(catergory)</strong>. By using them, event classed inherited from Event such as KeyEvent, MouseEvent, can easily complete the necessary <strong>function implementation at once</strong>.</p></li><li><p>For an input event, it is necessary to store an bool called <strong>EventHandled</strong>, which is used to detect whether the current event still can be responded to, since we don’t want everything to have the same priority. For example, when clicking on the UI, we don’t want to shoot a bullet suddenly. In short, events <strong>need to be consumed</strong>, and the consumed events will not be responded to by other logic.</p></li></ul><h3 id="Event-Dispatcher"><a href="#Event-Dispatcher" class="headerlink" title="Event Dispatcher"></a>Event Dispatcher</h3><p>To register the events that objects care about, we need to implement an <strong>event dispatcher</strong>. Basically, it <strong>binds an event with a callback function</strong>. When the event it listens to is triggered, the dispacter would call the corresponding callback function. Event dispatcher corresponds to a function one by one, and this function returns a bool to decide whether to forward this event.</p><p>In <strong>Events.h</strong>, create a class called <strong>EventDispatcher</strong>:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">// Class Event Dispatcher</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">EventDispatcher</span><br>&#123;<br><span class="hljs-comment">// Define EventFn() Template</span><br><span class="hljs-comment">// Input: T&amp;</span><br><span class="hljs-comment">// Output: bool</span><br><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> T&gt;<br><span class="hljs-comment">// Set EventFn as another name for std::function&lt;bool(T&amp;)&gt;</span><br><span class="hljs-keyword">using</span> EventFn = std::function&lt;<span class="hljs-built_in">bool</span>(T&amp;)&gt;;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-comment">// Bind the event to the dispatcher</span><br><span class="hljs-comment">// Each dispatcher could only bind with one kind of event</span><br><span class="hljs-built_in">EventDispatcher</span>(Event&amp; event)<br>: <span class="hljs-built_in">m_Event</span>(event) &#123;&#125;<br><span class="hljs-comment">// Make a template funtion to dipatche the event</span><br><span class="hljs-comment">// Input: a function</span><br><span class="hljs-comment">// Output: bool</span><br><span class="hljs-function"><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> T&gt;</span><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">Dispatch</span><span class="hljs-params">(EventFn&lt;T&gt; func)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-comment">// Compare the bound event with the input event associated with the function</span><br><span class="hljs-comment">// GetStaticType is implemented in class inherited from Event, in this context it is T</span><br><span class="hljs-keyword">if</span> (m_Event.<span class="hljs-built_in">GetEventType</span>() == T::<span class="hljs-built_in">GetStaticType</span>())<br>&#123;<br><span class="hljs-comment">// Call the input function with *(T*)&amp;m_Event, which means:</span><br><span class="hljs-comment">// &amp;m_Event= the address of the event bound to the dipatcher</span><br><span class="hljs-comment">// (T*)= the cast to the pointer towards the type T</span><br><span class="hljs-comment">// *= dereference the pointer</span><br><span class="hljs-comment">// The output of the function determins wheter to consume the event or not</span><br>m_Event.m_Handled = <span class="hljs-built_in">func</span>(*(T*)&amp;m_Event);<br><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br><span class="hljs-keyword">private</span>:<br>Event&amp; m_Event;<br>&#125;;<br></code></pre></td></tr></table></figure><ul><li><p>The most tricky and important part is the function called <strong>Dispatch</strong>. This function <strong>receive a function</strong> as its parameter and for the Event T, it compares T’s type and the type that dispatcher bound to. If events’ types matched, it would <strong>call the function</strong> it received.</p></li><li><p><strong>func(*(T*)&amp;m_Event)</strong> seems really scary, but its principle is simple: we <strong>take the address</strong> of m_Event, cast it into a <strong>pointer</strong> of T, and then <strong>dereference</strong> it. And because func() is actually std::function&lt;bool(T&amp;)&gt;, the actual parameter is a *<strong>reference of an Event</strong>.</p></li></ul><h3 id="KeyEvent"><a href="#KeyEvent" class="headerlink" title="KeyEvent"></a>KeyEvent</h3><p><strong>KeyEvent</strong> class inherits from Event class. Create <strong>KeyEvent.h</strong> in <em><strong>Illusion&#x2F;src&#x2F;Engine&#x2F;Events&#x2F;…</strong></em> folder.</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">pragma</span> once</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;Events.h&quot;</span></span><br><br> <span class="hljs-comment">//--------------------namespace: Illusion starts--------------------</span><br><span class="hljs-keyword">namespace</span> Illusion<br>&#123;<br><span class="hljs-comment">// KeyEvent</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">KeyEvent</span> : <span class="hljs-keyword">public</span> Event<br>&#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">int</span> <span class="hljs-title">GetKeyCode</span><span class="hljs-params">()</span> <span class="hljs-type">const</span> </span>&#123; <span class="hljs-keyword">return</span> m_KeyCode; &#125;<br><br><span class="hljs-built_in">EVENT_CLASS_CATEGORY</span>(EventCategoryKeyboard | EventCategoryInput)<br><br><span class="hljs-keyword">protected</span>:<br><span class="hljs-comment">// Bind it with a certain key</span><br><span class="hljs-built_in">KeyEvent</span>(<span class="hljs-type">int</span> keycode)<br>: <span class="hljs-built_in">m_KeyCode</span>(keycode) &#123;&#125;<br><br><span class="hljs-type">int</span> m_KeyCode;<br>&#125;;<br><br><span class="hljs-comment">// Keypressed Event</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">KeyPressedEvent</span> : <span class="hljs-keyword">public</span> KeyEvent<br>&#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-built_in">KeyPressedEvent</span>(<span class="hljs-type">int</span> keycode, <span class="hljs-type">int</span> repeatCount)<br>:<span class="hljs-built_in">KeyEvent</span>(keycode), <span class="hljs-built_in">m_RepeatCount</span>(repeatCount) &#123;&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">int</span> <span class="hljs-title">GetRepeatCount</span><span class="hljs-params">()</span> <span class="hljs-type">const</span> </span>&#123; <span class="hljs-keyword">return</span> m_RepeatCount; &#125;<br><br><span class="hljs-function">std::string <span class="hljs-title">ToString</span><span class="hljs-params">()</span> <span class="hljs-type">const</span> <span class="hljs-keyword">override</span></span><br><span class="hljs-function"></span>&#123;<br>std::stringstream ss;<br>ss &lt;&lt; <span class="hljs-string">&quot;KeyPressedEvent: &quot;</span> &lt;&lt; m_KeyCode &lt;&lt; <span class="hljs-string">&quot; (&quot;</span> &lt;&lt; m_RepeatCount &lt;&lt; <span class="hljs-string">&quot; repeats)&quot;</span>;<br><span class="hljs-keyword">return</span> ss.<span class="hljs-built_in">str</span>();<br>&#125;<br><br><span class="hljs-built_in">EVENT_CLASS_TYPE</span>(KeyPressed)<br><br><span class="hljs-keyword">private</span>:<br><span class="hljs-type">int</span> m_RepeatCount;<br>&#125;;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">KeyReleasedEvent</span> : <span class="hljs-keyword">public</span> KeyEvent<br>&#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-built_in">KeyReleasedEvent</span>(<span class="hljs-type">int</span> keycode)<br>: <span class="hljs-built_in">KeyEvent</span>(keycode) &#123;&#125;<br><br><br><span class="hljs-function">std::string <span class="hljs-title">ToString</span><span class="hljs-params">()</span> <span class="hljs-type">const</span> <span class="hljs-keyword">override</span></span><br><span class="hljs-function"></span>&#123;<br>std::stringstream ss;<br>ss &lt;&lt; <span class="hljs-string">&quot;KeyReleasedEvent: &quot;</span> &lt;&lt; m_KeyCode;<br><span class="hljs-keyword">return</span> ss.<span class="hljs-built_in">str</span>();<br>&#125;<br><br><span class="hljs-built_in">EVENT_CLASS_TYPE</span>(KeyReleased)<br>&#125;;<br><br><br><span class="hljs-comment">// Keytyped Event</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">KeyTypedEvent</span> : <span class="hljs-keyword">public</span> KeyEvent<br>&#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-built_in">KeyTypedEvent</span>(<span class="hljs-type">int</span> keycode)<br>:<span class="hljs-built_in">KeyEvent</span>(keycode) &#123;&#125;<br><br><span class="hljs-function">std::string <span class="hljs-title">ToString</span><span class="hljs-params">()</span> <span class="hljs-type">const</span> <span class="hljs-keyword">override</span></span><br><span class="hljs-function"></span>&#123;<br>std::stringstream ss;<br>ss &lt;&lt; <span class="hljs-string">&quot;KeyTypedEvent: &quot;</span> &lt;&lt; m_KeyCode;<br><span class="hljs-keyword">return</span> ss.<span class="hljs-built_in">str</span>();<br>&#125;<br><br><span class="hljs-built_in">EVENT_CLASS_TYPE</span>(KeyTyped)<br><br>&#125;;<br><span class="hljs-comment">//--------------------namespace: Illusion ends--------------------</span><br>&#125;<br></code></pre></td></tr></table></figure><ul><li><p><strong>ToString()</strong> is used to support the log system.</p></li><li><p><strong>RepeatCount</strong> is used to distinguish whether the user has pressed the button once or kept pressing the button.</p></li></ul><h3 id="MouseEvent"><a href="#MouseEvent" class="headerlink" title="MouseEvent"></a>MouseEvent</h3><p><strong>MouseEvent</strong> class inherits from Event class. Create <strong>MouseEvent.h</strong> in <em><strong>Illusion&#x2F;src&#x2F;Engine&#x2F;Events&#x2F;…</strong></em> folder.</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">pragma</span> once</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;Events.h&quot;</span></span><br><br> <span class="hljs-comment">//--------------------namespace: Illusion starts--------------------</span><br><span class="hljs-keyword">namespace</span> Illusion<br>&#123;<br><span class="hljs-comment">// Mouse Moved Event</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">MouseMovedEvent</span> : <span class="hljs-keyword">public</span> Event<br>&#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-built_in">MouseMovedEvent</span>(<span class="hljs-type">float</span> x, <span class="hljs-type">float</span> y)<br>: <span class="hljs-built_in">m_MouseX</span>(x), <span class="hljs-built_in">m_MouseY</span>(y) &#123;&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">float</span> <span class="hljs-title">GetX</span><span class="hljs-params">()</span> <span class="hljs-type">const</span> </span>&#123; <span class="hljs-keyword">return</span> m_MouseX; &#125;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">float</span> <span class="hljs-title">GetY</span><span class="hljs-params">()</span> <span class="hljs-type">const</span> </span>&#123; <span class="hljs-keyword">return</span> m_MouseY; &#125;<br><br><span class="hljs-function">std::string <span class="hljs-title">ToString</span><span class="hljs-params">()</span> <span class="hljs-type">const</span> <span class="hljs-keyword">override</span></span><br><span class="hljs-function"></span>&#123;<br>std::stringstream ss;<br>ss &lt;&lt; <span class="hljs-string">&quot;MouseMovedEvent: &quot;</span> &lt;&lt; m_MouseX &lt;&lt; <span class="hljs-string">&quot;, &quot;</span> &lt;&lt; m_MouseY;<br><span class="hljs-keyword">return</span> ss.<span class="hljs-built_in">str</span>();<br>&#125;<br><br><span class="hljs-built_in">EVENT_CLASS_TYPE</span>(MouseMoved)<br><span class="hljs-built_in">EVENT_CLASS_CATEGORY</span>(EventCategoryMouse | EventCategoryInput)<br><br><span class="hljs-keyword">private</span>:<br><span class="hljs-type">float</span> m_MouseX, m_MouseY;<br>&#125;;<br><br><span class="hljs-comment">// Mouse Scolled Event</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">MouseScrolledEvent</span> : <span class="hljs-keyword">public</span> Event<br>&#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-built_in">MouseScrolledEvent</span>(<span class="hljs-type">float</span> xOffset, <span class="hljs-type">float</span> yOffset)<br>: <span class="hljs-built_in">m_XOffset</span>(xOffset), <span class="hljs-built_in">m_YOffset</span>(yOffset) &#123;&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">float</span> <span class="hljs-title">GetXOffset</span><span class="hljs-params">()</span> <span class="hljs-type">const</span> </span>&#123; <span class="hljs-keyword">return</span> m_XOffset; &#125;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">float</span> <span class="hljs-title">GetYOffset</span><span class="hljs-params">()</span> <span class="hljs-type">const</span> </span>&#123; <span class="hljs-keyword">return</span> m_YOffset; &#125;<br><br><span class="hljs-function">std::string <span class="hljs-title">ToString</span><span class="hljs-params">()</span> <span class="hljs-type">const</span> <span class="hljs-keyword">override</span></span><br><span class="hljs-function"></span>&#123;<br>std::stringstream ss;<br>ss &lt;&lt; <span class="hljs-string">&quot;MouseScrolledEvent: &quot;</span> &lt;&lt; <span class="hljs-built_in">GetXOffset</span>() &lt;&lt; <span class="hljs-string">&quot;, &quot;</span> &lt;&lt; <span class="hljs-built_in">GetYOffset</span>();<br><span class="hljs-keyword">return</span> ss.<span class="hljs-built_in">str</span>();<br>&#125;<br><br><span class="hljs-built_in">EVENT_CLASS_TYPE</span>(MouseScrolled)<br><span class="hljs-built_in">EVENT_CLASS_CATEGORY</span>(EventCategoryMouse | EventCategoryInput)<br><br><span class="hljs-keyword">private</span>:<br><span class="hljs-type">float</span> m_XOffset, m_YOffset;<br>&#125;;<br><br><br><span class="hljs-comment">// Mouse Button Event</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">MouseButtonEvent</span> : <span class="hljs-keyword">public</span> Event<br>&#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">int</span> <span class="hljs-title">GetMouseButton</span><span class="hljs-params">()</span> <span class="hljs-type">const</span> </span>&#123; <span class="hljs-keyword">return</span> m_Button; &#125;<br><span class="hljs-built_in">EVENT_CLASS_CATEGORY</span>(EventCategoryMouse | EventCategoryInput)<br><br><span class="hljs-keyword">protected</span>:<br><span class="hljs-built_in">MouseButtonEvent</span>(<span class="hljs-type">int</span> button)<br>: <span class="hljs-built_in">m_Button</span>(button) &#123;&#125;<br><br><span class="hljs-type">int</span> m_Button;<br>&#125;;<br><br><span class="hljs-comment">// Mouse Button Pressed Event</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">MouseButtonPressedEvent</span> : <span class="hljs-keyword">public</span> MouseButtonEvent<br>&#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-built_in">MouseButtonPressedEvent</span>(<span class="hljs-type">int</span> button)<br>: <span class="hljs-built_in">MouseButtonEvent</span>(button) &#123;&#125;<br><br><span class="hljs-function">std::string <span class="hljs-title">ToString</span><span class="hljs-params">()</span> <span class="hljs-type">const</span> <span class="hljs-keyword">override</span></span><br><span class="hljs-function"></span>&#123;<br>std::stringstream ss;<br>ss &lt;&lt; <span class="hljs-string">&quot;MouseButtonPressedEvent: &quot;</span> &lt;&lt; m_Button;<br><span class="hljs-keyword">return</span> ss.<span class="hljs-built_in">str</span>();<br>&#125;<br><br><span class="hljs-built_in">EVENT_CLASS_TYPE</span>(MouseButtonPressed)<br>&#125;;<br><br><span class="hljs-comment">// Mouse Button Released Event</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">MouseButtonReleasedEvent</span> : <span class="hljs-keyword">public</span> MouseButtonEvent<br>&#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-built_in">MouseButtonReleasedEvent</span>(<span class="hljs-type">int</span> button)<br>: <span class="hljs-built_in">MouseButtonEvent</span>(button) &#123;&#125;<br><br><span class="hljs-function">std::string <span class="hljs-title">ToString</span><span class="hljs-params">()</span> <span class="hljs-type">const</span> <span class="hljs-keyword">override</span></span><br><span class="hljs-function"></span>&#123;<br>std::stringstream ss;<br>ss &lt;&lt; <span class="hljs-string">&quot;MouseButtonReleasedEvent: &quot;</span> &lt;&lt; m_Button;<br><span class="hljs-keyword">return</span> ss.<span class="hljs-built_in">str</span>();<br>&#125;<br><br><span class="hljs-built_in">EVENT_CLASS_TYPE</span>(MouseButtonReleased)<br>&#125;;<br><br><span class="hljs-comment">//--------------------namespace: Illusion ends--------------------</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="AppEvent"><a href="#AppEvent" class="headerlink" title="AppEvent"></a>AppEvent</h3><p><strong>AppEvent</strong> class inherits from Event class. It is used to handle the <strong>events that are related to windows</strong>. Create <strong>AppEvent.h</strong> in <em><strong>Illusion&#x2F;src&#x2F;Engine&#x2F;Events&#x2F;…</strong></em> folder.</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">pragma</span> once</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;Events.h&quot;</span></span><br><br> <span class="hljs-comment">//--------------------namespace: Illusion starts--------------------</span><br><span class="hljs-keyword">namespace</span> Illusion<br>&#123;<br><span class="hljs-comment">// Window Resize Event</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">WindowResizeEvent</span> : <span class="hljs-keyword">public</span> Event<br>&#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-built_in">WindowResizeEvent</span>(<span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> width, <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> height)<br>: <span class="hljs-built_in">m_Width</span>(width), <span class="hljs-built_in">m_Height</span>(height) &#123;&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> <span class="hljs-title">GetWidth</span><span class="hljs-params">()</span> <span class="hljs-type">const</span> </span>&#123; <span class="hljs-keyword">return</span> m_Width; &#125;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> <span class="hljs-title">GetHeight</span><span class="hljs-params">()</span> <span class="hljs-type">const</span> </span>&#123; <span class="hljs-keyword">return</span> m_Height; &#125;<br><br><span class="hljs-function">std::string <span class="hljs-title">ToString</span><span class="hljs-params">()</span> <span class="hljs-type">const</span> <span class="hljs-keyword">override</span></span><br><span class="hljs-function"></span>&#123;<br>std::stringstream ss;<br>ss &lt;&lt; <span class="hljs-string">&quot;WindowResizeEvent: &quot;</span> &lt;&lt; m_Width &lt;&lt; <span class="hljs-string">&quot;, &quot;</span> &lt;&lt; m_Height;<br><span class="hljs-keyword">return</span> ss.<span class="hljs-built_in">str</span>();<br>&#125;<br><br><span class="hljs-built_in">EVENT_CLASS_TYPE</span>(WindowResize)<br><span class="hljs-built_in">EVENT_CLASS_CATEGORY</span>(EventCategoryApplication)<br><span class="hljs-keyword">private</span>:<br><span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> m_Width, m_Height;<br>&#125;;<br><br><span class="hljs-comment">// Window Close Event</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">WindowCloseEvent</span> : <span class="hljs-keyword">public</span> Event<br>&#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-built_in">WindowCloseEvent</span>() &#123;&#125;<br><span class="hljs-built_in">EVENT_CLASS_TYPE</span>(WindowClose)<br><span class="hljs-built_in">EVENT_CLASS_CATEGORY</span>(EventCategoryApplication)<br>&#125;;<br><br><span class="hljs-comment">// App Tick Event</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">AppTickEvent</span> : <span class="hljs-keyword">public</span> Event<br>&#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-built_in">AppTickEvent</span>() &#123;&#125;<br><br><span class="hljs-built_in">EVENT_CLASS_CATEGORY</span>(EventCategoryApplication)<br>&#125;;<br><br><span class="hljs-comment">// App Update Event</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">AppUpdateEvent</span> : <span class="hljs-keyword">public</span> Event<br>&#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-built_in">AppUpdateEvent</span>() &#123;&#125;<br><br><span class="hljs-built_in">EVENT_CLASS_TYPE</span>(AppUpdate)<br><span class="hljs-built_in">EVENT_CLASS_CATEGORY</span>(EventCategoryApplication)<br>&#125;;<br><br><span class="hljs-comment">// App Render Event</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">AppRenderEvent</span> : <span class="hljs-keyword">public</span> Event<br>&#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-built_in">AppRenderEvent</span>() &#123;&#125;<br><br><span class="hljs-built_in">EVENT_CLASS_TYPE</span>(AppRender)<br><span class="hljs-built_in">EVENT_CLASS_CATEGORY</span>(EventCategoryApplication)<br>&#125;;<br>&#125;<br></code></pre></td></tr></table></figure><hr><h2 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h2><p>So far, we have completed a simple event system. In order to use it, we could add some code in <strong>Application.cpp</strong>:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;pch.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;Application.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;Engine/Core/Log/Log.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;Engine/Events/Events.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;Engine/Events/AppEvent.h&quot;</span></span><br><br><span class="hljs-keyword">namespace</span> Illusion <br>&#123;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Application::Run</span><span class="hljs-params">()</span> </span><br><span class="hljs-function">    </span>&#123;<br><span class="hljs-function">WindowResizeEvent <span class="hljs-title">e</span><span class="hljs-params">(<span class="hljs-number">1280</span>,<span class="hljs-number">720</span>)</span></span>;<br><span class="hljs-built_in">ENGINE_CORE_TRACE</span>(e);<br><span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Game Engine</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Original</tag>
      
      <tag>C++</tag>
      
      <tag>Game Development</tag>
      
      <tag>Computer Graphics</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Illusion Engine 03 - Log System</title>
    <link href="/LogSystem/"/>
    <url>/LogSystem/</url>
    
    <content type="html"><![CDATA[<h2 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h2><p>To have better support for the debugging of our game engine, it is necessary to have helper modules such as a logging system built before we start to code.</p><p>A log system has many functions. It can record everything that happened to the program, which help us get rid of so many breakpoints and <strong>easily locate the problem</strong> just by analyzing the log.</p><p>In addition, when we just want to confirm whether a certain function is called, the log system allows us to know the result <strong>without interrupting the program</strong>.</p><p>Most importantly, the log system helps us <strong>distinguish the severity of the information</strong>. For example, warning information is displayed in yellow, error information is displayed in red, etc.</p><hr><h2 id="Implementation"><a href="#Implementation" class="headerlink" title="Implementation"></a>Implementation</h2><p>Although writing a customized log library is not that hard, I decided to use <strong>SpdLog library</strong> which is a fast C++ log library to build our log system. The library is in <em><strong>Illusion&#x2F;Lib&#x2F;…</strong></em> folder and configured in <strong>premake.lua</strong> file.(The configuration of third-party library is in article <a href="https://rigellm.github.io/Preparation/">Preparsation</a>)</p><h3 id="Log-h"><a href="#Log-h" class="headerlink" title="Log.h"></a>Log.h</h3><p>To build the log system, create a <strong>.h</strong> file called Log.h in <em><strong>Illusion&#x2F;src&#x2F;Engine&#x2F;Core&#x2F;Log&#x2F;…</strong></em> folder and enter code:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">pragma</span> once</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;Engine/Core/Core.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;spdlog/spdlog.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;spdlog/fmt/ostr.h&quot;</span></span><br><br> <span class="hljs-comment">//--------------------namespace: Illusion starts--------------------</span><br><span class="hljs-keyword">namespace</span> Illusion<br>&#123;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Log</span><br>&#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-comment">//Initialize the logging system</span><br><span class="hljs-comment">//Set up loggers for both engine and application</span><br><span class="hljs-function"><span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title">Init</span><span class="hljs-params">()</span></span>;<br><br><span class="hljs-keyword">inline</span> <span class="hljs-type">static</span> std::shared_ptr &lt;spdlog::logger&gt;&amp; <span class="hljs-built_in">GetCoreLogger</span>() &#123; <span class="hljs-keyword">return</span> s_CoreLogger; &#125;;<br><span class="hljs-keyword">inline</span> <span class="hljs-type">static</span> std::shared_ptr &lt;spdlog::logger&gt;&amp; <span class="hljs-built_in">GetClientLogger</span>() &#123; <span class="hljs-keyword">return</span> s_ClientLogger; &#125;;<br><br><span class="hljs-keyword">private</span>:<br><span class="hljs-comment">//Two loggers: Logger for engine and logger for application</span><br><span class="hljs-type">static</span> std::shared_ptr &lt;spdlog::logger&gt; s_CoreLogger;<br><span class="hljs-type">static</span> std::shared_ptr &lt;spdlog::logger&gt; s_ClientLogger;<br><br><br>&#125;;<br><span class="hljs-comment">//--------------------namespace: Illusion ends--------------------</span><br>&#125;<br><br><span class="hljs-comment">//Core Log Macros</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> ENGINE_CORE_TRACE(...)::Illusion::Log::GetCoreLogger()-&gt;trace(__VA_ARGS__)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> ENGINE_CORE_INFO(...)::Illusion::Log::GetCoreLogger()-&gt;info(__VA_ARGS__)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> ENGINE_CORE_WARN(...)::Illusion::Log::GetCoreLogger()-&gt;warn(__VA_ARGS__)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> ENGINE_CORE_ERROR(...)::Illusion::Log::GetCoreLogger()-&gt;<span class="hljs-keyword">error</span>(__VA_ARGS__)</span><br><br><span class="hljs-comment">//Client Log Macros  </span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> ENGINE_CLIENT_TRACE(...)::Illusion::Log::GetClientLogger()-&gt;trace(__VA_ARGS__)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> ENGINE_CLIENT_INFO(...)::Illusion::Log::GetClientLogger()-&gt;info(__VA_ARGS__)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> ENGINE_CLIENT_WARN(...)::Illusion::Log::GetClientLogger()-&gt;warn(__VA_ARGS__)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> ENGINE_CLIENT_ERROR(...)::Illusion::Log::GetClientLogger()-&gt;<span class="hljs-keyword">error</span>(__VA_ARGS__)</span><br></code></pre></td></tr></table></figure><ul><li>For Illuison Engine, I chose to use a <em><strong>singleton static log system</strong></em> that is (due to its static nature) always available throughout the project.<ul><li>Using a singleton class with static functionality has several advantages and disadvantages, with its disadvantages mostly being the loss of several OOP properties and less control over construction&#x2F;destruction. However, for relatively small projects like this it is easy to work with.</li></ul></li><li>The difference between CoreLogger and ClientLogger is <strong>where the Log occurs</strong>. Generally, all logs from the engine should be CoreLog, and all logs from the Application should be ClientLog.</li><li>Then we only need to encapsulate some corresponding Macros:</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">define</span> ENGINE_CORE_TRACE(...)::Illusion::Log::GetCoreLogger()-&gt;trace(__VA_ARGS__)</span><br></code></pre></td></tr></table></figure><ul><li>Here, <strong>(…)</strong> represents <strong>the Omit parameter</strong> inside, and <strong>__ VA_ARGS __</strong> will pass the content inside to the corresponding function.</li><li><strong>::</strong> is the <strong>Scope Resolution Operator</strong>. Adding a double colon before Illusion ensures that no matter where it is called, it will be searched from the Global Scope.</li></ul><h3 id="Log-cpp"><a href="#Log-cpp" class="headerlink" title="Log.cpp"></a>Log.cpp</h3><p>The code inside Log.cpp looks like this:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;pch.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;Log.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;spdlog/sinks/stdout_color_sinks.h&quot;</span></span><br><br> <span class="hljs-comment">//--------------------namespace: Illusion starts--------------------</span><br><span class="hljs-keyword">namespace</span> Illusion<br>&#123;<br>std::shared_ptr &lt;spdlog::logger&gt; Log::s_CoreLogger;<br>std::shared_ptr &lt;spdlog::logger&gt; Log::s_ClientLogger;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Log::Init</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-comment">//Set up all the logging pattern</span><br>spdlog::<span class="hljs-built_in">set_pattern</span>(<span class="hljs-string">&quot;%^[%T] %n: %v%$&quot;</span>);<br><br><span class="hljs-comment">//Set up the Logger for game engine</span><br>s_CoreLogger = spdlog::<span class="hljs-built_in">stdout_color_mt</span>(<span class="hljs-string">&quot;ENGINE&quot;</span>);<br>s_CoreLogger-&gt;<span class="hljs-built_in">set_level</span>(spdlog::level::trace);<br><br><span class="hljs-comment">//Set up Logger for game application</span><br>s_ClientLogger = spdlog::<span class="hljs-built_in">stdout_color_mt</span>(<span class="hljs-string">&quot;APP&quot;</span>);<br>s_ClientLogger-&gt;<span class="hljs-built_in">set_level</span>(spdlog::level::trace);<br>&#125;<br><span class="hljs-comment">//--------------------namespace: Illusion ends--------------------</span><br>&#125;<br></code></pre></td></tr></table></figure><ul><li>At the start of Log.cpp, s_CoreLogger and s_ClientLogger are initialized. Since they are <strong>static members</strong> in Log class, if they are not initialized, an <strong>unresolved external link problem (LNK2001)</strong> will be caused when calling GetCoreLogger() or GetClientLogger().</li><li>The <strong>format of the Log</strong> is set by following code. %^ to %$ is the <strong>Color Range</strong>, the text color in this range will be different, [%T] gives us the <strong>current time</strong> in HH:MM:SS format, %n is the <strong>name of the current logger</strong>, %v is the actual <strong>text content</strong>.</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">//Set up all the logging pattern</span><br>spdlog::<span class="hljs-built_in">set_pattern</span>(<span class="hljs-string">&quot;%^[%T] %n: %v%$&quot;</span>);<br></code></pre></td></tr></table></figure><img src="/LogSystem/Log.png" class="" title="Log Format"><hr><h2 id="Use-in-Project"><a href="#Use-in-Project" class="headerlink" title="Use in Project"></a>Use in Project</h2><h3 id="EntryPoint-h"><a href="#EntryPoint-h" class="headerlink" title="EntryPoint.h"></a>EntryPoint.h</h3><p>To use the log system in our project, we could just initialize it at the start of our program:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">pragma</span> once</span><br><br><span class="hljs-function"><span class="hljs-keyword">extern</span> Illusion::Application* <span class="hljs-title">Illusion::CreateApplication</span><span class="hljs-params">()</span></span>;<br><br><span class="hljs-comment">//The main function for the whole application</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">char</span>** argv)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-comment">//Initialization of the Logging system</span><br>Illusion::Log::<span class="hljs-built_in">Init</span>();<br><span class="hljs-built_in">ENGINE_CORE_WARN</span>(<span class="hljs-string">&quot;--------------------Logging System Initialized--------------------&quot;</span>);<br><br><span class="hljs-comment">//Create  the Game app</span><br><span class="hljs-keyword">auto</span> app = Illusion::<span class="hljs-built_in">CreateApplication</span>();<br><br><span class="hljs-comment">//Start the Game app</span><br>app-&gt;<span class="hljs-built_in">Run</span>();<br><br><span class="hljs-comment">//Delete the Game app</span><br><span class="hljs-keyword">delete</span> app;<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>As the result, a log informatin would be printed in the console:</p><img src="/LogSystem/Result.png" class="" title="Initialization Result"><h3 id="Engine-h"><a href="#Engine-h" class="headerlink" title="Engine.h"></a>Engine.h</h3><p>Our last step is to include the Log system in Engine.h. So that our application could use it wherever we want.</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">pragma</span> once</span><br><br><span class="hljs-comment">// For use in applications</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;Engine/Core/Application/Application.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;Engine/Core/Log/Log.h&quot;</span></span><br></code></pre></td></tr></table></figure><hr><h2 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h2><p>So far, we have completed the Log System. Where needed in the future, we could simply use code like this:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-built_in">ENGINE_CORE_INFO</span>(<span class="hljs-string">&quot;Window Created: &#123;0&#125; (&#123;1&#125;,&#123;2&#125;)&quot;</span>, m_Data.Title, m_Data.Width, m_Data.Height);<br></code></pre></td></tr></table></figure><p>to get whatever information we want.</p>]]></content>
    
    
    <categories>
      
      <category>Game Engine</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Original</tag>
      
      <tag>C++</tag>
      
      <tag>Game Development</tag>
      
      <tag>Computer Graphics</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Illusion Engine 02 - EntryPoint</title>
    <link href="/EntryPoint/"/>
    <url>/EntryPoint/</url>
    
    <content type="html"><![CDATA[<h2 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h2><p>As we all know, every C++ program starts with a main function. However, for a game engine, the position of the main function, the structure of the program, and the logical connection between the engine and the game application need to be carefully designed.</p><p>To make life easier for game developers, we want to <strong>hide the details of how the engine works</strong> from them. In this way, all they need to consider is what <strong>objects</strong> are in the game world, what <strong>properties</strong> these objects have, and how the objects <strong>interact</strong> with each other.</p><p>It can be seen that the main function <em><strong>should be put into the game engine</strong></em>. Developers only need to <strong>create a game instance</strong>, describe the game world, and hand over the update, rendering, resource recovery, and all underlying operations to the engine.</p><p>Also to better integrate the engine and the game, we need to provide developers with <strong>a template of the game instance</strong> (the template here does not refer to the template in C++, but the framework in the popular sense), telling them how to describe the game world.</p><p>As a result, the including structure of the project should look like this:</p><img src="/EntryPoint/Structure.png" class="" title="The Structure of the Project"><ul><li>Application.h&#x2F;.cpp contains a class named Application, which is the template of the game instance. It handles how the game updates.</li><li>Game.cpp contains a customized class inherited from class Application. This is the file where developers describe the game world.</li><li>EntryPoint.h contains the main function. It is the entry of the whole program.</li><li>Engine.h and Core.h are both helper files. Engine.h contains all the header files that the engine has and Core.h defines some helper macros to help us to develop the engine.</li></ul><hr><h2 id="Implementation"><a href="#Implementation" class="headerlink" title="Implementation"></a>Implementation</h2><h3 id="Application-h-x2F-cpp"><a href="#Application-h-x2F-cpp" class="headerlink" title="Application.h&#x2F;.cpp"></a>Application.h&#x2F;.cpp</h3><p>Firstly, we have to create two files (<strong>.cpp&#x2F;.h</strong>) in <em><strong>Illusion&#x2F;src&#x2F;Engine&#x2F;Core&#x2F;Application&#x2F;…</strong></em> folder. These files would contain our Application class.</p><p>Since Application is the template for the game instance, it should have the following members:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;Engine/Core/Core.h&quot;</span></span><br><br><span class="hljs-keyword">namespace</span> Illusion <br>&#123;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Application</span> <br>    &#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-built_in">Application</span>();<br><span class="hljs-keyword">virtual</span> ~<span class="hljs-built_in">Application</span>();<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Run</span><span class="hljs-params">()</span></span>;<br>&#125;;<br><br><span class="hljs-function">Application* <span class="hljs-title">CreateApplication</span><span class="hljs-params">()</span></span>;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>Besides basic constructer and destructer, there’s also a function called Run(), in which we want our Game starts.</li><li>CreateApplication() is the Creation function of the application. This function should be <em><strong>implement by the user themselves</strong></em> inside Game.cpp since we don’t know what they will call their game application and what they will do with it. There cannot be a uniform implementation of the creation function.</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;Application.h&quot;</span></span><br><br><span class="hljs-keyword">namespace</span> Illusion <br>&#123;<br>Application::<span class="hljs-built_in">Application</span>() <br>    &#123;<br>&#125;<br><br>Application::~<span class="hljs-built_in">Application</span>() <br>    &#123;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Application::Run</span><span class="hljs-params">()</span> </span><br><span class="hljs-function">    </span>&#123;<br><span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>Run() contains the <strong>game loop</strong> which is a while-loop.</li></ul><h3 id="Game-cpp"><a href="#Game-cpp" class="headerlink" title="Game.cpp"></a>Game.cpp</h3><p>Inside <em><strong>Game&#x2F;src&#x2F;…</strong></em> folder, create a <strong>.cpp</strong> file and name it “Game”.</p><ul><li>Game.cpp contains a class called Game which is inherited from Application class. It describe what the game world looks like.</li><li><strong>extern</strong> works like <strong>#include</strong>, but the range it includes is <em>smaller</em> than #include.</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;Engine.h&gt;</span></span><br> <span class="hljs-comment">//--------------------Entry point for the application--------------------</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;Engine/Core/EntryPoint.h&gt;</span></span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Game</span> : <span class="hljs-keyword">public</span> Illusion::Application<br>&#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-built_in">Game</span>()<br>&#123;<br>&#125;<br>~<span class="hljs-built_in">Game</span>() &#123;&#125;<br>&#125;;<br><br><span class="hljs-comment">//The Creation function for the Game Application</span><br><span class="hljs-function">Illusion::Application* <span class="hljs-title">Illusion::CreateApplication</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Game</span>();<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="EntryPoint-h"><a href="#EntryPoint-h" class="headerlink" title="EntryPoint.h"></a>EntryPoint.h</h3><p>For the entry point of the program, we have to create a <strong>.h</strong> file called “EntryPoint” in <em><strong>Illusion&#x2F;src&#x2F;Engine&#x2F;Core…</strong></em> folder.</p><ul><li>EntryPoint.h contains the main function of the whole program. It is the entry of the game.</li><li>CreateApplication() is declared and called here.</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-function"><span class="hljs-keyword">extern</span> Illusion::Application* <span class="hljs-title">Illusion::CreateApplication</span><span class="hljs-params">()</span></span>;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">char</span>** argv)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-comment">//Creation of the Game app</span><br><span class="hljs-keyword">auto</span> app = Illusion::<span class="hljs-built_in">CreateApplication</span>();<br><br><span class="hljs-comment">//Start the Game app</span><br>app-&gt;<span class="hljs-built_in">Run</span>();<br><br><span class="hljs-comment">//Delete the Game app</span><br><span class="hljs-keyword">delete</span> app;<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="Core-h"><a href="#Core-h" class="headerlink" title="Core.h"></a>Core.h</h3><p>Core.h is a helper file, and it belongs to the core of the engine. So create Core.h file in <em><strong>Illusion&#x2F;src&#x2F;Engine&#x2F;Core&#x2F;…</strong></em> folder.</p><p>Core.h contains some <strong>helper macros and definitions</strong>, such as ILLUSION_CORE_ASSERTS, ENGINE_BIND_EVENT_FN(fn), and so on. We would talk about them later.</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;memory&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> ILLUSION_ENABLE_ASSERTS</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> ILLUSION_CLIENT_ASSERT(x, ...) &#123; <span class="hljs-keyword">if</span>(!(x)) &#123; ENGINE_CLIENT_ERROR(<span class="hljs-string">&quot;Assertion Failed: &#123;0&#125;&quot;</span>, __VA_ARGS__); __debugbreak(); &#125; &#125;</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> ILLUSION_CORE_ASSERT(x, ...) &#123; <span class="hljs-keyword">if</span> (!(x)) &#123; ENGINE_CORE_ERROR(<span class="hljs-string">&quot;Assertion Failed: &#123;0&#125;&quot;</span>, __VA_ARGS__); __debugbreak(); &#125; &#125;</span><br><span class="hljs-meta">#<span class="hljs-keyword">else</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> ILLUSION_CLIENT_ASSERT(x, ...)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> ILLUSION_CORE_ASSERT(x, ...)</span><br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><br><span class="hljs-comment">//move 1 to the left by x bit, used in creating a bitfield</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> BIT(x) (1 &lt;&lt; x)</span><br><br><span class="hljs-comment">// Macro that generate a callable function which is like a pointer to the funtion fn</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> ENGINE_BIND_EVENT_FN(fn) std::bind(&amp;fn, this, std::placeholders::_1)</span><br><br><span class="hljs-keyword">namespace</span> Illusion<br>&#123;<br><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> T&gt;<br><span class="hljs-keyword">using</span> Scope = std::unique_ptr&lt;T&gt;;<br><br><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> T&gt;<br><span class="hljs-keyword">using</span> Ref = std::shared_ptr&lt;T&gt;;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="Engine-h"><a href="#Engine-h" class="headerlink" title="Engine.h"></a>Engine.h</h3><p>Create the Engine.h file in <em><strong>Illusion&#x2F;src…</strong></em> folder. Finally, the connection work is done here. The structure mentioned in the Introduction is completed.</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">// FOR USE BY OTHER APPLICATIONS</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;Engine/Core/Application/Application.h&quot;</span></span><br></code></pre></td></tr></table></figure><hr><h2 id="Pre-compile-Header"><a href="#Pre-compile-Header" class="headerlink" title="Pre-compile Header"></a>Pre-compile Header</h2><p>Pre-compile header is know as <strong>PCH</strong> file. PCH can compile header files into <strong>intermediate objects</strong> and store them in the disk. Therefore, as long as these header files are not changed, they <em><strong>do not need to be recompiled</strong></em> in the next compilation, which can save us a lot of time. Therefore, for #include that is used in almost every .cpp file (usually C++ standard library), we can put them in the PCH for compilation.</p><p>Inside <em><strong>Illusion&#x2F;src&#x2F;Engine&#x2F;…</strong></em> folder, create two files (.cpp&#x2F;.h) and name them pch. For <strong>pch.h</strong>, enter code:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">pragma</span> once</span><br><span class="hljs-comment">//--------------------C++ Standard Library--------------------</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;memory&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;utility&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;functional&gt;</span></span><br><br><span class="hljs-comment">//--------------------C++ Standard Templates--------------------</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sstream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;vector&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;array&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;unordered_map&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;unordered_set&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;Windows.h&gt;</span></span><br></code></pre></td></tr></table></figure><p>For <strong>pch.cpp</strong>, enter code:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;pch.h&quot;</span></span><br></code></pre></td></tr></table></figure><p>Although the code in pch.cpp seems useless, Visual Studio needs a source file that included pch.h in order to compile the pre-compile header.</p><p>We have already enabled the pre-compile header feature for <strong>Illusion Project</strong> in the premake.lua in the <a href="https://rigellm.github.io/Preparation/">Preparation</a>.</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs lua"><span class="hljs-comment">-- Define the precompile header</span><br>    pchheader <span class="hljs-string">&quot;pch.h&quot;</span><br>    pchsource <span class="hljs-string">&quot;Illusion/src/pch.cpp&quot;</span><br></code></pre></td></tr></table></figure><p>So, to use the pre-compile header, we only have to include pch.h at the start of every cpp file in <strong>Illusion Project</strong>:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;pch.h&quot;</span></span><br></code></pre></td></tr></table></figure><p>For the code we have now, we only need to change the <strong>Application.cpp</strong> file.</p><h2 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h2><p>So far, we have completed the creation of the structure between the game and the engine, separated the tedious include work to Engine.h, and handed over the creation, update, and destruction of the game instance to EntryPoint.h in Engine.h, and abstracted the internal behavior by the Application class. After such a design, the details of engine operation are well hidden, and the work of game developers is greatly simplified.</p>]]></content>
    
    
    <categories>
      
      <category>Game Engine</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Original</tag>
      
      <tag>C++</tag>
      
      <tag>Game Development</tag>
      
      <tag>Computer Graphics</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Bash Learning 01</title>
    <link href="/BashLearning01/"/>
    <url>/BashLearning01/</url>
    
    <content type="html"><![CDATA[<h2 id="Popd-x2F-Pushd"><a href="#Popd-x2F-Pushd" class="headerlink" title="Popd&#x2F;Pushd"></a>Popd&#x2F;Pushd</h2><p>These two commands are usually used to <strong>change the directoy</strong>.</p><ul><li><p>Pushd</p><ul><li>Move to a certain directory, and store the current directory at the <strong>top</strong> of a stack.</li></ul></li><li><p>Popd</p><ul><li>Read the directory from the stack, move to it, and then delete the directory from the stack.</li></ul></li></ul><p>The <strong>first time</strong> using Pushd, the current directory would be stored at the bottom of the stack since the stack is empty. If the command is used again, another directory would be stored on top of the first directory.</p><p>Example:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs bash">@<span class="hljs-built_in">echo</span> off<br>Echo current directory：%<span class="hljs-built_in">cd</span>% <br><span class="hljs-built_in">pushd</span> C:\Intel\Logs <br>Echo current directory：%<span class="hljs-built_in">cd</span>% <br><span class="hljs-built_in">pushd</span> C:\Download <br>Echo current directory：%<span class="hljs-built_in">cd</span>% <br><span class="hljs-built_in">pushd</span> C:\WINDOWS <br>Echo current directory：%<span class="hljs-built_in">cd</span>% <br><span class="hljs-built_in">popd</span> <br>Echo current directory：%<span class="hljs-built_in">cd</span>% <br><span class="hljs-built_in">popd</span> <br>Echo current directory：%<span class="hljs-built_in">cd</span>% <br><span class="hljs-built_in">popd</span> <br>Echo current directory：%<span class="hljs-built_in">cd</span>%<br></code></pre></td></tr></table></figure><p>Result:</p><img src="/BashLearning01/dirResult.png" class="" title="Running Result"><hr><h2 id="Return-Value"><a href="#Return-Value" class="headerlink" title="Return Value"></a>Return Value</h2><p>If we want to get the return value of a command and store it in a variable, usually we use the following command:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-keyword">for</span> /f <span class="hljs-string">&quot;delims=&quot;</span> %%returnvalue <span class="hljs-keyword">in</span> (<span class="hljs-string">&#x27;command&#x27;</span>) <span class="hljs-keyword">do</span> <span class="hljs-built_in">set</span> variable=%%returnvalue<br></code></pre></td></tr></table></figure><p><em><strong>command</strong></em> represents the command which we want to get the return value from. <em><strong>variable</strong></em> is where we store the return value. <em><strong>returnvalue</strong></em> would be ultimately set to the return value of this command.</p><p>To retrieve the value, we could use the following command:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">%variable%<br></code></pre></td></tr></table></figure><p>Example:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">pushd</span> C:<br><span class="hljs-built_in">cd</span> Program Files (x86)\Microsoft Visual Studio\Installer<br><span class="hljs-keyword">for</span> /f <span class="hljs-string">&quot;delims=&quot;</span> %%t <span class="hljs-keyword">in</span> (<span class="hljs-string">&#x27;vswhere.exe -property catalog_productLineVersion&#x27;</span>) <span class="hljs-keyword">do</span> <span class="hljs-built_in">set</span> version=%%t<br><span class="hljs-built_in">popd</span><br><span class="hljs-built_in">cd</span> ..\<br>call Lib\premake5\Premake5.exe vs%version%<br>PAUSE<br></code></pre></td></tr></table></figure><p>Result:</p><img src="/BashLearning01/ReturnResult.png" class="" title="Running Result">]]></content>
    
    
    <categories>
      
      <category>Bash Notes</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Original</tag>
      
      <tag>Bash</tag>
      
      <tag>Windows</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Illusion Engine 01 - Preparation</title>
    <link href="/Preparation/"/>
    <url>/Preparation/</url>
    
    <content type="html"><![CDATA[<h2 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h2><p>This article is aimed at doing all the preparation work before coding. It includes the construction of the project structure, the configuration of the project, and the introduction to third-party libraries.</p><h2 id="Creating-the-project"><a href="#Creating-the-project" class="headerlink" title="Creating the project"></a>Creating the project</h2><p>The recommended IDE is visual studio 2022. This project also works for Visual Studio 2017 and 2019. The test on other IDE hasn’t been done.</p><p>Create a static library as our engine project, so that it could be statically linked to our game application.</p><img src="/Preparation/IDE.png" class="" title="Visual Studio 2022"><p>This project would become our engine project. Other than that, we have to create an empty project in this solution which will become our game application.</p><p>Here I’ll name the engine project “Illusion”.</p><img src="/Preparation/Solution.png" class="" title="Illusion &amp; Game"><hr><h2 id="Project-Structure"><a href="#Project-Structure" class="headerlink" title="Project Structure"></a>Project Structure</h2><p>Game and Illusion could be included in a single folder, such as Root. In my project, I included them in a folder called Collection. So the structure looks like this:</p><img src="/Preparation/CollectionFolder.png" class="" title="The structure of Collection folder"><ul><li>Game<ul><li>The Game project, includes: src&#x2F;… folder, assets&#x2F;shaders&#x2F;… folder, and assets&#x2F;textures&#x2F;… folder.</li><li>The src folder contains all the source code for the game application</li><li>The shaders folder contains customized shaders and the textures folder contains all kinds of texture resources.</li></ul></li></ul><img src="/Preparation/GameFolder.png" class="" title="The Game Folder"><ul><li>Illusion<ul><li>The Illusion project, includes: Lib&#x2F;… folder, and src&#x2F;Engine&#x2F;… folder</li><li>In the src folder, the source code is separated into different folders based on their function, such as Core, Event, Renderer, etc.</li><li>The content in the Lib folder would be explained in the third parties part below.</li></ul></li></ul><img src="/Preparation/IllusionFolder.png" class="" title="The Illusion Folder"><ul><li>Lib<ul><li>The third-party library or tools that are not necessary for the Illusion Engine and Game Application, but is helpful when we build the whole project, such as premake, cmake, etc.</li><li>Either Illusion or Game could be executed without the existence of premake, but premake could help us get rid of configuring the project over and over again.</li></ul></li></ul><img src="/Preparation/LibFolder.png" class="" title="The Lib Folder"><ul><li>Scripts<ul><li>The bat files that calls premake or clean up the project.</li></ul></li></ul><img src="/Preparation/ScriptsFolder.png" class="" title="The Scripts Folder"><p>As a result, the final structure of the project looks like this:</p><figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs gauss">Collection<br>├─Game<br>│  ├─assets<br>│  │  ├─shaders<br>│  │  └─textures<br>│  └─src<br>├─Illusion<br>│  ├─<span class="hljs-keyword">Lib</span><br>│  │  ├─Glad<br>│  │  ├─GLFW<br>│  │  ├─<span class="hljs-built_in">glm</span><br>│  │  ├─imgui<br>│  │  ├─spdlog<br>│  │  └─stb_image<br>│  └─src<br>│      └─Engine<br>│          ├─Core<br>│          │  ├─Application<br>│          │  ├─Input<br>│          │  ├─Layer<br>│          │  ├─<span class="hljs-built_in">Log</span><br>│          │  ├─Resource<br>│          │  ├─Utils<br>│          │  └─<span class="hljs-built_in">Window</span><br>│          ├─Event<br>│          ├─ImGui<br>│          └─Renderer<br>├─<span class="hljs-keyword">Lib</span><br>└─Scripts<br></code></pre></td></tr></table></figure><hr><h2 id="Third-party-Libraries"><a href="#Third-party-Libraries" class="headerlink" title="Third-party Libraries"></a>Third-party Libraries</h2><p>As of the time this article is published, the third-party library used in this project includes:</p><ul><li><a href="https://github.com/gabime/spdlog">SpdLog</a><ul><li>A fast C++ logging library.</li></ul></li><li><a href="https://github.com/glfw/glfw">GLFW</a><ul><li>GL Frame Work, a multi-platform library for OpenGL, OpenGL ES, Vulkan. Mainly used to handle input and window events.</li></ul></li><li><a href="https://github.com/Dav1dde/glad">Glad</a><ul><li>The dependency library for OpenGL, including API for OpenGL.</li></ul></li><li><a href="https://github.com/ocornut/imgui">ImGui</a><ul><li>A Bloat-free Graphical User interface for C++ with minimal dependencies. Used to build viewer and editor</li></ul></li><li><a href="https://github.com/g-truc/glm">glm</a><ul><li>A basic math library, including vector, matrix, and some other common math components.</li></ul></li><li><a href="https://github.com/premake/premake-core">Premake</a><ul><li>A command line utility that reads a scripted definition of a software project, then uses it to perform build configuration tasks or generate project files.</li></ul></li></ul><p>All of these libraries could be found on GitHub. You could click on the name of the library to jump to its page on Github.</p><p>SpdLog, GLFW, Glad, ImGui, and glm are included in Collection&#x2F;Illusion&#x2F;Lib… folder.</p><img src="/Preparation/IllusionLib.png" class="" title="Thirdparty Libraries"><p>Premake is included in Collection&#x2F;Lib&#x2F;… folder.</p><hr><h2 id="Configurations"><a href="#Configurations" class="headerlink" title="Configurations"></a>Configurations</h2><p>Since we have premake, we could add a configuration file for our projects.</p><p>Inside Collection&#x2F;… folder, create a file called “premake” and revise its extension to “.lua”.</p><p>In premake.lua, enter code:</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br></pre></td><td class="code"><pre><code class="hljs lua"><span class="hljs-comment">-- Set up a workspace, this would work for every project</span><br>workspace <span class="hljs-string">&quot;Project&quot;</span><br>    architecture <span class="hljs-string">&quot;x64&quot;</span><br><span class="hljs-comment">-- Set the starting project to be Game</span><br>    startproject <span class="hljs-string">&quot;Game&quot;</span><br><span class="hljs-comment">-- Define Build Configuration</span><br>    configurations<br>    &#123;<br>        <span class="hljs-string">&quot;Debug&quot;</span>,<br>        <span class="hljs-string">&quot;Release&quot;</span>,<br>        <span class="hljs-string">&quot;Dist&quot;</span><br>    &#125;<br><span class="hljs-comment">-- Set the output file format to be like &quot;Debug-Windows-x86_64&quot;</span><br>outputdir = <span class="hljs-string">&quot;%&#123;cfg.buildcfg&#125;-%&#123;cfg.system&#125;-%&#123;cfg.architecture&#125;&quot;</span><br><span class="hljs-comment">-- Include directories relative to the root folder (solution directory)</span><br>IncludeDir = &#123;&#125;<br>IncludeDir[<span class="hljs-string">&quot;GLFW&quot;</span>] = <span class="hljs-string">&quot;Illusion/Lib/GLFW/include&quot;</span><br>IncludeDir[<span class="hljs-string">&quot;Glad&quot;</span>] = <span class="hljs-string">&quot;Illusion/Lib/Glad/include&quot;</span><br>IncludeDir[<span class="hljs-string">&quot;ImGui&quot;</span>] = <span class="hljs-string">&quot;Illusion/Lib/imgui&quot;</span><br>IncludeDir[<span class="hljs-string">&quot;glm&quot;</span>] = <span class="hljs-string">&quot;Illusion/Lib/glm&quot;</span><br>IncludeDir[<span class="hljs-string">&quot;stb_image&quot;</span>] = <span class="hljs-string">&quot;Illusion/Lib/stb_image&quot;</span><br><span class="hljs-comment">-- Include these folders to load the configuration files at those positions</span><br>include <span class="hljs-string">&quot;Illusion/Lib/GLFW&quot;</span><br>include <span class="hljs-string">&quot;Illusion/Lib/Glad&quot;</span><br>include <span class="hljs-string">&quot;Illusion/Lib/imgui&quot;</span><br><span class="hljs-comment">-- Define Illusion Project, set the relative path, set the kind to be a static library, and set the language</span><br>project <span class="hljs-string">&quot;Illusion&quot;</span><br>    location <span class="hljs-string">&quot;Illusion&quot;</span><br>    kind <span class="hljs-string">&quot;StaticLib&quot;</span><br>    language <span class="hljs-string">&quot;C++&quot;</span><br>    cppdialect <span class="hljs-string">&quot;C++17&quot;</span><br>    staticruntime <span class="hljs-string">&quot;on&quot;</span><br><span class="hljs-comment">-- Set the output path and intermediate path</span><br>    targetdir (<span class="hljs-string">&quot;bin/&quot;</span> .. outputdir .. <span class="hljs-string">&quot;/%&#123;prj.name&#125;&quot;</span>)<br>    objdir (<span class="hljs-string">&quot;bin-int/&quot;</span> .. outputdir .. <span class="hljs-string">&quot;/%&#123;prj.name&#125;&quot;</span>)<br><span class="hljs-comment">-- Define the precompile header</span><br>    pchheader <span class="hljs-string">&quot;pch.h&quot;</span><br>    pchsource <span class="hljs-string">&quot;Illusion/src/pch.cpp&quot;</span><br><span class="hljs-comment">-- Define files that would be compiled</span><br>    files<br>    &#123;<br>        <span class="hljs-string">&quot;%&#123;prj.name&#125;/src/**.h&quot;</span>,<br>        <span class="hljs-string">&quot;%&#123;prj.name&#125;/src/**.cpp&quot;</span>,<br>        <span class="hljs-string">&quot;%&#123;prj.name&#125;/Lib/stb_image/**.h&quot;</span>,<br>        <span class="hljs-string">&quot;%&#123;prj.name&#125;/Lib/stb_image/**.cpp&quot;</span>,<br>        <span class="hljs-string">&quot;%&#123;prj.name&#125;/Lib/glm/glm/**.hpp&quot;</span>,<br>        <span class="hljs-string">&quot;%&#123;prj.name&#125;/Lib/glm/glm/**.inl&quot;</span>,<br>    &#125;<br><span class="hljs-comment">-- Preprocess macros</span><br>    defines<br>    &#123;<br>        <span class="hljs-string">&quot;_CRT_SECURE_NO_WARNINGS&quot;</span><br>    &#125;<br><span class="hljs-comment">-- Define include path</span><br>    includedirs<br>    &#123;<br>        <span class="hljs-string">&quot;%&#123;prj.name&#125;/src&quot;</span>,<br>        <span class="hljs-string">&quot;%&#123;prj.name&#125;/Lib/spdlog/include&quot;</span>,<br>        <span class="hljs-string">&quot;%&#123;IncludeDir.GLFW&#125;&quot;</span>,<br>        <span class="hljs-string">&quot;%&#123;IncludeDir.Glad&#125;&quot;</span>,<br>        <span class="hljs-string">&quot;%&#123;IncludeDir.ImGui&#125;&quot;</span>,<br>        <span class="hljs-string">&quot;%&#123;IncludeDir.glm&#125;&quot;</span>,<br>        <span class="hljs-string">&quot;%&#123;IncludeDir.stb_image&#125;&quot;</span><br>    &#125;<br><span class="hljs-comment">-- Link these libraries to the project</span><br>    links <br>    &#123; <br>        <span class="hljs-string">&quot;GLFW&quot;</span>,<br>        <span class="hljs-string">&quot;Glad&quot;</span>,<br>        <span class="hljs-string">&quot;ImGui&quot;</span>,<br>        <span class="hljs-string">&quot;opengl32.lib&quot;</span><br>    &#125;<br><span class="hljs-comment">-- Define some macros for different build options</span><br>    filter <span class="hljs-string">&quot;system:windows&quot;</span><br>        systemversion <span class="hljs-string">&quot;latest&quot;</span><br><br>        defines<br>        &#123;<br>            <span class="hljs-string">&quot;ILLUSION_PLATFORM_WINDOWS&quot;</span>,<br>            <span class="hljs-string">&quot;GLFW_INCLUDE_NONE&quot;</span><br>        &#125;<br><br>    filter <span class="hljs-string">&quot;configurations:Debug&quot;</span><br>        defines <span class="hljs-string">&quot;ILLUSION_DEBUG&quot;</span><br>        runtime <span class="hljs-string">&quot;Debug&quot;</span><br>        symbols <span class="hljs-string">&quot;on&quot;</span><br><br>    filter <span class="hljs-string">&quot;configurations:Release&quot;</span><br>        defines <span class="hljs-string">&quot;ILLUSION_RELEASE&quot;</span><br>        runtime <span class="hljs-string">&quot;Release&quot;</span><br>        optimize <span class="hljs-string">&quot;on&quot;</span><br><br>    filter <span class="hljs-string">&quot;configurations:Dist&quot;</span><br>        defines <span class="hljs-string">&quot;ILLUSION_DIST&quot;</span><br>        runtime <span class="hljs-string">&quot;Release&quot;</span><br>        optimize <span class="hljs-string">&quot;on&quot;</span><br><span class="hljs-comment">-- Define Game Project</span><br>project <span class="hljs-string">&quot;Game&quot;</span><br>    location <span class="hljs-string">&quot;Game&quot;</span><br>    kind <span class="hljs-string">&quot;ConsoleApp&quot;</span><br>    language <span class="hljs-string">&quot;C++&quot;</span><br>    cppdialect <span class="hljs-string">&quot;C++17&quot;</span><br>    staticruntime <span class="hljs-string">&quot;on&quot;</span><br><span class="hljs-comment">-- Set the output path and intermediate path</span><br>    targetdir (<span class="hljs-string">&quot;bin/&quot;</span> .. outputdir .. <span class="hljs-string">&quot;/%&#123;prj.name&#125;&quot;</span>)<br>    objdir (<span class="hljs-string">&quot;bin-int/&quot;</span> .. outputdir .. <span class="hljs-string">&quot;/%&#123;prj.name&#125;&quot;</span>)<br><span class="hljs-comment">-- Define files that would be compiled</span><br>    files<br>    &#123;<br>        <span class="hljs-string">&quot;%&#123;prj.name&#125;/src/**.h&quot;</span>,<br>        <span class="hljs-string">&quot;%&#123;prj.name&#125;/src/**.cpp&quot;</span><br>    &#125;<br><span class="hljs-comment">-- Define include path</span><br>    includedirs<br>    &#123;<br>        <span class="hljs-string">&quot;Illusion/Lib/spdlog/include&quot;</span>,<br>        <span class="hljs-string">&quot;Illusion/src&quot;</span>,<br>        <span class="hljs-string">&quot;Illusion/Lib&quot;</span>,<br>        <span class="hljs-string">&quot;%&#123;IncludeDir.glm&#125;&quot;</span><br>    &#125;<br><span class="hljs-comment">-- Link the engine to the project</span><br>    links<br>    &#123;<br>        <span class="hljs-string">&quot;Illusion&quot;</span><br>    &#125;<br><span class="hljs-comment">-- Define some macros for different build options</span><br>    filter <span class="hljs-string">&quot;system:windows&quot;</span><br>        systemversion <span class="hljs-string">&quot;latest&quot;</span><br><br>        defines<br>        &#123;<br>            <span class="hljs-string">&quot;ILLUSION_PLATFORM_WINDOWS&quot;</span><br>        &#125;<br><br>    filter <span class="hljs-string">&quot;configurations:Debug&quot;</span><br>        defines <span class="hljs-string">&quot;ILLUSION_DEBUG&quot;</span><br>        runtime <span class="hljs-string">&quot;Debug&quot;</span><br>        symbols <span class="hljs-string">&quot;on&quot;</span><br><br>    filter <span class="hljs-string">&quot;configurations:Release&quot;</span><br>        defines <span class="hljs-string">&quot;ILLUSION_RELEASE&quot;</span><br>        runtime <span class="hljs-string">&quot;Release&quot;</span><br>        optimize <span class="hljs-string">&quot;on&quot;</span><br><br>    filter <span class="hljs-string">&quot;configurations:Dist&quot;</span><br>        defines <span class="hljs-string">&quot;ILLUSION_DIST&quot;</span><br>        runtime <span class="hljs-string">&quot;Release&quot;</span><br>        optimize <span class="hljs-string">&quot;on&quot;</span><br></code></pre></td></tr></table></figure><p>Additionally, since we have to build those third-party libraries, they also need their configuration files.</p><p>Inside Collection&#x2F;Illusion&#x2F;Lib&#x2F;GLFW&#x2F;… folder, create a file called “premake.lua”, and enter code:</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs lua">project <span class="hljs-string">&quot;GLFW&quot;</span><br>    kind <span class="hljs-string">&quot;StaticLib&quot;</span><br>    language <span class="hljs-string">&quot;C&quot;</span><br>    targetdir (<span class="hljs-string">&quot;bin/&quot;</span> .. outputdir .. <span class="hljs-string">&quot;/%&#123;prj.name&#125;&quot;</span>)<br>    objdir (<span class="hljs-string">&quot;bin-int/&quot;</span> .. outputdir .. <span class="hljs-string">&quot;/%&#123;prj.name&#125;&quot;</span>)<br>    files<br>    &#123;<br>        <span class="hljs-string">&quot;include/GLFW/glfw3.h&quot;</span>,<br>        <span class="hljs-string">&quot;include/GLFW/glfw3native.h&quot;</span>,<br>        <span class="hljs-string">&quot;src/glfw_config.h&quot;</span>,<br>        <span class="hljs-string">&quot;src/context.c&quot;</span>,<br>        <span class="hljs-string">&quot;src/init.c&quot;</span>,<br>        <span class="hljs-string">&quot;src/input.c&quot;</span>,<br>        <span class="hljs-string">&quot;src/monitor.c&quot;</span>,<br>        <span class="hljs-string">&quot;src/vulkan.c&quot;</span>,<br>        <span class="hljs-string">&quot;src/window.c&quot;</span><br>    &#125;<br>    filter <span class="hljs-string">&quot;system:windows&quot;</span><br>        systemversion <span class="hljs-string">&quot;latest&quot;</span><br>        staticruntime <span class="hljs-string">&quot;on&quot;</span><br>        files<br>        &#123;<br>            <span class="hljs-string">&quot;src/win32_init.c&quot;</span>,<br>            <span class="hljs-string">&quot;src/win32_joystick.c&quot;</span>,<br>            <span class="hljs-string">&quot;src/win32_monitor.c&quot;</span>,<br>            <span class="hljs-string">&quot;src/win32_time.c&quot;</span>,<br>            <span class="hljs-string">&quot;src/win32_thread.c&quot;</span>,<br>            <span class="hljs-string">&quot;src/win32_window.c&quot;</span>,<br>            <span class="hljs-string">&quot;src/wgl_context.c&quot;</span>,<br>            <span class="hljs-string">&quot;src/egl_context.c&quot;</span>,<br>            <span class="hljs-string">&quot;src/osmesa_context.c&quot;</span><br>        &#125;<br>        defines <br>        &#123; <br>            <span class="hljs-string">&quot;_GLFW_WIN32&quot;</span>,<br>            <span class="hljs-string">&quot;_CRT_SECURE_NO_WARNINGS&quot;</span><br>        &#125;<br>    filter &#123; <span class="hljs-string">&quot;system:windows&quot;</span>, <span class="hljs-string">&quot;configurations:Release&quot;</span> &#125;<br>        buildoptions <span class="hljs-string">&quot;/MT&quot;</span><br></code></pre></td></tr></table></figure><p>Inside Collection&#x2F;Illusion&#x2F;Lib&#x2F;Glad&#x2F;… folder, create a file called “premake.lua”, and enter the code:</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs lua">project <span class="hljs-string">&quot;Glad&quot;</span><br>    kind <span class="hljs-string">&quot;StaticLib&quot;</span><br>    language <span class="hljs-string">&quot;C&quot;</span><br>    staticruntime <span class="hljs-string">&quot;on&quot;</span><br>    targetdir (<span class="hljs-string">&quot;bin/&quot;</span> .. outputdir .. <span class="hljs-string">&quot;/%&#123;prj.name&#125;&quot;</span>)<br>    objdir (<span class="hljs-string">&quot;bin-int/&quot;</span> .. outputdir .. <span class="hljs-string">&quot;/%&#123;prj.name&#125;&quot;</span>)<br>    files<br>    &#123;<br>        <span class="hljs-string">&quot;include/glad/glad.h&quot;</span>,<br>        <span class="hljs-string">&quot;include/KHR/khrplatform.h&quot;</span>,<br>        <span class="hljs-string">&quot;src/glad.c&quot;</span><br>    &#125;<br>    includedirs<br>    &#123;<br>        <span class="hljs-string">&quot;include&quot;</span><br>    &#125;<br>    filter <span class="hljs-string">&quot;system:windows&quot;</span><br>        systemversion <span class="hljs-string">&quot;latest&quot;</span><br>    filter <span class="hljs-string">&quot;configurations:Debug&quot;</span><br>        runtime <span class="hljs-string">&quot;Debug&quot;</span><br>        symbols <span class="hljs-string">&quot;on&quot;</span><br>    filter <span class="hljs-string">&quot;configurations:Release&quot;</span><br>        runtime <span class="hljs-string">&quot;Release&quot;</span><br>        optimize <span class="hljs-string">&quot;on&quot;</span><br></code></pre></td></tr></table></figure><p>Inside Collection&#x2F;Illusion&#x2F;Lib&#x2F;ImGui&#x2F;… folder, create a file called “premake.lua”, and enter code:</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs lua">project <span class="hljs-string">&quot;ImGui&quot;</span><br>    kind <span class="hljs-string">&quot;StaticLib&quot;</span><br>    language <span class="hljs-string">&quot;C++&quot;</span><br>    cppdialect <span class="hljs-string">&quot;C++17&quot;</span><br>    targetdir (<span class="hljs-string">&quot;bin/&quot;</span> .. outputdir .. <span class="hljs-string">&quot;/%&#123;prj.name&#125;&quot;</span>)<br>    objdir (<span class="hljs-string">&quot;bin-int/&quot;</span> .. outputdir .. <span class="hljs-string">&quot;/%&#123;prj.name&#125;&quot;</span>)<br>    files<br>    &#123;<br>        <span class="hljs-string">&quot;imconfig.h&quot;</span>,<br>        <span class="hljs-string">&quot;imgui.h&quot;</span>,<br>        <span class="hljs-string">&quot;imgui.cpp&quot;</span>,<br>        <span class="hljs-string">&quot;imgui_draw.cpp&quot;</span>,<br>        <span class="hljs-string">&quot;imgui_internal.h&quot;</span>,<br>        <span class="hljs-string">&quot;imgui_widgets.cpp&quot;</span>,<br>        <span class="hljs-string">&quot;imstb_rectpack.h&quot;</span>,<br>        <span class="hljs-string">&quot;imstb_textedit.h&quot;</span>,<br>        <span class="hljs-string">&quot;imstb_truetype.h&quot;</span>,<br>        <span class="hljs-string">&quot;imgui_demo.cpp&quot;</span><br>    &#125;<br>    filter <span class="hljs-string">&quot;system:windows&quot;</span><br>        systemversion <span class="hljs-string">&quot;latest&quot;</span><br>        staticruntime <span class="hljs-string">&quot;on&quot;</span><br>    filter &#123; <span class="hljs-string">&quot;system:windows&quot;</span>, <span class="hljs-string">&quot;configurations:Release&quot;</span> &#125;<br>        buildoptions <span class="hljs-string">&quot;/MT&quot;</span><br></code></pre></td></tr></table></figure><p>After this, the configuration information for the whole project is recorded. To build the project, we only have to call premake5 and tell it the toolset that we are using:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">&gt; Lib/Premake5/Premake5.exe vs2022<br></code></pre></td></tr></table></figure><p>To simplify this procedure, we need a bat file inside Collection&#x2F;Scripts&#x2F;… folder.</p><p>Inside Build.bat, enter the code:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash">@<span class="hljs-built_in">echo</span> off<br><span class="hljs-built_in">pushd</span> C:<br><span class="hljs-built_in">cd</span> Program Files (x86)\Microsoft Visual Studio\Installer<br><span class="hljs-keyword">for</span> /f <span class="hljs-string">&quot;delims=&quot;</span> %%t <span class="hljs-keyword">in</span> (<span class="hljs-string">&#x27;vswhere.exe -property catalog_productLineVersion&#x27;</span>) <span class="hljs-keyword">do</span> <span class="hljs-built_in">set</span> version=%%t<br><span class="hljs-built_in">popd</span><br><span class="hljs-built_in">cd</span> ..\<br>call Lib\premake5\Premake5.exe vs%version%<br>PAUSE<br></code></pre></td></tr></table></figure><p>This file would figure out the version of visual studio installed on this device and pass it to premake to generate the correct version of project files such as .vs, .sln, .vcproj, etc.</p><p>Inside Clear.bat, enter the code:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> ..\<br>rd /s /q .vs<br>rd /s /q bin<br>rd /s /q bin-int<br>del /a Project.sln<br>del /a /s *.vcxproj.*<br><span class="hljs-built_in">pushd</span> Illusion\Lib\Glad<br>rd /s /q bin<br>rd /s /q bin-int<br><span class="hljs-built_in">popd</span><br><span class="hljs-built_in">pushd</span> Illusion\Lib\GLFW<br>rd /s /q bin<br>rd /s /q bin-int<br><span class="hljs-built_in">popd</span><br><span class="hljs-built_in">pushd</span> Illusion\Lib\imgui<br>rd /s /q bin<br>rd /s /q bin-int<br><span class="hljs-built_in">popd</span><br>PAUSE<br></code></pre></td></tr></table></figure><p>This file would delete all the project files, including .vs, .sln, .vcproj, etc. Only source code would be left. It is a tool that helps us clean up the project and save space.</p><p>Thus, by running Build.bat and Clear.bat, we could easily generate or clean up the project.</p><img src="/Preparation/Build.png" class="" title="Build.bat Running Result"><img src="/Preparation/Clear.png" class="" title="Clear.bat Running Result"><h2 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h2><p>So far, we have completed the configuration of the entire project. We stored the configuration information in premake.lua, and handed over the creation and cleaning of the project to the batch files to complete. By doing so, we don’t have to configure the project and struggle with the linkclude problem over and over again.</p>]]></content>
    
    
    <categories>
      
      <category>Game Engine</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Original</tag>
      
      <tag>C++</tag>
      
      <tag>Game Development</tag>
      
      <tag>Computer Graphics</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hex Converter</title>
    <link href="/HexConverter/"/>
    <url>/HexConverter/</url>
    
    <content type="html"><![CDATA[<h2 id="Background"><a href="#Background" class="headerlink" title="Background"></a>Background</h2><p>When I use OpenGL to develop a game engine and write a renderer for it, I often encounter the need to write an independent shader file and store the glsl code in a <strong>text file</strong>.</p><p>However, the file in text format is <strong>slow to read</strong>, and the file size is <strong>relatively large</strong> (even after zip compression), and at the same time, to encapsulate the shader and hide it from the engine user, I need to design a binary file format myself, and write an unique IO system for it.</p><p>In this context, the conversion between binary and decimal is particularly important. To understand the conversion between bases, I tried to use the least code to write a converter.</p><hr><h2 id="Implementation"><a href="#Implementation" class="headerlink" title="Implementation"></a>Implementation</h2><p>The main idea is to <em>first convert the input number to a <strong>decimal number</strong></em>. And then, convert the decimal number into the desired number.</p><p>The implementation looks like this:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-type">void</span> <span class="hljs-title function_">HexConverter</span><span class="hljs-params">(<span class="hljs-type">char</span>* in, <span class="hljs-type">int</span> s_in, <span class="hljs-type">char</span>* out, <span class="hljs-type">int</span> s_out)</span><br>&#123;<br>    <span class="hljs-type">int</span> v = <span class="hljs-number">0</span>, n;<br>    <span class="hljs-comment">// Convert the input into a decimal number</span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">char</span>* p = in; *p; p++)<br>        v = v * s_in + (*p - (( *p &gt;= <span class="hljs-string">&#x27;a&#x27;</span> ) ? (<span class="hljs-string">&#x27;a&#x27;</span> - <span class="hljs-number">10</span>) : <span class="hljs-string">&#x27;0&#x27;</span>));<br>    <span class="hljs-comment">// Convert the decimal number to s_out based number</span><br>    <span class="hljs-keyword">for</span>(n = <span class="hljs-number">31</span>; v &amp;&amp; n; v = v / s_out)<br>        out[n--] = (((v % s_out) &lt; <span class="hljs-number">10</span>) ? <span class="hljs-string">&#x27;0&#x27;</span> : (<span class="hljs-string">&#x27;a&#x27;</span> - <span class="hljs-number">10</span>)) + (v % s_out);<br>    <span class="hljs-comment">// Copy the answer to the output array</span><br>    memmove(out, out + n + <span class="hljs-number">1</span>, <span class="hljs-number">32</span> - n - <span class="hljs-number">1</span>);<br>    <span class="hljs-comment">// Cut the output array</span><br>    out[<span class="hljs-number">32</span> - n - <span class="hljs-number">1</span>] = <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>The converter falls into two parts:</p><ol><li>First part</li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-comment">// Convert the input into a decimal number</span><br><span class="hljs-keyword">for</span>(<span class="hljs-type">char</span>* p = in; *p; p++)<br>    v = v * s_in + (*p - (( *p &gt;= <span class="hljs-string">&#x27;a&#x27;</span> ) ? (<span class="hljs-string">&#x27;a&#x27;</span> - <span class="hljs-number">10</span>) : <span class="hljs-string">&#x27;0&#x27;</span>));<br></code></pre></td></tr></table></figure><ul><li>The first for-loop is used to convert the input into a decimal number.<ul><li>*p represents the number on each digit of the input number.</li><li>Use *p as the condition statement, so that the loop won’t stop until p points to ‘\0’ which equals false and also represents the end of the array.</li></ul></li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs C">v = v * s_in + (*p - (( *p &gt;= <span class="hljs-string">&#x27;a&#x27;</span> ) ? (<span class="hljs-string">&#x27;a&#x27;</span> - <span class="hljs-number">10</span>) : <span class="hljs-string">&#x27;0&#x27;</span>));<br></code></pre></td></tr></table></figure><ul><li>This line is where the math gets in.<ul><li>(( *p &gt;&#x3D; ‘a’ ) ? (‘a’ - 10) : ‘0’) figures out whether the digit is a character.<ul><li>If it is, this part would return <strong>‘a’ - 10</strong>. Then the right part of this code would turn into *p - ‘a’ + 10.</li><li>If it isn’t, this part would return <strong>‘0’</strong>. Then the right part of this code would turn into *p - ‘0’.</li><li>By doing so, the digit is converted to a decimal number. (0123456789abcdef is the sequence of the digits)</li></ul></li><li>This line could be simplified as: <em><strong>v &#x3D; v * s_in + decimal format of current digit</strong></em>.<ul><li>After the iteration, this line endd up like: <em><strong>v &#x3D; (…((v * s + d) * s + d) * s + d) * s … + d</strong></em>.</li><li>s_ins in each layer are cumulative, they would add up and become <em><strong>$\sum_{i&#x3D;1}^{n} v_is^{n+1-i}$</strong></em>. And this is exactly the representation of an s-based number in decimal.</li></ul></li></ul></li></ul><ol start="2"><li>Second Part</li></ol><ul><li>The algorithm follows the steps listed below:<ol><li>Divide the decimal number by s_out.</li><li>Write down the remainder (<strong>in the desired base</strong>).</li><li>Divide the result again by s_out.</li><li>Repeat steps 2 and 3 until the result is 0.</li><li>The result is the digit sequence of the remainder <strong>from the last to the first</strong>.</li></ol></li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-comment">// Convert the decimal number to s_out based number</span><br><span class="hljs-keyword">for</span>(n = <span class="hljs-number">31</span>; v &amp;&amp; n; v = v / s_out)<br>    out[n--] = (((v % s_out) &lt; <span class="hljs-number">10</span>) ? <span class="hljs-string">&#x27;0&#x27;</span> : (<span class="hljs-string">&#x27;a&#x27;</span> - <span class="hljs-number">10</span>)) + (v % s_out);<br></code></pre></td></tr></table></figure><ul><li>The second for-loop is used to convert the decimal number into the desired base.<ul><li>n is the iteration index. Since the <strong>upper bound of int is $2^{32}$</strong>, the output array cannot be longer than 32. (index range: 0-31)</li><li>v &amp;&amp; n make sure the converter won’t convert numbers bigger than $2^{32}$. n would be out of range if the input is bigger than $2^{32}$.</li><li>v &#x3D; v &#x2F; s_out represents step 1</li></ul></li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs C">out[n--] = (((v % s_out) &lt; <span class="hljs-number">10</span>) ? <span class="hljs-string">&#x27;0&#x27;</span> : (<span class="hljs-string">&#x27;a&#x27;</span> - <span class="hljs-number">10</span>)) + (v % s_out);<br></code></pre></td></tr></table></figure><ul><li>n– represents “digit sequence from the last to first”.</li><li>v % s_out is the remainder, &lt; 10 checks whether it would be a character.<ul><li>If it would, returns ‘a’ - 10 and add it with the reminder to convert it.</li><li>If it won’t, returns ‘0’ and add it with the reminder so the number will not change, only <em><strong>the type would become char</strong></em>.</li></ul></li></ul><hr><h2 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h2><p>This converter works for all base-conversion between binary, octal decimal, and hexadecimal numbers.</p><p>Test Code:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-type">char</span> out[<span class="hljs-number">33</span>];<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> s = <span class="hljs-number">2</span>; s &lt; <span class="hljs-number">36</span>; s++)<br>    &#123;<br>        HexConverter(<span class="hljs-string">&quot;abc123&quot;</span>, <span class="hljs-number">16</span>, out, s);<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;16:abc123 =&gt; %2d:%s\n&quot;</span>, s, out);<br>    &#125;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> s = <span class="hljs-number">2</span>; s &lt; <span class="hljs-number">36</span>; s++)<br>    &#123;<br>        HexConverter(<span class="hljs-string">&quot;114514&quot;</span>, <span class="hljs-number">10</span>, out, s);<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;10:114514 =&gt; %2d:%s\n&quot;</span>, s, out);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>Test Result:</p><img src="/HexConverter/Result1.png" class="" title="Test Results"><img src="/HexConverter/Result2.png" class="" title="Test Results">]]></content>
    
    
    <categories>
      
      <category>C/C++ Notes</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C</tag>
      
      <tag>Skill</tag>
      
      <tag>Algorithm</tag>
      
      <tag>Math</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
