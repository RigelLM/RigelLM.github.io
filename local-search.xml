<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Illusion Engine 02 - EntryPoint</title>
    <link href="/EntryPoint/"/>
    <url>/EntryPoint/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>Game Engine</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Original</tag>
      
      <tag>C++</tag>
      
      <tag>Game Development</tag>
      
      <tag>Computer Graphics</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Bat Learning 01</title>
    <link href="/BatLearning01/"/>
    <url>/BatLearning01/</url>
    
    <content type="html"><![CDATA[<h2 id="Popd-x2F-Pushd"><a href="#Popd-x2F-Pushd" class="headerlink" title="Popd&#x2F;Pushd"></a>Popd&#x2F;Pushd</h2><p>These two commands are usually used to <strong>change the directoy</strong>.</p><ul><li><p>Pushd</p><ul><li>Move to a certain directory, and store the current directory at the <strong>top</strong> of a stack.</li></ul></li><li><p>Popd</p><ul><li>Read the directory from the stack, move to it, and then delete the directory from the stack.</li></ul></li></ul><p>The <strong>first time</strong> using Pushd, the current directory would be stored at the bottom of the stack since the stack is empty. If the command is used again, another directory would be stored on top of the first directory.</p><p>Example:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs bash">@<span class="hljs-built_in">echo</span> off<br>Echo current directory：%<span class="hljs-built_in">cd</span>% <br><span class="hljs-built_in">pushd</span> C:\Intel\Logs <br>Echo current directory：%<span class="hljs-built_in">cd</span>% <br><span class="hljs-built_in">pushd</span> C:\Download <br>Echo current directory：%<span class="hljs-built_in">cd</span>% <br><span class="hljs-built_in">pushd</span> C:\WINDOWS <br>Echo current directory：%<span class="hljs-built_in">cd</span>% <br><span class="hljs-built_in">popd</span> <br>Echo current directory：%<span class="hljs-built_in">cd</span>% <br><span class="hljs-built_in">popd</span> <br>Echo current directory：%<span class="hljs-built_in">cd</span>% <br><span class="hljs-built_in">popd</span> <br>Echo current directory：%<span class="hljs-built_in">cd</span>%<br></code></pre></td></tr></table></figure><p>Result:</p><img src="/BatLearning01/dirResult.png" class="" title="Running Result"><hr><h2 id="Return-Value"><a href="#Return-Value" class="headerlink" title="Return Value"></a>Return Value</h2><p>If we want to get the return value of a command and store it in a variable, usually we use the following command:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-keyword">for</span> /f <span class="hljs-string">&quot;delims=&quot;</span> %%returnvalue <span class="hljs-keyword">in</span> (<span class="hljs-string">&#x27;command&#x27;</span>) <span class="hljs-keyword">do</span> <span class="hljs-built_in">set</span> variable=%%returnvalue<br></code></pre></td></tr></table></figure><p><em><strong>command</strong></em> represents the command which we want to get the return value from. <em><strong>variable</strong></em> is where we store the return value. <em><strong>returnvalue</strong></em> would be ultimately set to the return value of this command.</p><p>To retrieve the value, we could use the following command:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">%variable%<br></code></pre></td></tr></table></figure><p>Example:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">pushd</span> C:<br><span class="hljs-built_in">cd</span> Program Files (x86)\Microsoft Visual Studio\Installer<br><span class="hljs-keyword">for</span> /f <span class="hljs-string">&quot;delims=&quot;</span> %%t <span class="hljs-keyword">in</span> (<span class="hljs-string">&#x27;vswhere.exe -property catalog_productLineVersion&#x27;</span>) <span class="hljs-keyword">do</span> <span class="hljs-built_in">set</span> version=%%t<br><span class="hljs-built_in">popd</span><br><span class="hljs-built_in">cd</span> ..\<br>call Lib\premake5\Premake5.exe vs%version%<br>PAUSE<br></code></pre></td></tr></table></figure><p>Result:</p><img src="/BatLearning01/ReturnResult.png" class="" title="Running Result">]]></content>
    
    
    <categories>
      
      <category>Bash Notes</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Original</tag>
      
      <tag>Bash</tag>
      
      <tag>Windows</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Illusion Engine 01 - Preparation</title>
    <link href="/Preparation/"/>
    <url>/Preparation/</url>
    
    <content type="html"><![CDATA[<p>This article is aimed at doing all the preparation work before coding. It includes the construction of the project structure, the configuration of the project, and the introduction to third-party libraries.</p><h2 id="Creating-the-project"><a href="#Creating-the-project" class="headerlink" title="Creating the project"></a>Creating the project</h2><p>The recommended IDE is visual studio 2022. This project also works for Visual Studio 2017 and 2019. The test on other IDE hasn’t been done.</p><p>Create a static library as our engine project, so that it could be statically linked to our game application.</p><img src="/Preparation/IDE.png" class="" title="Visual Studio 2022"><p>This project would become our engine project. Other than that, we have to create an empty project in this solution which will become our game application.</p><p>Here I’ll name the engine project “Illusion”.</p><img src="/Preparation/Solution.png" class="" title="Illusion &amp; Game"><hr><h2 id="Project-Structure"><a href="#Project-Structure" class="headerlink" title="Project Structure"></a>Project Structure</h2><p>Game and Illusion could be included in a single folder, such as Root. In my project, I included them in a folder called Collection. So the structure looks like this:</p><img src="/Preparation/CollectionFolder.png" class="" title="The structure of Collection folder"><ul><li>Game<ul><li>The Game project, includes: src&#x2F;… folder, assets&#x2F;shaders&#x2F;… folder, and assets&#x2F;textures&#x2F;… folder.</li><li>The src folder contains all the source code for the game application</li><li>The shaders folder contains customized shaders and the textures folder contains all kinds of texture resources.</li></ul></li></ul><img src="/Preparation/GameFolder.png" class="" title="The Game Folder"><ul><li>Illusion<ul><li>The Illusion project, includes: Lib&#x2F;… folder, and src&#x2F;Engine&#x2F;… folder</li><li>In the src folder, the source code is separated into different folders based on their function, such as Core, Event, Renderer, etc.</li><li>The content in the Lib folder would be explained in the third parties part below.</li></ul></li></ul><img src="/Preparation/IllusionFolder.png" class="" title="The Illusion Folder"><ul><li>Lib<ul><li>The third-party library or tools that are not necessary for the Illusion Engine and Game Application, but is helpful when we build the whole project, such as premake, cmake, etc.</li><li>Either Illusion or Game could be executed without the existence of premake, but premake could help us get rid of configuring the project over and over again.</li></ul></li></ul><img src="/Preparation/LibFolder.png" class="" title="The Lib Folder"><ul><li>Scripts<ul><li>The bat files that calls premake or clean up the project.</li></ul></li></ul><img src="/Preparation/ScriptsFolder.png" class="" title="The Scripts Folder"><p>As a result, the final structure of the project looks like this:</p><figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs gauss">Collection<br>├─Game<br>│  ├─assets<br>│  │  ├─shaders<br>│  │  └─textures<br>│  └─src<br>├─Illusion<br>│  ├─<span class="hljs-keyword">Lib</span><br>│  │  ├─Glad<br>│  │  ├─GLFW<br>│  │  ├─<span class="hljs-built_in">glm</span><br>│  │  ├─imgui<br>│  │  ├─spdlog<br>│  │  └─stb_image<br>│  └─src<br>│      └─Engine<br>│          ├─Core<br>│          │  ├─Application<br>│          │  ├─Input<br>│          │  ├─Layer<br>│          │  ├─<span class="hljs-built_in">Log</span><br>│          │  ├─Resource<br>│          │  ├─Utils<br>│          │  └─<span class="hljs-built_in">Window</span><br>│          ├─Event<br>│          ├─ImGui<br>│          └─Renderer<br>├─<span class="hljs-keyword">Lib</span><br>└─Scripts<br></code></pre></td></tr></table></figure><hr><h2 id="Third-party-Libraries"><a href="#Third-party-Libraries" class="headerlink" title="Third-party Libraries"></a>Third-party Libraries</h2><p>As of the time this article is published, the third-party library used in this project includes:</p><ul><li><a href="https://github.com/gabime/spdlog">SpdLog</a><ul><li>A fast C++ logging library.</li></ul></li><li><a href="https://github.com/glfw/glfw">GLFW</a><ul><li>GL Frame Work, a multi-platform library for OpenGL, OpenGL ES, Vulkan. Mainly used to handle input and window events.</li></ul></li><li><a href="https://github.com/Dav1dde/glad">Glad</a><ul><li>The dependency library for OpenGL, including API for OpenGL.</li></ul></li><li><a href="https://github.com/ocornut/imgui">ImGui</a><ul><li>A Bloat-free Graphical User interface for C++ with minimal dependencies. Used to build viewer and editor</li></ul></li><li><a href="https://github.com/g-truc/glm">glm</a><ul><li>A basic math library, including vector, matrix, and some other common math components.</li></ul></li><li><a href="https://github.com/premake/premake-core">Premake</a><ul><li>A command line utility that reads a scripted definition of a software project, then uses it to perform build configuration tasks or generate project files.</li></ul></li></ul><p>All of these libraries could be found on GitHub. You could click on the name of the library to jump to its page on Github.</p><p>SpdLog, GLFW, Glad, ImGui, and glm are included in Collection&#x2F;Illusion&#x2F;Lib… folder.</p><img src="/Preparation/IllusionLib.png" class="" title="Thirdparty Libraries"><p>Premake is included in Collection&#x2F;Lib&#x2F;… folder.</p><hr><h2 id="Configurations"><a href="#Configurations" class="headerlink" title="Configurations"></a>Configurations</h2><p>Since we have premake, we could add a configuration file for our projects.</p><p>Inside Collection&#x2F;… folder, create a file called “premake” and revise its extension to “.lua”.</p><p>In premake.lua, enter code:</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br></pre></td><td class="code"><pre><code class="hljs lua"><span class="hljs-comment">-- Set up a workspace, this would work for every project</span><br>workspace <span class="hljs-string">&quot;Project&quot;</span><br>    architecture <span class="hljs-string">&quot;x64&quot;</span><br><span class="hljs-comment">-- Set the starting project to be Game</span><br>    startproject <span class="hljs-string">&quot;Game&quot;</span><br><span class="hljs-comment">-- Define Build Configuration</span><br>    configurations<br>    &#123;<br>        <span class="hljs-string">&quot;Debug&quot;</span>,<br>        <span class="hljs-string">&quot;Release&quot;</span>,<br>        <span class="hljs-string">&quot;Dist&quot;</span><br>    &#125;<br><span class="hljs-comment">-- Set the output file format to be like &quot;Debug-Windows-x86_64&quot;</span><br>outputdir = <span class="hljs-string">&quot;%&#123;cfg.buildcfg&#125;-%&#123;cfg.system&#125;-%&#123;cfg.architecture&#125;&quot;</span><br><span class="hljs-comment">-- Include directories relative to the root folder (solution directory)</span><br>IncludeDir = &#123;&#125;<br>IncludeDir[<span class="hljs-string">&quot;GLFW&quot;</span>] = <span class="hljs-string">&quot;Illusion/Lib/GLFW/include&quot;</span><br>IncludeDir[<span class="hljs-string">&quot;Glad&quot;</span>] = <span class="hljs-string">&quot;Illusion/Lib/Glad/include&quot;</span><br>IncludeDir[<span class="hljs-string">&quot;ImGui&quot;</span>] = <span class="hljs-string">&quot;Illusion/Lib/imgui&quot;</span><br>IncludeDir[<span class="hljs-string">&quot;glm&quot;</span>] = <span class="hljs-string">&quot;Illusion/Lib/glm&quot;</span><br>IncludeDir[<span class="hljs-string">&quot;stb_image&quot;</span>] = <span class="hljs-string">&quot;Illusion/Lib/stb_image&quot;</span><br><span class="hljs-comment">-- Include these folders to load the configuration files at those positions</span><br>include <span class="hljs-string">&quot;Illusion/Lib/GLFW&quot;</span><br>include <span class="hljs-string">&quot;Illusion/Lib/Glad&quot;</span><br>include <span class="hljs-string">&quot;Illusion/Lib/imgui&quot;</span><br><span class="hljs-comment">-- Define Illusion Project, set the relative path, set the kind to be a static library, and set the language</span><br>project <span class="hljs-string">&quot;Illusion&quot;</span><br>    location <span class="hljs-string">&quot;Illusion&quot;</span><br>    kind <span class="hljs-string">&quot;StaticLib&quot;</span><br>    language <span class="hljs-string">&quot;C++&quot;</span><br>    cppdialect <span class="hljs-string">&quot;C++17&quot;</span><br>    staticruntime <span class="hljs-string">&quot;on&quot;</span><br><span class="hljs-comment">-- Set the output path and intermediate path</span><br>    targetdir (<span class="hljs-string">&quot;bin/&quot;</span> .. outputdir .. <span class="hljs-string">&quot;/%&#123;prj.name&#125;&quot;</span>)<br>    objdir (<span class="hljs-string">&quot;bin-int/&quot;</span> .. outputdir .. <span class="hljs-string">&quot;/%&#123;prj.name&#125;&quot;</span>)<br><span class="hljs-comment">-- Define the precompile header</span><br>    pchheader <span class="hljs-string">&quot;pch.h&quot;</span><br>    pchsource <span class="hljs-string">&quot;Illusion/src/pch.cpp&quot;</span><br><span class="hljs-comment">-- Define files that would be compiled</span><br>    files<br>    &#123;<br>        <span class="hljs-string">&quot;%&#123;prj.name&#125;/src/**.h&quot;</span>,<br>        <span class="hljs-string">&quot;%&#123;prj.name&#125;/src/**.cpp&quot;</span>,<br>        <span class="hljs-string">&quot;%&#123;prj.name&#125;/Lib/stb_image/**.h&quot;</span>,<br>        <span class="hljs-string">&quot;%&#123;prj.name&#125;/Lib/stb_image/**.cpp&quot;</span>,<br>        <span class="hljs-string">&quot;%&#123;prj.name&#125;/Lib/glm/glm/**.hpp&quot;</span>,<br>        <span class="hljs-string">&quot;%&#123;prj.name&#125;/Lib/glm/glm/**.inl&quot;</span>,<br>    &#125;<br><span class="hljs-comment">-- Preprocess macros</span><br>    defines<br>    &#123;<br>        <span class="hljs-string">&quot;_CRT_SECURE_NO_WARNINGS&quot;</span><br>    &#125;<br><span class="hljs-comment">-- Define include path</span><br>    includedirs<br>    &#123;<br>        <span class="hljs-string">&quot;%&#123;prj.name&#125;/src&quot;</span>,<br>        <span class="hljs-string">&quot;%&#123;prj.name&#125;/Lib/spdlog/include&quot;</span>,<br>        <span class="hljs-string">&quot;%&#123;IncludeDir.GLFW&#125;&quot;</span>,<br>        <span class="hljs-string">&quot;%&#123;IncludeDir.Glad&#125;&quot;</span>,<br>        <span class="hljs-string">&quot;%&#123;IncludeDir.ImGui&#125;&quot;</span>,<br>        <span class="hljs-string">&quot;%&#123;IncludeDir.glm&#125;&quot;</span>,<br>        <span class="hljs-string">&quot;%&#123;IncludeDir.stb_image&#125;&quot;</span><br>    &#125;<br><span class="hljs-comment">-- Link these libraries to the project</span><br>    links <br>    &#123; <br>        <span class="hljs-string">&quot;GLFW&quot;</span>,<br>        <span class="hljs-string">&quot;Glad&quot;</span>,<br>        <span class="hljs-string">&quot;ImGui&quot;</span>,<br>        <span class="hljs-string">&quot;opengl32.lib&quot;</span><br>    &#125;<br><span class="hljs-comment">-- Define some macros for different build options</span><br>    filter <span class="hljs-string">&quot;system:windows&quot;</span><br>        systemversion <span class="hljs-string">&quot;latest&quot;</span><br><br>        defines<br>        &#123;<br>            <span class="hljs-string">&quot;ILLUSION_PLATFORM_WINDOWS&quot;</span>,<br>            <span class="hljs-string">&quot;ILLUSION_BUILD_DLL&quot;</span>,<br>            <span class="hljs-string">&quot;GLFW_INCLUDE_NONE&quot;</span><br>        &#125;<br><br>    filter <span class="hljs-string">&quot;configurations:Debug&quot;</span><br>        defines <span class="hljs-string">&quot;ILLUSION_DEBUG&quot;</span><br>        runtime <span class="hljs-string">&quot;Debug&quot;</span><br>        symbols <span class="hljs-string">&quot;on&quot;</span><br><br>    filter <span class="hljs-string">&quot;configurations:Release&quot;</span><br>        defines <span class="hljs-string">&quot;ILLUSION_RELEASE&quot;</span><br>        runtime <span class="hljs-string">&quot;Release&quot;</span><br>        optimize <span class="hljs-string">&quot;on&quot;</span><br><br>    filter <span class="hljs-string">&quot;configurations:Dist&quot;</span><br>        defines <span class="hljs-string">&quot;ILLUSION_DIST&quot;</span><br>        runtime <span class="hljs-string">&quot;Release&quot;</span><br>        optimize <span class="hljs-string">&quot;on&quot;</span><br><span class="hljs-comment">-- Define Game Project</span><br>project <span class="hljs-string">&quot;Game&quot;</span><br>    location <span class="hljs-string">&quot;Game&quot;</span><br>    kind <span class="hljs-string">&quot;ConsoleApp&quot;</span><br>    language <span class="hljs-string">&quot;C++&quot;</span><br>    cppdialect <span class="hljs-string">&quot;C++17&quot;</span><br>    staticruntime <span class="hljs-string">&quot;on&quot;</span><br><span class="hljs-comment">-- Set the output path and intermediate path</span><br>    targetdir (<span class="hljs-string">&quot;bin/&quot;</span> .. outputdir .. <span class="hljs-string">&quot;/%&#123;prj.name&#125;&quot;</span>)<br>    objdir (<span class="hljs-string">&quot;bin-int/&quot;</span> .. outputdir .. <span class="hljs-string">&quot;/%&#123;prj.name&#125;&quot;</span>)<br><span class="hljs-comment">-- Define files that would be compiled</span><br>    files<br>    &#123;<br>        <span class="hljs-string">&quot;%&#123;prj.name&#125;/src/**.h&quot;</span>,<br>        <span class="hljs-string">&quot;%&#123;prj.name&#125;/src/**.cpp&quot;</span><br>    &#125;<br><span class="hljs-comment">-- Define include path</span><br>    includedirs<br>    &#123;<br>        <span class="hljs-string">&quot;Illusion/Lib/spdlog/include&quot;</span>,<br>        <span class="hljs-string">&quot;Illusion/src&quot;</span>,<br>        <span class="hljs-string">&quot;Illusion/Lib&quot;</span>,<br>        <span class="hljs-string">&quot;%&#123;IncludeDir.glm&#125;&quot;</span><br>    &#125;<br><span class="hljs-comment">-- Link the engine to the project</span><br>    links<br>    &#123;<br>        <span class="hljs-string">&quot;Illusion&quot;</span><br>    &#125;<br><span class="hljs-comment">-- Define some macros for different build options</span><br>    filter <span class="hljs-string">&quot;system:windows&quot;</span><br>        systemversion <span class="hljs-string">&quot;latest&quot;</span><br><br>        defines<br>        &#123;<br>            <span class="hljs-string">&quot;ILLUSION_PLATFORM_WINDOWS&quot;</span><br>        &#125;<br><br>    filter <span class="hljs-string">&quot;configurations:Debug&quot;</span><br>        defines <span class="hljs-string">&quot;ILLUSION_DEBUG&quot;</span><br>        runtime <span class="hljs-string">&quot;Debug&quot;</span><br>        symbols <span class="hljs-string">&quot;on&quot;</span><br><br>    filter <span class="hljs-string">&quot;configurations:Release&quot;</span><br>        defines <span class="hljs-string">&quot;ILLUSION_RELEASE&quot;</span><br>        runtime <span class="hljs-string">&quot;Release&quot;</span><br>        optimize <span class="hljs-string">&quot;on&quot;</span><br><br>    filter <span class="hljs-string">&quot;configurations:Dist&quot;</span><br>        defines <span class="hljs-string">&quot;ILLUSION_DIST&quot;</span><br>        runtime <span class="hljs-string">&quot;Release&quot;</span><br>        optimize <span class="hljs-string">&quot;on&quot;</span><br></code></pre></td></tr></table></figure><p>Additionally, since we have to build those third-party libraries, they also need their configuration files.</p><p>Inside Collection&#x2F;Illusion&#x2F;Lib&#x2F;GLFW&#x2F;… folder, create a file called “premake.lua”, and enter code:</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs lua">project <span class="hljs-string">&quot;GLFW&quot;</span><br>    kind <span class="hljs-string">&quot;StaticLib&quot;</span><br>    language <span class="hljs-string">&quot;C&quot;</span><br>    targetdir (<span class="hljs-string">&quot;bin/&quot;</span> .. outputdir .. <span class="hljs-string">&quot;/%&#123;prj.name&#125;&quot;</span>)<br>    objdir (<span class="hljs-string">&quot;bin-int/&quot;</span> .. outputdir .. <span class="hljs-string">&quot;/%&#123;prj.name&#125;&quot;</span>)<br>    files<br>    &#123;<br>        <span class="hljs-string">&quot;include/GLFW/glfw3.h&quot;</span>,<br>        <span class="hljs-string">&quot;include/GLFW/glfw3native.h&quot;</span>,<br>        <span class="hljs-string">&quot;src/glfw_config.h&quot;</span>,<br>        <span class="hljs-string">&quot;src/context.c&quot;</span>,<br>        <span class="hljs-string">&quot;src/init.c&quot;</span>,<br>        <span class="hljs-string">&quot;src/input.c&quot;</span>,<br>        <span class="hljs-string">&quot;src/monitor.c&quot;</span>,<br>        <span class="hljs-string">&quot;src/vulkan.c&quot;</span>,<br>        <span class="hljs-string">&quot;src/window.c&quot;</span><br>    &#125;<br>    filter <span class="hljs-string">&quot;system:windows&quot;</span><br>        systemversion <span class="hljs-string">&quot;latest&quot;</span><br>        staticruntime <span class="hljs-string">&quot;on&quot;</span><br>        files<br>        &#123;<br>            <span class="hljs-string">&quot;src/win32_init.c&quot;</span>,<br>            <span class="hljs-string">&quot;src/win32_joystick.c&quot;</span>,<br>            <span class="hljs-string">&quot;src/win32_monitor.c&quot;</span>,<br>            <span class="hljs-string">&quot;src/win32_time.c&quot;</span>,<br>            <span class="hljs-string">&quot;src/win32_thread.c&quot;</span>,<br>            <span class="hljs-string">&quot;src/win32_window.c&quot;</span>,<br>            <span class="hljs-string">&quot;src/wgl_context.c&quot;</span>,<br>            <span class="hljs-string">&quot;src/egl_context.c&quot;</span>,<br>            <span class="hljs-string">&quot;src/osmesa_context.c&quot;</span><br>        &#125;<br>        defines <br>        &#123; <br>            <span class="hljs-string">&quot;_GLFW_WIN32&quot;</span>,<br>            <span class="hljs-string">&quot;_CRT_SECURE_NO_WARNINGS&quot;</span><br>        &#125;<br>    filter &#123; <span class="hljs-string">&quot;system:windows&quot;</span>, <span class="hljs-string">&quot;configurations:Release&quot;</span> &#125;<br>        buildoptions <span class="hljs-string">&quot;/MT&quot;</span><br></code></pre></td></tr></table></figure><p>Inside Collection&#x2F;Illusion&#x2F;Lib&#x2F;Glad&#x2F;… folder, create a file called “premake.lua”, and enter the code:</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs lua">project <span class="hljs-string">&quot;Glad&quot;</span><br>    kind <span class="hljs-string">&quot;StaticLib&quot;</span><br>    language <span class="hljs-string">&quot;C&quot;</span><br>    staticruntime <span class="hljs-string">&quot;on&quot;</span><br>    targetdir (<span class="hljs-string">&quot;bin/&quot;</span> .. outputdir .. <span class="hljs-string">&quot;/%&#123;prj.name&#125;&quot;</span>)<br>    objdir (<span class="hljs-string">&quot;bin-int/&quot;</span> .. outputdir .. <span class="hljs-string">&quot;/%&#123;prj.name&#125;&quot;</span>)<br>    files<br>    &#123;<br>        <span class="hljs-string">&quot;include/glad/glad.h&quot;</span>,<br>        <span class="hljs-string">&quot;include/KHR/khrplatform.h&quot;</span>,<br>        <span class="hljs-string">&quot;src/glad.c&quot;</span><br>    &#125;<br>    includedirs<br>    &#123;<br>        <span class="hljs-string">&quot;include&quot;</span><br>    &#125;<br>    filter <span class="hljs-string">&quot;system:windows&quot;</span><br>        systemversion <span class="hljs-string">&quot;latest&quot;</span><br>    filter <span class="hljs-string">&quot;configurations:Debug&quot;</span><br>        runtime <span class="hljs-string">&quot;Debug&quot;</span><br>        symbols <span class="hljs-string">&quot;on&quot;</span><br>    filter <span class="hljs-string">&quot;configurations:Release&quot;</span><br>        runtime <span class="hljs-string">&quot;Release&quot;</span><br>        optimize <span class="hljs-string">&quot;on&quot;</span><br></code></pre></td></tr></table></figure><p>Inside Collection&#x2F;Illusion&#x2F;Lib&#x2F;ImGui&#x2F;… folder, create a file called “premake.lua”, and enter code:</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs lua">project <span class="hljs-string">&quot;ImGui&quot;</span><br>    kind <span class="hljs-string">&quot;StaticLib&quot;</span><br>    language <span class="hljs-string">&quot;C++&quot;</span><br>    cppdialect <span class="hljs-string">&quot;C++17&quot;</span><br>    targetdir (<span class="hljs-string">&quot;bin/&quot;</span> .. outputdir .. <span class="hljs-string">&quot;/%&#123;prj.name&#125;&quot;</span>)<br>    objdir (<span class="hljs-string">&quot;bin-int/&quot;</span> .. outputdir .. <span class="hljs-string">&quot;/%&#123;prj.name&#125;&quot;</span>)<br>    files<br>    &#123;<br>        <span class="hljs-string">&quot;imconfig.h&quot;</span>,<br>        <span class="hljs-string">&quot;imgui.h&quot;</span>,<br>        <span class="hljs-string">&quot;imgui.cpp&quot;</span>,<br>        <span class="hljs-string">&quot;imgui_draw.cpp&quot;</span>,<br>        <span class="hljs-string">&quot;imgui_internal.h&quot;</span>,<br>        <span class="hljs-string">&quot;imgui_widgets.cpp&quot;</span>,<br>        <span class="hljs-string">&quot;imstb_rectpack.h&quot;</span>,<br>        <span class="hljs-string">&quot;imstb_textedit.h&quot;</span>,<br>        <span class="hljs-string">&quot;imstb_truetype.h&quot;</span>,<br>        <span class="hljs-string">&quot;imgui_demo.cpp&quot;</span><br>    &#125;<br>    filter <span class="hljs-string">&quot;system:windows&quot;</span><br>        systemversion <span class="hljs-string">&quot;latest&quot;</span><br>        staticruntime <span class="hljs-string">&quot;on&quot;</span><br>    filter &#123; <span class="hljs-string">&quot;system:windows&quot;</span>, <span class="hljs-string">&quot;configurations:Release&quot;</span> &#125;<br>        buildoptions <span class="hljs-string">&quot;/MT&quot;</span><br></code></pre></td></tr></table></figure><p>After this, the configuration information for the whole project is recorded. To build the project, we only have to call premake5 and tell it the toolset that we are using:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">&gt; Lib/Premake5/Premake5.exe vs2022<br></code></pre></td></tr></table></figure><p>To simplify this procedure, we need a bat file inside Collection&#x2F;Scripts&#x2F;… folder.</p><p>Inside Build.bat, enter the code:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash">@<span class="hljs-built_in">echo</span> off<br><span class="hljs-built_in">pushd</span> C:<br><span class="hljs-built_in">cd</span> Program Files (x86)\Microsoft Visual Studio\Installer<br><span class="hljs-keyword">for</span> /f <span class="hljs-string">&quot;delims=&quot;</span> %%t <span class="hljs-keyword">in</span> (<span class="hljs-string">&#x27;vswhere.exe -property catalog_productLineVersion&#x27;</span>) <span class="hljs-keyword">do</span> <span class="hljs-built_in">set</span> version=%%t<br><span class="hljs-built_in">popd</span><br><span class="hljs-built_in">cd</span> ..\<br>call Lib\premake5\Premake5.exe vs%version%<br>PAUSE<br></code></pre></td></tr></table></figure><p>This file would figure out the version of visual studio installed on this device and pass it to premake to generate the correct version of project files such as .vs, .sln, .vcproj, etc.</p><p>Inside Clear.bat, enter the code:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> ..\<br>rd /s /q .vs<br>rd /s /q bin<br>rd /s /q bin-int<br>del /a Project.sln<br>del /a /s *.vcxproj.*<br><span class="hljs-built_in">pushd</span> Illusion\Lib\Glad<br>rd /s /q bin<br>rd /s /q bin-int<br><span class="hljs-built_in">popd</span><br><span class="hljs-built_in">pushd</span> Illusion\Lib\GLFW<br>rd /s /q bin<br>rd /s /q bin-int<br><span class="hljs-built_in">popd</span><br><span class="hljs-built_in">pushd</span> Illusion\Lib\imgui<br>rd /s /q bin<br>rd /s /q bin-int<br><span class="hljs-built_in">popd</span><br>PAUSE<br></code></pre></td></tr></table></figure><p>This file would delete all the project files, including .vs, .sln, .vcproj, etc. Only source code would be left. It is a tool that helps us clean up the project and save space.</p><p>Thus, by running Build.bat and Clear.bat, we could easily generate or clean up the project.</p><img src="/Preparation/Build.png" class="" title="Build.bat Running Result"><img src="/Preparation/Clear.png" class="" title="Clear.bat Running Result"><h2 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h2><p>So far, we have completed the configuration of the entire project. We stored the configuration information in premake.lua, and handed over the creation and cleaning of the project to the batch files to complete. By doing so, we don’t have to configure the project and struggle with the linkclude problem over and over again.</p>]]></content>
    
    
    <categories>
      
      <category>Game Engine</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Original</tag>
      
      <tag>C++</tag>
      
      <tag>Game Development</tag>
      
      <tag>Computer Graphics</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hex Converter</title>
    <link href="/HexConverter/"/>
    <url>/HexConverter/</url>
    
    <content type="html"><![CDATA[<h2 id="Background"><a href="#Background" class="headerlink" title="Background"></a>Background</h2><p>When I use OpenGL to develop a game engine and write a renderer for it, I often encounter the need to write an independent shader file and store the glsl code in a <strong>text file</strong>.</p><p>However, the file in text format is <strong>slow to read</strong>, and the file size is <strong>relatively large</strong> (even after zip compression), and at the same time, to encapsulate the shader and hide it from the engine user, I need to design a binary file format myself, and write unique IO system for it.</p><p>In this context, the conversion between binary and decimal is particularly important. To understand the conversion between bases, I tried to use the least code to write a converter within 36 bases.</p><hr><h2 id="Implementation"><a href="#Implementation" class="headerlink" title="Implementation"></a>Implementation</h2><p>The main idea is to <em>firstly convert the input number to a <strong>decimal number</strong></em>. And then, convert the decimal number into the desired number.</p><p>The implementation looks like this:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-type">void</span> <span class="hljs-title function_">HexConverter</span><span class="hljs-params">(<span class="hljs-type">char</span>* in, <span class="hljs-type">int</span> s_in, <span class="hljs-type">char</span>* out, <span class="hljs-type">int</span> s_out)</span><br>&#123;<br>    <span class="hljs-type">int</span> v = <span class="hljs-number">0</span>, n;<br>    <span class="hljs-comment">// Convert the input into a decimal number</span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">char</span>* p = in; *p; p++)<br>        v = v * s_in + (*p - (( *p &gt;= <span class="hljs-string">&#x27;a&#x27;</span> ) ? (<span class="hljs-string">&#x27;a&#x27;</span> - <span class="hljs-number">10</span>) : <span class="hljs-string">&#x27;0&#x27;</span>));<br>    <span class="hljs-comment">// Convert the decimal number to s_out based number</span><br>    <span class="hljs-keyword">for</span>(n = <span class="hljs-number">31</span>; v &amp;&amp; n; v = v / s_out)<br>        out[n--] = (((v % s_out) &lt; <span class="hljs-number">10</span>) ? <span class="hljs-string">&#x27;0&#x27;</span> : (<span class="hljs-string">&#x27;a&#x27;</span> - <span class="hljs-number">10</span>)) + (v % s_out);<br>    <span class="hljs-comment">// Copy the answer to output array</span><br>    memmove(out, out + n + <span class="hljs-number">1</span>, <span class="hljs-number">32</span> - n - <span class="hljs-number">1</span>);<br>    <span class="hljs-comment">// Cut the output array</span><br>    out[<span class="hljs-number">32</span> - n - <span class="hljs-number">1</span>] = <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>The converter falls into two parts:</p><ol><li>First part</li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-comment">// Convert the input into a decimal number</span><br><span class="hljs-keyword">for</span>(<span class="hljs-type">char</span>* p = in; *p; p++)<br>    v = v * s_in + (*p - (( *p &gt;= <span class="hljs-string">&#x27;a&#x27;</span> ) ? (<span class="hljs-string">&#x27;a&#x27;</span> - <span class="hljs-number">10</span>) : <span class="hljs-string">&#x27;0&#x27;</span>));<br></code></pre></td></tr></table></figure><ul><li>The first for-loop is used to conevrt the input into a decimal number.<ul><li>*p represents the number on each digit of the input number.</li><li>Use *p as the conditon statement, so that the loop won’t stop until p points to ‘\0’ which equals to false and also represents the end of the array.</li></ul></li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs C">v = v * s_in + (*p - (( *p &gt;= <span class="hljs-string">&#x27;a&#x27;</span> ) ? (<span class="hljs-string">&#x27;a&#x27;</span> - <span class="hljs-number">10</span>) : <span class="hljs-string">&#x27;0&#x27;</span>));<br></code></pre></td></tr></table></figure><ul><li>This line is where math actually gets in.<ul><li>(( *p &gt;&#x3D; ‘a’ ) ? (‘a’ - 10) : ‘0’) figures out whether the digit is a charater.<ul><li>If it is, this part would return <strong>‘a’ - 10</strong>. Then the right part of this code would turn into : *p - ‘a’ + 10.</li><li>If it isn’t, this part would return <strong>‘0’</strong>. Then the right part of this code would turn into : *p - ‘0’.</li><li>By doing so, the digit is converted to a decimal number. (0123456789abcdef is the sequence of the digits)</li></ul></li><li>This line could be simplified as: <em><strong>v &#x3D; v * s_in + decimal format of current digit</strong></em>.<ul><li>After the iteration, this line endd up like: <em><strong>v &#x3D; (…((v * s + d) * s + d) * s + d) * s … + d</strong></em>.</li><li>s_ins in each layer are cumulative, they would add up and become <em><strong>$\sum_{i&#x3D;1}^{n} v_is^{n+1-i}$</strong></em>. And this is exactly the representation of s-based number in decimal.</li></ul></li></ul></li></ul><ol start="2"><li>Second Part</li></ol><ul><li>The algorithm follows the steps listed below:<ol><li>Divide the decimal number by s_out.</li><li>Write down the remainder (<strong>in desired base</strong>).</li><li>Divide the result again by s_out.</li><li>Repeat step 2 and 3 until result is 0.</li><li>The result is the digit sequence of the remainders <strong>from the last to first</strong>.</li></ol></li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-comment">// Convert the decimal number to s_out based number</span><br><span class="hljs-keyword">for</span>(n = <span class="hljs-number">31</span>; v &amp;&amp; n; v = v / s_out)<br>    out[n--] = (((v % s_out) &lt; <span class="hljs-number">10</span>) ? <span class="hljs-string">&#x27;0&#x27;</span> : (<span class="hljs-string">&#x27;a&#x27;</span> - <span class="hljs-number">10</span>)) + (v % s_out);<br></code></pre></td></tr></table></figure><ul><li>The second for-loop is used to convert the decimal number into desired base.<ul><li>n is the iteration index. Since the <strong>upper bound of int is $2^{32}$</strong>, the output array cannot be longer than 32. (index range: 0-31)</li><li>v &amp;&amp; n make sure the converter won’t convert numbers bigger than $2^{32}$. n would be out of range is input is bigger than $2^{32}$.</li><li>v &#x3D; v &#x2F; s_out represents step 1</li></ul></li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs C">out[n--] = (((v % s_out) &lt; <span class="hljs-number">10</span>) ? <span class="hljs-string">&#x27;0&#x27;</span> : (<span class="hljs-string">&#x27;a&#x27;</span> - <span class="hljs-number">10</span>)) + (v % s_out);<br></code></pre></td></tr></table></figure><ul><li>n– represents “digit sequence from the last to first”.</li><li>v % s_out is the remainder, &lt; 10 checks whether it would be a character.<ul><li>If it would, returns ‘a’ - 10 and add it with the reminder to convert it.</li><li>If it won’t, returns ‘0’ and add it with the reminder so the number will not change, only <em><strong>the type would become char</strong></em>.</li></ul></li></ul><hr><h2 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h2><p>Test Code:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-type">char</span> out[<span class="hljs-number">33</span>];<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> s = <span class="hljs-number">2</span>; s &lt; <span class="hljs-number">36</span>; s++)<br>    &#123;<br>        HexConverter(<span class="hljs-string">&quot;abc123&quot;</span>, <span class="hljs-number">16</span>, out, s);<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;16:abc123 =&gt; %2d:%s\n&quot;</span>, s, out);<br>    &#125;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> s = <span class="hljs-number">2</span>; s &lt; <span class="hljs-number">36</span>; s++)<br>    &#123;<br>        HexConverter(<span class="hljs-string">&quot;114514&quot;</span>, <span class="hljs-number">10</span>, out, s);<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;10:114514 =&gt; %2d:%s\n&quot;</span>, s, out);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>Test Result:</p><img src="/HexConverter/Result1.png" class="" title="Test Results"><img src="/HexConverter/Result2.png" class="" title="Test Results">]]></content>
    
    
    <categories>
      
      <category>C/C++ Notes</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C</tag>
      
      <tag>Skill</tag>
      
      <tag>Algorithm</tag>
      
      <tag>Math</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
